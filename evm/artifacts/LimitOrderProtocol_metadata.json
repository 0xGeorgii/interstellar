{
	"compiler": {
		"version": "0.8.23+commit.f704f362"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IWETH",
						"name": "_weth",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AdvanceEpochFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ArbitraryStaticCallFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "BadSignature",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "BitInvalidatedOrder",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ETHTransferFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EnforcedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EpochManagerAndBitInvalidatorsAreIncompatible",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EthDepositRejected",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExpectedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidMsgValue",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidPermit2Transfer",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidShortString",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidatedOrder",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MakingAmountTooLow",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MismatchArraysLengths",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OrderExpired",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OrderIsNotSuitableForMassInvalidation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PartialFillNotAllowed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Permit2TransferAmountTooHigh",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PredicateIsNotTrue",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PrivateOrder",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ReentrancyDetected",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "RemainingInvalidatedOrder",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "SafeTransferFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "SafeTransferFromFailed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "res",
						"type": "bytes"
					}
				],
				"name": "SimulationResults",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "str",
						"type": "string"
					}
				],
				"name": "StringTooLong",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "SwapWithZeroAmount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TakingAmountExceeded",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TakingAmountTooHigh",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransferFromMakerToTakerFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransferFromTakerToMakerFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "WrongSeriesNonce",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "maker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "slotIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "slotValue",
						"type": "uint256"
					}
				],
				"name": "BitInvalidatorUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "EIP712DomainChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "maker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "series",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newEpoch",
						"type": "uint256"
					}
				],
				"name": "EpochIncreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "orderHash",
						"type": "bytes32"
					}
				],
				"name": "OrderCancelled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "orderHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "remainingAmount",
						"type": "uint256"
					}
				],
				"name": "OrderFilled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint96",
						"name": "series",
						"type": "uint96"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "advanceEpoch",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "offsets",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "and",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "arbitraryStaticCall",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "maker",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "slot",
						"type": "uint256"
					}
				],
				"name": "bitInvalidatorForOrder",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "MakerTraits",
						"name": "makerTraits",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "additionalMask",
						"type": "uint256"
					}
				],
				"name": "bitsInvalidateForOrder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "MakerTraits",
						"name": "makerTraits",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "orderHash",
						"type": "bytes32"
					}
				],
				"name": "cancelOrder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "MakerTraits[]",
						"name": "makerTraits",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes32[]",
						"name": "orderHashes",
						"type": "bytes32[]"
					}
				],
				"name": "cancelOrders",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "predicate",
						"type": "bytes"
					}
				],
				"name": "checkPredicate",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "eip712Domain",
				"outputs": [
					{
						"internalType": "bytes1",
						"name": "fields",
						"type": "bytes1"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "version",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "chainId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "verifyingContract",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					},
					{
						"internalType": "uint256[]",
						"name": "extensions",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "maker",
						"type": "address"
					},
					{
						"internalType": "uint96",
						"name": "series",
						"type": "uint96"
					}
				],
				"name": "epoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "maker",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "series",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "makerEpoch",
						"type": "uint256"
					}
				],
				"name": "epochEquals",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "eq",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "salt",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "maker",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "receiver",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "makerAsset",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "takerAsset",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "makingAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "takingAmount",
								"type": "uint256"
							},
							{
								"internalType": "MakerTraits",
								"name": "makerTraits",
								"type": "uint256"
							}
						],
						"internalType": "struct IOrderMixin.Order",
						"name": "order",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "TakerTraits",
						"name": "takerTraits",
						"type": "uint256"
					}
				],
				"name": "fillContractOrder",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "salt",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "maker",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "receiver",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "makerAsset",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "takerAsset",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "makingAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "takingAmount",
								"type": "uint256"
							},
							{
								"internalType": "MakerTraits",
								"name": "makerTraits",
								"type": "uint256"
							}
						],
						"internalType": "struct IOrderMixin.Order",
						"name": "order",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "TakerTraits",
						"name": "takerTraits",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "args",
						"type": "bytes"
					}
				],
				"name": "fillContractOrderArgs",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "salt",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "maker",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "receiver",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "makerAsset",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "takerAsset",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "makingAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "takingAmount",
								"type": "uint256"
							},
							{
								"internalType": "MakerTraits",
								"name": "makerTraits",
								"type": "uint256"
							}
						],
						"internalType": "struct IOrderMixin.Order",
						"name": "order",
						"type": "tuple"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "vs",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "TakerTraits",
						"name": "takerTraits",
						"type": "uint256"
					}
				],
				"name": "fillOrder",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "salt",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "maker",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "receiver",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "makerAsset",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "takerAsset",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "makingAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "takingAmount",
								"type": "uint256"
							},
							{
								"internalType": "MakerTraits",
								"name": "makerTraits",
								"type": "uint256"
							}
						],
						"internalType": "struct IOrderMixin.Order",
						"name": "order",
						"type": "tuple"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "vs",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "TakerTraits",
						"name": "takerTraits",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "args",
						"type": "bytes"
					}
				],
				"name": "fillOrderArgs",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "gt",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "salt",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "maker",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "receiver",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "makerAsset",
								"type": "uint256"
							},
							{
								"internalType": "Address",
								"name": "takerAsset",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "makingAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "takingAmount",
								"type": "uint256"
							},
							{
								"internalType": "MakerTraits",
								"name": "makerTraits",
								"type": "uint256"
							}
						],
						"internalType": "struct IOrderMixin.Order",
						"name": "order",
						"type": "tuple"
					}
				],
				"name": "hashOrder",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint96",
						"name": "series",
						"type": "uint96"
					}
				],
				"name": "increaseEpoch",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "lt",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "not",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "offsets",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "or",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "permit",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "action",
						"type": "bytes"
					}
				],
				"name": "permitAndCall",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "maker",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "orderHash",
						"type": "bytes32"
					}
				],
				"name": "rawRemainingInvalidatorForOrder",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "maker",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "orderHash",
						"type": "bytes32"
					}
				],
				"name": "remainingInvalidatorForOrder",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "simulate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"errors": {
				"BitInvalidatedOrder()": [
					{
						"details": "The error is thrown when an attempt is made to invalidate an already invalidated entity."
					}
				],
				"EnforcedPause()": [
					{
						"details": "The operation failed because the contract is paused."
					}
				],
				"EthDepositRejected()": [
					{
						"details": "Error thrown when an ETH deposit from an EOA is attempted."
					}
				],
				"ExpectedPause()": [
					{
						"details": "The operation failed because the contract is not paused."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"RemainingInvalidatedOrder()": [
					{
						"details": "The error is thrown when an attempt is made to invalidate an already invalidated entity."
					}
				]
			},
			"events": {
				"BitInvalidatorUpdated(address,uint256,uint256)": {
					"params": {
						"maker": "Maker address",
						"slotIndex": "Slot index that was updated",
						"slotValue": "New slot value"
					}
				},
				"EIP712DomainChanged()": {
					"details": "MAY be emitted to signal that the domain could have changed."
				},
				"OrderCancelled(bytes32)": {
					"params": {
						"orderHash": "Hash of the order"
					}
				},
				"OrderFilled(bytes32,uint256)": {
					"params": {
						"orderHash": "Hash of the order",
						"remainingAmount": "Amount of the maker asset that remains to be filled"
					}
				},
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by `account`."
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by `account`."
				}
			},
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "Returns the domain separator for the current chain (EIP-712)"
				},
				"and(uint256,bytes)": {
					"returns": {
						"_0": "Result True if calls to all targets returned True. Otherwise, false"
					}
				},
				"arbitraryStaticCall(address,bytes)": {
					"returns": {
						"_0": "Result Bytes transmuted to uint256"
					}
				},
				"eip712Domain()": {
					"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
				},
				"epochEquals(address,uint256,uint256)": {
					"returns": {
						"_0": "Result True if `maker` has specified epoch. Otherwise, false"
					}
				},
				"eq(uint256,bytes)": {
					"params": {
						"value": "Value to test"
					},
					"returns": {
						"_0": "Result True if call to target returns the same value as `value`. Otherwise, false"
					}
				},
				"gt(uint256,bytes)": {
					"params": {
						"value": "Value to test"
					},
					"returns": {
						"_0": "Result True if call to target returns value which is bigger than `value`. Otherwise, false"
					}
				},
				"lt(uint256,bytes)": {
					"params": {
						"value": "Value to test"
					},
					"returns": {
						"_0": "Result True if call to target returns value which is lower than `value`. Otherwise, false"
					}
				},
				"not(bytes)": {
					"returns": {
						"_0": "Result True if call to target returns 0. Otherwise, false"
					}
				},
				"or(uint256,bytes)": {
					"returns": {
						"_0": "Result True if call to any target returned True. Otherwise, false"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"permitAndCall(bytes,bytes)": {
					"params": {
						"action": "The data representing the action to be executed after the permit.",
						"permit": "ERC20 token address (20 bytes) concatenated with the permit data, allowing this contract to spend the token. Format: [token address (20 bytes)][permit data]"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "##1inch Limit Order Protocol v4",
			"version": 1
		},
		"userdoc": {
			"events": {
				"BitInvalidatorUpdated(address,uint256,uint256)": {
					"notice": "Emitted when order with `useBitInvalidator` gets cancelled"
				},
				"OrderCancelled(bytes32)": {
					"notice": "Emitted when order without `useBitInvalidator` gets cancelled"
				},
				"OrderFilled(bytes32,uint256)": {
					"notice": "Emitted when order gets filled"
				}
			},
			"kind": "user",
			"methods": {
				"advanceEpoch(uint96,uint256)": {
					"notice": "Advances nonce by specified amount"
				},
				"and(uint256,bytes)": {
					"notice": "Calls every target with corresponding data"
				},
				"arbitraryStaticCall(address,bytes)": {
					"notice": "Performs an arbitrary call to target with data"
				},
				"bitInvalidatorForOrder(address,uint256)": {
					"notice": "See {IOrderMixin-bitInvalidatorForOrder}."
				},
				"bitsInvalidateForOrder(uint256,uint256)": {
					"notice": "See {IOrderMixin-bitsInvalidateForOrder}."
				},
				"cancelOrder(uint256,bytes32)": {
					"notice": "See {IOrderMixin-cancelOrder}."
				},
				"cancelOrders(uint256[],bytes32[])": {
					"notice": "See {IOrderMixin-cancelOrders}."
				},
				"checkPredicate(bytes)": {
					"notice": "See {IOrderMixin-checkPredicate}."
				},
				"epoch(address,uint96)": {
					"notice": "Returns nonce for `maker` and `series`"
				},
				"epochEquals(address,uint256,uint256)": {
					"notice": "Checks if `maker` has specified `makerEpoch` for `series`"
				},
				"eq(uint256,bytes)": {
					"notice": "Calls target with specified data and tests if it's equal to the value"
				},
				"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)": {
					"notice": "See {IOrderMixin-fillContractOrder}."
				},
				"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)": {
					"notice": "See {IOrderMixin-fillContractOrderArgs}."
				},
				"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)": {
					"notice": "See {IOrderMixin-fillOrder}."
				},
				"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)": {
					"notice": "See {IOrderMixin-fillOrderArgs}."
				},
				"gt(uint256,bytes)": {
					"notice": "Calls target with specified data and tests if it's bigger than value"
				},
				"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
					"notice": "See {IOrderMixin-hashOrder}."
				},
				"increaseEpoch(uint96)": {
					"notice": "Advances nonce by one"
				},
				"lt(uint256,bytes)": {
					"notice": "Calls target with specified data and tests if it's lower than value"
				},
				"not(bytes)": {
					"notice": "Calls target with specified data and tests if it's equal to 0"
				},
				"or(uint256,bytes)": {
					"notice": "Calls every target with corresponding data"
				},
				"pause()": {
					"notice": "Pauses all the trading functionality in the contract."
				},
				"permitAndCall(bytes,bytes)": {
					"notice": "Executes a permit for an ERC20 token and then a specified action in a single transaction."
				},
				"rawRemainingInvalidatorForOrder(address,bytes32)": {
					"notice": "See {IOrderMixin-rawRemainingInvalidatorForOrder}."
				},
				"remainingInvalidatorForOrder(address,bytes32)": {
					"notice": "See {IOrderMixin-remainingInvalidatorForOrder}."
				},
				"simulate(address,bytes)": {
					"notice": "See {IOrderMixin-simulate}."
				},
				"unpause()": {
					"notice": "Unpauses all the trading functionality in the contract."
				}
			},
			"notice": "Limit order protocol provides two different order types - Regular Limit Order - RFQ Order Both types provide similar order-fulfilling functionality. The difference is that regular order offers more customization options and features, while RFQ order is extremely gas efficient but without ability to customize. Regular limit order additionally supports - Execution predicates. Conditions for order execution are set with predicates. For example, expiration timestamp or block number, price for stop loss or take profit strategies. - Callbacks to notify maker on order execution See [OrderMixin](OrderMixin.md) for more details. RFQ orders supports - Expiration time - Cancelation by order id - Partial Fill (only once) See [OrderMixin](OrderMixin.md) for more details.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/LimitOrderProtocol.sol": "LimitOrderProtocol"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"contracts/AddressLib.sol": {
			"keccak256": "0x5dbbd2513216eca9660b83e356b1b50d6dd5f854c0106be6bc7df3fff01821d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://71c5a3b82d7cb1c060885ed6a11710fe216af832d30b6dd30d051635e6c4e586",
				"dweb:/ipfs/QmWYnTddAxLhKQq58wwya9NUkhudFoYamGZpcuHc6XdAMR"
			]
		},
		"contracts/AmountCalculatorLib.sol": {
			"keccak256": "0xb1fbc0d0951abce2e6d07b021ab03af781de5fa6b5002422d183ce81d9f2ef32",
			"license": "MIT",
			"urls": [
				"bzz-raw://dc4475dfc44f050aa4ee8b7335aa512a02669055639a0dbf267f81376a54cd89",
				"dweb:/ipfs/QmSVm5eyL8sPJGxc3oZmmZCeK5aonjr1M7qHUdtpAGHX4G"
			]
		},
		"contracts/BitInvalidatorLib.sol": {
			"keccak256": "0xd82e4b69af3f9883f6ac9560965a763a04f79e583b31b2f37982e24f44e25bcc",
			"license": "MIT",
			"urls": [
				"bzz-raw://ccf59b63d1721e65dcd41283a634874824689b2f7a02fd3f98d2fde03f07c2e4",
				"dweb:/ipfs/QmfA5ZSffvaaYCw5T8G11Bj3tGWcupx2ZBSJNZD6cDKrCq"
			]
		},
		"contracts/Context.sol": {
			"keccak256": "0x28ad9de5e26095f685a085591178af7aeac1427af1bf442986b5aee0a5b2a14a",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ad3864801aabbcc6f52361a1b86a3d4d342e283cc2036c47a3ef2df7e4a3c51",
				"dweb:/ipfs/QmezNWJGoPBwtHjsQae7dbqjeZgpbB2cHFE5nFBBzGvJFR"
			]
		},
		"contracts/ECDSA.sol": {
			"keccak256": "0xa6e29ba3b3f26b1d82b2f76c349038e314c4bcd7930ec8b2255022d8b684bd78",
			"license": "MIT",
			"urls": [
				"bzz-raw://f07a89f3ab957b78bab77074d61d0149d3b49ae1f9fa3b9b704cfdda974897ec",
				"dweb:/ipfs/QmbS9FUMWM1sDVin9R4A8ZG4Z4EukgNmUM59PnvzQ1Bhd3"
			]
		},
		"contracts/EIP712.sol": {
			"keccak256": "0xb4c232fe0a8def0f88b00e6ebce12ab4813f0d642c328132b7c836c1922ce2b1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ae9d0cf798117e2bd4da0ddccf456866d3fc5ffa147cd4172f15af965aa561a7",
				"dweb:/ipfs/QmWmgX4Ug6XbaPTMV6U921Za9QvzYtoWa3kCTo1eX47moq"
			]
		},
		"contracts/Errors.sol": {
			"keccak256": "0x9809fef666ce40e434d4019d25e06c69e7ad2aad7de59966a426cdee8b5a467e",
			"license": "MIT",
			"urls": [
				"bzz-raw://160977820c842b4d417f26f113a42027001ed3d23e398560f3f41316f31a4705",
				"dweb:/ipfs/QmPdqyve3ryoj3Hw52SG59LBpLhw8jNff6otau6iUKyQJh"
			]
		},
		"contracts/EthReceiver.sol": {
			"keccak256": "0x7fbf52c64fd6e03b2f5d977aac7d2b377fc240495d09e47642dc4ef301d173c6",
			"license": "MIT",
			"urls": [
				"bzz-raw://8dfcabf097c3a4e0819d387acc40b135aa9d59320971c2d648e399f77fedd7fc",
				"dweb:/ipfs/QmQreuBPfDUkauL9FTFY9dLe7vGyLsQoDA5DHZrA1u9SZS"
			]
		},
		"contracts/ExtensionLib.sol": {
			"keccak256": "0x054ca2ebc73bc4dd62816bd9a3d384b89454e5e65d9d83c66637c578789d96ca",
			"license": "MIT",
			"urls": [
				"bzz-raw://9dc6a0163be726abd9732ac63c31f2b99a8f9505ae6280e9d2fa13150990d113",
				"dweb:/ipfs/Qmd6CCRPTWE13WPEMTZZqisDkMQXdWm99P5N66CcT4uGaj"
			]
		},
		"contracts/IAmountGetter.sol": {
			"keccak256": "0x877aa31c7903e60289a1ba750e583113b1f317a9dfaeefcbf7fd19b4c62dbd98",
			"license": "MIT",
			"urls": [
				"bzz-raw://d7bbeceff66893fba29928459f2afa4546d19aaacdc3e6450ca51fb216874a86",
				"dweb:/ipfs/QmYny4mRyuGRoRGNmoqYnpU6um3KhoTmfWs1xvLnLLEs3f"
			]
		},
		"contracts/IDaiLikePermit.sol": {
			"keccak256": "0x0bcc9c886acb32f5664e3bfd0640e6fc1de6525b8f6103f25906d040d054ce07",
			"license": "MIT",
			"urls": [
				"bzz-raw://551e3b7d18d5e83727491f6749643a9a1e9a2e253a1a9be56eeb44e4c1b13876",
				"dweb:/ipfs/QmSpGRSD3DDP1EbBbXDPqAbSP58roEvCsosMQCDtSDnEBa"
			]
		},
		"contracts/IERC1271.sol": {
			"keccak256": "0xa46ecff1d8a61c56161d3c1ec3cf10b62595bb8dc6bc2bd7ebb2eab2fda06c9b",
			"license": "MIT",
			"urls": [
				"bzz-raw://443beef6470857f7c919bc98c6dc21bd2031742398e156cf29e8e873099d4f4f",
				"dweb:/ipfs/QmZfdVdBmJJi1z7mtjHTiaChPxxNHTjJrTwU3c9Br4GM4m"
			]
		},
		"contracts/IERC20.sol": {
			"keccak256": "0x91104f4bcc877f2506e4485b871efe0a6beb5c1ef7de9c374d99d75289905905",
			"license": "MIT",
			"urls": [
				"bzz-raw://57a7ecbec5ff542c117d36c7487386b5653ad21d0a83414e859d4202e069b36f",
				"dweb:/ipfs/QmaPocSUaysdjd1Ksa5kttxRHxhA7XWd6HrQ9teLFRyR6W"
			]
		},
		"contracts/IERC20Permit.sol": {
			"keccak256": "0x08d82b52e80c1a83f792c519388ca1ae86ae441bdfbd7d84addc82ef9c499a9e",
			"license": "MIT",
			"urls": [
				"bzz-raw://a5449dde3b5541f3f653b352bfa0aa4f3e91ab24a110106319baa83940f540a5",
				"dweb:/ipfs/QmUuadcLdSPtqMuuhBgkdAZHrE3tx5rdQ7HCXCsa8RDaTU"
			]
		},
		"contracts/IERC5267.sol": {
			"keccak256": "0xeb1cfabddcb4460c6145294ffebe6e15277f53923f488905ef0b18f8e4b7f1d6",
			"license": "MIT",
			"urls": [
				"bzz-raw://8419131499a0f3018b6596362238b47abe33e842798cc313494c6fd3081c1a63",
				"dweb:/ipfs/QmPRvMVqAteuCA1jzTUUz5AZLGuCTdVLF2x9Nw4nE1KiVS"
			]
		},
		"contracts/IERC7597Permit.sol": {
			"keccak256": "0x550ff037524afe9ef46d2c54ed59f4048c4216122e80da3b17872e05c163a74e",
			"license": "MIT",
			"urls": [
				"bzz-raw://40df00df81d4a4d2a78105bf5b86694037d885abf30e1e47e286b6e3310bdf48",
				"dweb:/ipfs/QmVqmS8BpSMV8PeiUme1tNDq48zfn71XYxWhb6fLtxCT6f"
			]
		},
		"contracts/IOrderMixin.sol": {
			"keccak256": "0x34ead0b58bd2640652ad6366b4c4ea1370b66d2dd21ffb5d5b831ed54fc9cc71",
			"license": "MIT",
			"urls": [
				"bzz-raw://65b82f8298ed8d9cb9eb3604af3c15129cffa009c5b0150f7f42154093d9ce96",
				"dweb:/ipfs/QmaQoQNVTiJPKB6MVwtemAWrwyKEKR5fLqy7vyfm8oqBEx"
			]
		},
		"contracts/IPermit2.sol": {
			"keccak256": "0x79e985eddaf616078cde10431fb615b577ba83b96ca5f4161cb82939a787a195",
			"license": "MIT",
			"urls": [
				"bzz-raw://a1d3243656736b7e4422a6eb7bbac982760f99674b9d80286e5bf45f1fe04376",
				"dweb:/ipfs/QmacX52RVqLnUgWxji9FkfFSZeGnV6qdxkkX5kMxakYRyW"
			]
		},
		"contracts/IPostInteraction.sol": {
			"keccak256": "0x34e475bf78d8978a6a6ac660f4c4357808bff2b27613dab281b562dc9fda907e",
			"license": "MIT",
			"urls": [
				"bzz-raw://3c35113e8dcba3fc49650e2b48cd1a14e23050b66c748d2323898a0117a01b58",
				"dweb:/ipfs/QmYuhGpycuzAcVvcHt8Z4M7GPYt1XSwd1VvKtyKyeb1e8V"
			]
		},
		"contracts/IPreInteraction.sol": {
			"keccak256": "0xb2deb1dafa99ec8259fe651e8b39f5cfff725143c0394e4eb359729a399a2a55",
			"license": "MIT",
			"urls": [
				"bzz-raw://d07a0f88bad2704d4a1d15a8ee50cc997b830eef82153483d13c624101da8fdb",
				"dweb:/ipfs/QmSv8ZY7zmMJ5pAWaWVzDDN4kn5cPeBvVM61o4nja17u75"
			]
		},
		"contracts/ITakerInteraction.sol": {
			"keccak256": "0xc6c79fdf0d75b02c9ebc50a12c274c2fe8418fcbcdd49359ae58b6115859c5fc",
			"license": "MIT",
			"urls": [
				"bzz-raw://c73fc4a6102e51ced68750cf515daff7d7a4b9f4b380c92c66fc4a086dd4bb07",
				"dweb:/ipfs/QmbNmr96WaNzrvbiz6YZwQGLiCck5u4ujWx8LfRfK9wCY1"
			]
		},
		"contracts/IWETH.sol": {
			"keccak256": "0x2dc6d61d66f1881a6c273b5f30f9a82e6eda4988c7aeaf0b26549a5e10c9fcb9",
			"license": "MIT",
			"urls": [
				"bzz-raw://1695d9fd49960e732d2228a304fe9bc221439293e940fdcb9c17419ccafdcfc1",
				"dweb:/ipfs/QmPZrdz4icyWQeR5Yf1zDQnpH8MmYiHyKofVcwvwNADjRh"
			]
		},
		"contracts/LimitOrderProtocol.sol": {
			"keccak256": "0x2e1b811ca97f70403298afdd130d4a48a4aa065b3c4f241f84a733b59813b558",
			"license": "MIT",
			"urls": [
				"bzz-raw://e171ce574a021d01960baf9dc1df86310b0b7a499411e1c32a867b07b77b68cb",
				"dweb:/ipfs/QmRkFyUiWvkxYuUAGzSmjCE7geUNkBhaJsJ6FTawHK5reJ"
			]
		},
		"contracts/MakerTraitsLib.sol": {
			"keccak256": "0x2077d7a827c3ba2fa53c92b87bc586385c1310c3fe67edffe09c31a22900cbf9",
			"license": "MIT",
			"urls": [
				"bzz-raw://49f7294dcb82d3acd8b7e2f95546cc85e24ceb7e3564a21ebf852544887cda3b",
				"dweb:/ipfs/QmPgzEiFpUHmGYfXF4EEdpCnb9TPnCpoF48bNMGw74vk1b"
			]
		},
		"contracts/Math.sol": {
			"keccak256": "0x38c3845ac06436b72e265731c3546e21b2e792a800af0c355f2039ceb85cdbfc",
			"license": "MIT",
			"urls": [
				"bzz-raw://c63508dd9c15bf8155a8c248518310ad06b1d3f8d42082866fc8ecaa37f8dfda",
				"dweb:/ipfs/QmXiJyT5zGCgPWeLrF1g3fpvbjMkVQBt9MSq3fiA97VsTj"
			]
		},
		"contracts/MessageHashUtils.sol": {
			"keccak256": "0x8f285fdf7d54a65521a41ce2301f9be9727a5fe12e92e6c531255fb552f49450",
			"license": "MIT",
			"urls": [
				"bzz-raw://c3ba231f35f2eff8d87c6a2a30a085844f9b94a4b568ad74777dc2a33d2849ba",
				"dweb:/ipfs/QmPs1ur6k3pkcHpbwh3aTR4tJsHctcY2Goze5VspFuRZfv"
			]
		},
		"contracts/OffsetsLib.sol": {
			"keccak256": "0xd8218c3b9241501b41fc0f0b579dce00a0b81603582e11f3da28881ed00801a1",
			"license": "MIT",
			"urls": [
				"bzz-raw://039b36fea4d1d12fe0d02ac26bdefd959c6fe447bd73ea0599a49e08f1712999",
				"dweb:/ipfs/QmcyPNSDc2RjksmwYPY3jGAjD9bEhBAWi3qKYWNvtHHZT6"
			]
		},
		"contracts/OnlyWethReceiver.sol": {
			"keccak256": "0x253e18562bbac1277e92aff67a7c8911067b88b38c4f6edeec2e2f4c5cdb29dc",
			"license": "MIT",
			"urls": [
				"bzz-raw://cfe07e3be8b962f8b07211e23c2bfeb50a3d46cc0b6e4067f5841ef434f9601f",
				"dweb:/ipfs/Qmed6EpjdafZ1rWYiEXXTRbySBu1GC8oCr6CShadpWYHnL"
			]
		},
		"contracts/OrderLib.sol": {
			"keccak256": "0x237317b4a2bec36853fabe0dc2647d211730ea0548c28cf166fec824bb5dc24d",
			"license": "MIT",
			"urls": [
				"bzz-raw://8b4906e36c77ba5c37d0d47afd3fa55b511f6a52afbab6470c435d44f872f22d",
				"dweb:/ipfs/QmTAAEzZjuAqo5PNNpM64acaN8yTzv8jzxaUZNXtP2yS8f"
			]
		},
		"contracts/OrderMixin.sol": {
			"keccak256": "0x1e322ee0cc0a5c3fce1e75892344d1f3413bc3a072f8bb5472becd62bdf1a7f5",
			"license": "MIT",
			"urls": [
				"bzz-raw://50c0efaac0fccc64f7a7cc5a8f47bf722c17638d81c23c5a30c6bde1386a88cd",
				"dweb:/ipfs/QmdhrbPgcpQJyUk5PDudf28MRaticBoHG6rkuAJTfXqmDo"
			]
		},
		"contracts/Ownable.sol": {
			"keccak256": "0xa6428484d54bc2cd4eb2a5632305a4b7783365f8c5fa173ad62c4795bf2839f8",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a7d9efbfeef2f5c28979e8a93eeab25f6c2e85e69fe6261c4c17d15c5c3aadf",
				"dweb:/ipfs/QmQieD54hKvNVXV3RuknW9BnSurgGrEyTnmcKHXg9YHC7E"
			]
		},
		"contracts/Panic.sol": {
			"keccak256": "0xec0c46048fd01751aa22ecddb66df20b702374fd68f3f4b3ae363782f6b31f9f",
			"license": "MIT",
			"urls": [
				"bzz-raw://d32d9af31bc44235f769cf820ec96fd3f0aea9e16a169b244a62e34e482d7d55",
				"dweb:/ipfs/Qmd4Lw5sSLQtfE2vEy29RHzffinDsHgN1pGaS8Eex1F8ks"
			]
		},
		"contracts/Pausable.sol": {
			"keccak256": "0xb716012bd6d1308f1e3117f10754f8bd3cafbfd21c1e2f4a36eb371cde8f269c",
			"license": "MIT",
			"urls": [
				"bzz-raw://434ee6c6171c52a5d6018e1e2cbb05c6ddc45f4e4a72aa5f5fad344fe27146fd",
				"dweb:/ipfs/QmceTTn3vqoFYeV3zPHwt5GZHJgSjpjJ9YWic2p4hpeVpH"
			]
		},
		"contracts/PermitAndCall.sol": {
			"keccak256": "0x702acc765e2b776e474c01903fe534919d562c23d397361540f1c24dcb978009",
			"license": "MIT",
			"urls": [
				"bzz-raw://a6e19ecfe7df5064f93afa80c2f0a52c7cf840cebd1a1adca3b4a68f49bafc1e",
				"dweb:/ipfs/QmbVe5YgchvdAoUHrzdNXARkBGP9WvZeJo8xri5fwdFFAf"
			]
		},
		"contracts/PredicateHelper.sol": {
			"keccak256": "0x2eabeb6ee0a445ec34dea12a88de427dbdaa69331ef5d7e11fee697c9eb9abdf",
			"license": "MIT",
			"urls": [
				"bzz-raw://421ce9422fe2c69966d7991a444017932aee070e933fc0d16b22bc9df01fe15c",
				"dweb:/ipfs/Qmcpv6v97Mty5rWGK6nUDVH1YF72gUQKkqzNdC62u378Fu"
			]
		},
		"contracts/RemainingInvalidatorLib.sol": {
			"keccak256": "0x192440c67bd53e14ab492c5bf4d65ce44055272cf4e80950d601a5af0db567fc",
			"license": "MIT",
			"urls": [
				"bzz-raw://8389ea1731fbb20c5b5f19da828c1e4f4146b8a94d033df70bc34f2674b484ea",
				"dweb:/ipfs/QmXacGH2xWNnN3SrS27QKykd7rUKpmMCrffNwQtq6L8ZG5"
			]
		},
		"contracts/RevertReasonForwarder.sol": {
			"keccak256": "0x00dbd12fec0c2696dd0862143457d8a23c998dcabd5d038fc85512ba93467417",
			"license": "MIT",
			"urls": [
				"bzz-raw://2fa738dc80ff7027762294869f2b181177a5c122fe04ceea08c619c544c820aa",
				"dweb:/ipfs/QmUzrDWe6k6Hhfdd5MxUhnW34B8mGJ5pwx65NM9EBLkLCU"
			]
		},
		"contracts/SafeCast.sol": {
			"keccak256": "0x16949b29739a3a20cf5ffe9ca22830a9f9b6deff16ee925827b19ddb5fbc127a",
			"license": "MIT",
			"urls": [
				"bzz-raw://768190c98439f96d5cad1900cc96e24f0749172192be8b5de885c426750c6ecd",
				"dweb:/ipfs/QmWPmxri7eCbAXC7p3qJ14ckPTUDkdE3wuyiMoc1pat5ft"
			]
		},
		"contracts/SafeERC20.sol": {
			"keccak256": "0x2cdc46994aa3302bf2026f5a2ba0650398aaf41278354075544bf42350ee947e",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a65e24d410030f7b192d59a0096213bee88b963822052502572cdb9ee55e9d9",
				"dweb:/ipfs/QmcQH7uVFhTLGxTuqUsiEsc7qH9HE7xGgSQTXijoVUcKUn"
			]
		},
		"contracts/SeriesEpochManager.sol": {
			"keccak256": "0x9d03f20594ca58ba892ad2e015f3fdade1ed8634073cd2dcc6498a98acc79541",
			"license": "MIT",
			"urls": [
				"bzz-raw://1eb4af3779131b166d4529c2123b9cb00f9f59e1dbff3814948d37cf193c8184",
				"dweb:/ipfs/Qme1qvRRPcac4qYQu1nUFyd4Gu4iP6nqvSEr28F8VbJqQ1"
			]
		},
		"contracts/ShortStrings.sol": {
			"keccak256": "0xbfad9b3a40cba77c2f86c308175ac65e06b10e76159d635b018171c67846da69",
			"license": "MIT",
			"urls": [
				"bzz-raw://e3b4406389834f36341fc1c87d4e8ab26d902a40b887a17689a238e5a97ef0b2",
				"dweb:/ipfs/QmQtUoQLw3NjKrAutrXqepURfrb4pvoZ6mXp4AcUuosH4D"
			]
		},
		"contracts/SignedMath.sol": {
			"keccak256": "0xc07e2a3d5f315dafaec45606b60414be49cc913bd11ea1b1d8ee460e72f37445",
			"license": "MIT",
			"urls": [
				"bzz-raw://7d5f6ea2b532028ac1b221ce2e33bfbf71d2ef43b318db47c029ea7b1760d4df",
				"dweb:/ipfs/QmdxY44UJdhcgVZ7YCm6um4FKBU1PvL925KgefxD7onTRw"
			]
		},
		"contracts/StorageSlot.sol": {
			"keccak256": "0x2373cbbdccacc6777b2a7b459aa35b7629b0f7aa63566cd9afe45be9f256645c",
			"license": "MIT",
			"urls": [
				"bzz-raw://f4d674a1520bc8b6888ff3c5e663a45b5da00bc20ddc82e8351f6bc28d6f23db",
				"dweb:/ipfs/QmWG1RkHw5AtGdQZQpk4CZZc4HXp9bJVSf1xiR2yF9yAtP"
			]
		},
		"contracts/Strings.sol": {
			"keccak256": "0x250d60b0677654f4955e3cd43a8d9b41a8d7f2e6a8c222c28629c7c4abafa4f1",
			"license": "MIT",
			"urls": [
				"bzz-raw://8af0ca2b41a72909427f62226a438fc38e5c7b94057744d3a079da0a6973ff0d",
				"dweb:/ipfs/QmWUydSxPhJbJFqi8q6YvyxpUiMhGDSDDYxvubcSVjeuXG"
			]
		},
		"contracts/TakerTraitsLib.sol": {
			"keccak256": "0x25d36a3b3645561fc5b3f35c1e93fe60220bd15f9af896b0c6263a3269710fcc",
			"license": "MIT",
			"urls": [
				"bzz-raw://45597b42af6b436271ac8e6577255137557ff72d45883ef4bce01198016d4bb5",
				"dweb:/ipfs/QmamEQ6c5ffZqanpuX52PUf88wPu6Gp4T8LCVVzonAo1uS"
			]
		}
	},
	"version": 1
}