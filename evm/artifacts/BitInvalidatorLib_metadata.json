{
	"compiler": {
		"version": "0.8.23+commit.f704f362"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "BitInvalidatedOrder",
				"type": "error"
			}
		],
		"devdoc": {
			"details": "The library provides a mechanism to invalidate objects based on a bit invalidator. The bit invalidator holds a mapping where each key represents a slot number and each value contains an integer. Each bit of the integer represents whether the object with corresponding index is valid or has been invalidated (0 - valid, 1 - invalidated). The nonce given to access or invalidate an entity's state follows this structure: - bits [0..7] represent the object state index in the slot. - bits [8..255] represent the slot number (mapping key).",
			"errors": {
				"BitInvalidatedOrder()": [
					{
						"details": "The error is thrown when an attempt is made to invalidate an already invalidated entity."
					}
				]
			},
			"kind": "dev",
			"methods": {},
			"title": "BitInvalidatorLib",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/BitInvalidatorLib.sol": "BitInvalidatorLib"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"contracts/BitInvalidatorLib.sol": {
			"keccak256": "0xd82e4b69af3f9883f6ac9560965a763a04f79e583b31b2f37982e24f44e25bcc",
			"license": "MIT",
			"urls": [
				"bzz-raw://ccf59b63d1721e65dcd41283a634874824689b2f7a02fd3f98d2fde03f07c2e4",
				"dweb:/ipfs/QmfA5ZSffvaaYCw5T8G11Bj3tGWcupx2ZBSJNZD6cDKrCq"
			]
		}
	},
	"version": 1
}