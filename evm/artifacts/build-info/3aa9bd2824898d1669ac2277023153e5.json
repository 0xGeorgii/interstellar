{
	"id": "3aa9bd2824898d1669ac2277023153e5",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.23",
	"solcLongVersion": "0.8.23+commit.f704f362",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"*": [
						"evm.bytecode",
						"evm.deployedBytecode",
						"devdoc",
						"userdoc",
						"metadata",
						"abi"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"contracts/LimitOrderProtocol.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.23;\n\nimport { EIP712 } from \"./EIP712.sol\";\nimport \"./Ownable.sol\";\nimport \"./Pausable.sol\";\nimport \"./OrderMixin.sol\";\n\n/**\n * @title ##1inch Limit Order Protocol v4\n * @notice Limit order protocol provides two different order types\n * - Regular Limit Order\n * - RFQ Order\n *\n * Both types provide similar order-fulfilling functionality. The difference is that regular order offers more customization options and features, while RFQ order is extremely gas efficient but without ability to customize.\n *\n * Regular limit order additionally supports\n * - Execution predicates. Conditions for order execution are set with predicates. For example, expiration timestamp or block number, price for stop loss or take profit strategies.\n * - Callbacks to notify maker on order execution\n *\n * See [OrderMixin](OrderMixin.md) for more details.\n *\n * RFQ orders supports\n * - Expiration time\n * - Cancelation by order id\n * - Partial Fill (only once)\n *\n * See [OrderMixin](OrderMixin.md) for more details.\n */\ncontract LimitOrderProtocol is\n    EIP712(\"1inch Limit Order Protocol\", \"4\"),\n    Ownable,\n    Pausable,\n    OrderMixin\n{\n    // solhint-disable-next-line no-empty-blocks\n    constructor(IWETH _weth) OrderMixin(_weth) Ownable(msg.sender) {}\n\n    /// @dev Returns the domain separator for the current chain (EIP-712)\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns(bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @notice Pauses all the trading functionality in the contract.\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @notice Unpauses all the trading functionality in the contract.\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}"
			},
			"contracts/OrderMixin.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.23;\n\nimport \"./Math.sol\";\nimport { EIP712 } from \"./EIP712.sol\";\nimport \"./IERC20.sol\";\nimport \"./Pausable.sol\";\n\nimport \"./IWETH.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./OnlyWethReceiver.sol\";\nimport \"./PermitAndCall.sol\";\n\nimport \"./PredicateHelper.sol\";\nimport \"./SeriesEpochManager.sol\";\nimport \"./ITakerInteraction.sol\";\nimport \"./IPreInteraction.sol\";\nimport \"./IPostInteraction.sol\";\nimport \"./IOrderMixin.sol\";\nimport \"./Errors.sol\";\nimport \"./TakerTraitsLib.sol\";\nimport \"./BitInvalidatorLib.sol\";\nimport \"./RemainingInvalidatorLib.sol\";\nimport \"./OrderLib.sol\";\n\n/// @title Limit Order mixin\nabstract contract OrderMixin is IOrderMixin, EIP712, PredicateHelper, SeriesEpochManager, Pausable, OnlyWethReceiver, PermitAndCall {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IWETH;\n    using OrderLib for IOrderMixin.Order;\n    using ExtensionLib for bytes;\n    using AddressLib for Address;\n    using MakerTraitsLib for MakerTraits;\n    using TakerTraitsLib for TakerTraits;\n    using BitInvalidatorLib for BitInvalidatorLib.Data;\n    using RemainingInvalidatorLib for RemainingInvalidator;\n\n    IWETH private immutable _WETH;\n    mapping(address maker => BitInvalidatorLib.Data data) private _bitInvalidator;\n    mapping(address maker => mapping(bytes32 orderHash => RemainingInvalidator remaining)) private _remainingInvalidator;\n\n    constructor(IWETH weth) OnlyWethReceiver(address(weth)) {\n        _WETH = weth;\n    }\n\n    /**\n     * @notice See {IOrderMixin-bitInvalidatorForOrder}.\n     */\n    function bitInvalidatorForOrder(address maker, uint256 slot) external view returns(uint256 /* result */) {\n        return _bitInvalidator[maker].checkSlot(slot);\n    }\n\n    /**\n     * @notice See {IOrderMixin-remainingInvalidatorForOrder}.\n     */\n    function remainingInvalidatorForOrder(address maker, bytes32 orderHash) external view returns(uint256 /* remaining */) {\n        return _remainingInvalidator[maker][orderHash].remaining();\n    }\n\n    /**\n     * @notice See {IOrderMixin-rawRemainingInvalidatorForOrder}.\n     */\n    function rawRemainingInvalidatorForOrder(address maker, bytes32 orderHash) external view returns(uint256 /* remainingRaw */) {\n        return RemainingInvalidator.unwrap(_remainingInvalidator[maker][orderHash]);\n    }\n\n    /**\n     * @notice See {IOrderMixin-simulate}.\n     */\n    function simulate(address target, bytes calldata data) external {\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory result) = target.delegatecall(data);\n        revert SimulationResults(success, result);\n    }\n\n    /**\n     * @notice See {IOrderMixin-cancelOrder}.\n     */\n    function cancelOrder(MakerTraits makerTraits, bytes32 orderHash) public {\n        if (makerTraits.useBitInvalidator()) {\n            uint256 invalidator = _bitInvalidator[msg.sender].massInvalidate(makerTraits.nonceOrEpoch(), 0);\n            emit BitInvalidatorUpdated(msg.sender, makerTraits.nonceOrEpoch() >> 8, invalidator);\n        } else {\n            _remainingInvalidator[msg.sender][orderHash] = RemainingInvalidatorLib.fullyFilled();\n            emit OrderCancelled(orderHash);\n        }\n    }\n\n    /**\n     * @notice See {IOrderMixin-cancelOrders}.\n     */\n    function cancelOrders(MakerTraits[] calldata makerTraits, bytes32[] calldata orderHashes) external {\n        if (makerTraits.length != orderHashes.length) revert MismatchArraysLengths();\n        unchecked {\n            for (uint256 i = 0; i < makerTraits.length; i++) {\n                cancelOrder(makerTraits[i], orderHashes[i]);\n            }\n        }\n    }\n\n    /**\n     * @notice See {IOrderMixin-bitsInvalidateForOrder}.\n     */\n    function bitsInvalidateForOrder(MakerTraits makerTraits, uint256 additionalMask) external {\n        if (!makerTraits.useBitInvalidator()) revert OrderIsNotSuitableForMassInvalidation();\n        uint256 invalidator = _bitInvalidator[msg.sender].massInvalidate(makerTraits.nonceOrEpoch(), additionalMask);\n        emit BitInvalidatorUpdated(msg.sender, makerTraits.nonceOrEpoch() >> 8, invalidator);\n    }\n\n     /**\n     * @notice See {IOrderMixin-hashOrder}.\n     */\n    function hashOrder(IOrderMixin.Order calldata order) external view returns(bytes32) {\n        return order.hash(_domainSeparatorV4());\n    }\n\n    /**\n     * @notice See {IOrderMixin-checkPredicate}.\n     */\n    function checkPredicate(bytes calldata predicate) public view returns(bool) {\n        (bool success, uint256 res) = _staticcallForUint(address(this), predicate);\n        return success && res == 1;\n    }\n\n    /**\n     * @notice See {IOrderMixin-fillOrder}.\n     */\n    function fillOrder(\n        IOrderMixin.Order calldata order,\n        bytes32 r,\n        bytes32 vs,\n        uint256 amount,\n        TakerTraits takerTraits\n    ) external payable returns(uint256 /* makingAmount */, uint256 /* takingAmount */, bytes32 /* orderHash */) {\n        return _fillOrder(order, r, vs, amount, takerTraits, msg.sender, msg.data[:0], msg.data[:0]);\n    }\n\n    /**\n     * @notice See {IOrderMixin-fillOrderArgs}.\n     */\n    function fillOrderArgs(\n        IOrderMixin.Order calldata order,\n        bytes32 r,\n        bytes32 vs,\n        uint256 amount,\n        TakerTraits takerTraits,\n        bytes calldata args\n    ) external payable returns(uint256 /* makingAmount */, uint256 /* takingAmount */, bytes32 /* orderHash */) {\n        (\n            address target,\n            bytes calldata extension,\n            bytes calldata interaction\n        ) = _parseArgs(takerTraits, args);\n\n        return _fillOrder(order, r, vs, amount, takerTraits, target, extension, interaction);\n    }\n\n    function _fillOrder(\n        IOrderMixin.Order calldata order,\n        bytes32 r,\n        bytes32 vs,\n        uint256 amount,\n        TakerTraits takerTraits,\n        address target,\n        bytes calldata extension,\n        bytes calldata interaction\n    ) private returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash) {\n        // Check signature and apply order/maker permit only on the first fill\n        orderHash = order.hash(_domainSeparatorV4());\n        uint256 remainingMakingAmount = _checkRemainingMakingAmount(order, orderHash);\n        if (remainingMakingAmount == order.makingAmount) {\n            address maker = order.maker.get();\n            if (maker == address(0) || maker != ECDSA.recover(orderHash, r, vs)) revert BadSignature();\n            if (!takerTraits.skipMakerPermit()) {\n                bytes calldata makerPermit = extension.makerPermit();\n                if (makerPermit.length >= 20) {\n                    // proceed only if taker is willing to execute permit and its length is enough to store address\n                    IERC20(address(bytes20(makerPermit))).tryPermit(maker, address(this), makerPermit[20:]);\n                    if (!order.makerTraits.useBitInvalidator()) {\n                        // Bit orders are not subjects for reentrancy, but we still need to check remaining-based orders for reentrancy\n                        if (!_remainingInvalidator[order.maker.get()][orderHash].isNewOrder()) revert ReentrancyDetected();\n                    }\n                }\n            }\n        }\n\n        (makingAmount, takingAmount) = _fill(order, orderHash, remainingMakingAmount, amount, takerTraits, target, extension, interaction);\n    }\n\n    /**\n     * @notice See {IOrderMixin-fillContractOrder}.\n     */\n    function fillContractOrder(\n        IOrderMixin.Order calldata order,\n        bytes calldata signature,\n        uint256 amount,\n        TakerTraits takerTraits\n    ) external returns(uint256 /* makingAmount */, uint256 /* takingAmount */, bytes32 /* orderHash */) {\n        return _fillContractOrder(order, signature, amount, takerTraits, msg.sender, msg.data[:0], msg.data[:0]);\n    }\n\n    /**\n     * @notice See {IOrderMixin-fillContractOrderArgs}.\n     */\n    function fillContractOrderArgs(\n        IOrderMixin.Order calldata order,\n        bytes calldata signature,\n        uint256 amount,\n        TakerTraits takerTraits,\n        bytes calldata args\n    ) external returns(uint256 /* makingAmount */, uint256 /* takingAmount */, bytes32 /* orderHash */) {\n        (\n            address target,\n            bytes calldata extension,\n            bytes calldata interaction\n        ) = _parseArgs(takerTraits, args);\n\n        return _fillContractOrder(order, signature, amount, takerTraits, target, extension, interaction);\n    }\n\n    function _fillContractOrder(\n        IOrderMixin.Order calldata order,\n        bytes calldata signature,\n        uint256 amount,\n        TakerTraits takerTraits,\n        address target,\n        bytes calldata extension,\n        bytes calldata interaction\n    ) private returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash) {\n        // Check signature only on the first fill\n        orderHash = order.hash(_domainSeparatorV4());\n        uint256 remainingMakingAmount = _checkRemainingMakingAmount(order, orderHash);\n        if (remainingMakingAmount == order.makingAmount) {\n            if (!ECDSA.isValidSignature(order.maker.get(), orderHash, signature)) revert BadSignature();\n        }\n\n        (makingAmount, takingAmount) = _fill(order, orderHash, remainingMakingAmount, amount, takerTraits, target, extension, interaction);\n    }\n\n    /**\n      * @notice Fills an order and transfers making amount to a specified target.\n      * @dev If the target is zero assigns it the caller's address.\n      * The function flow is as follows:\n      * 1. Validate order\n      * 2. Call maker pre-interaction\n      * 3. Transfer maker asset to taker\n      * 4. Call taker interaction\n      * 5. Transfer taker asset to maker\n      * 5. Call maker post-interaction\n      * 6. Emit OrderFilled event\n      * @param order The order details.\n      * @param orderHash The hash of the order.\n      * @param extension The extension calldata of the order.\n      * @param remainingMakingAmount The remaining amount to be filled.\n      * @param amount The order amount.\n      * @param takerTraits The taker preferences for the order.\n      * @param target The address to which the order is filled.\n      * @param interaction The interaction calldata.\n      * @return makingAmount The computed amount that the maker will send.\n      * @return takingAmount The computed amount that the taker will send.\n      */\n    function _fill(\n        IOrderMixin.Order calldata order,\n        bytes32 orderHash,\n        uint256 remainingMakingAmount,\n        uint256 amount,\n        TakerTraits takerTraits,\n        address target,\n        bytes calldata extension,\n        bytes calldata interaction\n    ) private whenNotPaused() returns(uint256 makingAmount, uint256 takingAmount) {\n        // Validate order\n        {\n            (bool valid, bytes4 validationResult) = order.isValidExtension(extension);\n            if (!valid) {\n                // solhint-disable-next-line no-inline-assembly\n                assembly (\"memory-safe\") {\n                    mstore(0, validationResult)\n                    revert(0, 4)\n                }\n            }\n        }\n        if (!order.makerTraits.isAllowedSender(msg.sender)) revert PrivateOrder();\n        if (order.makerTraits.isExpired()) revert OrderExpired();\n        if (order.makerTraits.needCheckEpochManager()) {\n            if (order.makerTraits.useBitInvalidator()) revert EpochManagerAndBitInvalidatorsAreIncompatible();\n            if (!epochEquals(order.maker.get(), order.makerTraits.series(), order.makerTraits.nonceOrEpoch())) revert WrongSeriesNonce();\n        }\n\n        // Check if orders predicate allows filling\n        if (extension.length > 0) {\n            bytes calldata predicate = extension.predicate();\n            if (predicate.length > 0) {\n                if (!checkPredicate(predicate)) revert PredicateIsNotTrue();\n            }\n        }\n\n        // Compute maker and taker assets amount\n        if (takerTraits.isMakingAmount()) {\n            makingAmount = Math.min(amount, remainingMakingAmount);\n            takingAmount = order.calculateTakingAmount(extension, makingAmount, remainingMakingAmount, orderHash);\n\n            uint256 threshold = takerTraits.threshold();\n            if (threshold > 0) {\n                // Check rate: takingAmount / makingAmount <= threshold / amount\n                if (amount == makingAmount) {  // Gas optimization, no SafeMath.mul()\n                    if (takingAmount > threshold) revert TakingAmountTooHigh();\n                } else {\n                    if (takingAmount * amount > threshold * makingAmount) revert TakingAmountTooHigh();\n                }\n            }\n        }\n        else {\n            takingAmount = amount;\n            makingAmount = order.calculateMakingAmount(extension, takingAmount, remainingMakingAmount, orderHash);\n            if (makingAmount > remainingMakingAmount) {\n                // Try to decrease taking amount because computed making amount exceeds remaining amount\n                makingAmount = remainingMakingAmount;\n                takingAmount = order.calculateTakingAmount(extension, makingAmount, remainingMakingAmount, orderHash);\n                if (takingAmount > amount) revert TakingAmountExceeded();\n            }\n\n            uint256 threshold = takerTraits.threshold();\n            if (threshold > 0) {\n                // Check rate: makingAmount / takingAmount >= threshold / amount\n                if (amount == takingAmount) { // Gas optimization, no SafeMath.mul()\n                    if (makingAmount < threshold) revert MakingAmountTooLow();\n                } else {\n                    if (makingAmount * amount < threshold * takingAmount) revert MakingAmountTooLow();\n                }\n            }\n        }\n        if (!order.makerTraits.allowPartialFills() && makingAmount != order.makingAmount) revert PartialFillNotAllowed();\n        unchecked { if (makingAmount * takingAmount == 0) revert SwapWithZeroAmount(); }\n\n        // Invalidate order depending on makerTraits\n        if (order.makerTraits.useBitInvalidator()) {\n            _bitInvalidator[order.maker.get()].checkAndInvalidate(order.makerTraits.nonceOrEpoch());\n        } else {\n            _remainingInvalidator[order.maker.get()][orderHash] = RemainingInvalidatorLib.remains(remainingMakingAmount, makingAmount);\n        }\n\n        // Pre interaction, where maker can prepare funds interactively\n        if (order.makerTraits.needPreInteractionCall()) {\n            bytes calldata data = extension.preInteractionTargetAndData();\n            address listener = order.maker.get();\n            if (data.length > 19) {\n                listener = address(bytes20(data));\n                data = data[20:];\n            }\n            IPreInteraction(listener).preInteraction(\n                order, extension, orderHash, msg.sender, makingAmount, takingAmount, remainingMakingAmount, data\n            );\n        }\n\n        // Maker => Taker\n        {\n            bool needUnwrap = order.makerAsset.get() == address(_WETH) && takerTraits.unwrapWeth();\n            address receiver = needUnwrap ? address(this) : target;\n            if (order.makerTraits.usePermit2()) {\n                if (extension.makerAssetSuffix().length > 0) revert InvalidPermit2Transfer();\n                IERC20(order.makerAsset.get()).safeTransferFromPermit2(order.maker.get(), receiver, makingAmount);\n            } else {\n                if (!_callTransferFromWithSuffix(\n                    order.makerAsset.get(),\n                    order.maker.get(),\n                    receiver,\n                    makingAmount,\n                    extension.makerAssetSuffix()\n                )) revert TransferFromMakerToTakerFailed();\n            }\n            if (needUnwrap) {\n                _WETH.safeWithdrawTo(makingAmount, target);\n            }\n        }\n\n        if (interaction.length > 19) {\n            // proceed only if interaction length is enough to store address\n            ITakerInteraction(address(bytes20(interaction))).takerInteraction(\n                order, extension, orderHash, msg.sender, makingAmount, takingAmount, remainingMakingAmount, interaction[20:]\n            );\n        }\n\n        // Taker => Maker\n        if (order.takerAsset.get() == address(_WETH) && msg.value > 0) {\n            if (msg.value < takingAmount) revert Errors.InvalidMsgValue();\n            if (msg.value > takingAmount) {\n                unchecked {\n                    // solhint-disable-next-line avoid-low-level-calls\n                    (bool success, ) = msg.sender.call{value: msg.value - takingAmount}(\"\");\n                    if (!success) revert Errors.ETHTransferFailed();\n                }\n            }\n\n            if (order.makerTraits.unwrapWeth()) {\n                // solhint-disable-next-line avoid-low-level-calls\n                (bool success, ) = order.getReceiver().call{value: takingAmount}(\"\");\n                if (!success) revert Errors.ETHTransferFailed();\n            } else {\n                _WETH.safeDeposit(takingAmount);\n                _WETH.safeTransfer(order.getReceiver(), takingAmount);\n            }\n        } else {\n            if (msg.value != 0) revert Errors.InvalidMsgValue();\n\n            bool needUnwrap = order.takerAsset.get() == address(_WETH) && order.makerTraits.unwrapWeth();\n            address receiver = needUnwrap ? address(this) : order.getReceiver();\n            if (takerTraits.usePermit2()) {\n                if (extension.takerAssetSuffix().length > 0) revert InvalidPermit2Transfer();\n                IERC20(order.takerAsset.get()).safeTransferFromPermit2(msg.sender, receiver, takingAmount);\n            } else {\n                if (!_callTransferFromWithSuffix(\n                    order.takerAsset.get(),\n                    msg.sender,\n                    receiver,\n                    takingAmount,\n                    extension.takerAssetSuffix()\n                )) revert TransferFromTakerToMakerFailed();\n            }\n\n            if (needUnwrap) {\n                _WETH.safeWithdrawTo(takingAmount, order.getReceiver());\n            }\n        }\n\n        // Post interaction, where maker can handle funds interactively\n        if (order.makerTraits.needPostInteractionCall()) {\n            bytes calldata data = extension.postInteractionTargetAndData();\n            address listener = order.maker.get();\n            if (data.length > 19) {\n                listener = address(bytes20(data));\n                data = data[20:];\n            }\n            IPostInteraction(listener).postInteraction(\n                order, extension, orderHash, msg.sender, makingAmount, takingAmount, remainingMakingAmount, data\n            );\n        }\n\n        emit OrderFilled(orderHash, remainingMakingAmount - makingAmount);\n    }\n\n    /**\n      * @notice Processes the taker interaction arguments.\n      * @param takerTraits The taker preferences for the order.\n      * @param args The taker interaction arguments.\n      * @return target The address to which the order is filled.\n      * @return extension The extension calldata of the order.\n      * @return interaction The interaction calldata.\n      */\n    function _parseArgs(TakerTraits takerTraits, bytes calldata args)\n        private\n        view\n        returns(\n            address target,\n            bytes calldata extension,\n            bytes calldata interaction\n        )\n    {\n        if (takerTraits.argsHasTarget()) {\n            target = address(bytes20(args));\n            args = args[20:];\n        } else {\n            target = msg.sender;\n        }\n\n        uint256 extensionLength = takerTraits.argsExtensionLength();\n        if (extensionLength > 0) {\n            extension = args[:extensionLength];\n            args = args[extensionLength:];\n        } else {\n            extension = msg.data[:0];\n        }\n\n        uint256 interactionLength = takerTraits.argsInteractionLength();\n        if (interactionLength > 0) {\n            interaction = args[:interactionLength];\n        } else {\n            interaction = msg.data[:0];\n        }\n    }\n\n    /**\n      * @notice Checks the remaining making amount for the order.\n      * @dev If the order has been invalidated, the function will revert.\n      * @param order The order to check.\n      * @param orderHash The hash of the order.\n      * @return remainingMakingAmount The remaining amount of the order.\n      */\n    function _checkRemainingMakingAmount(IOrderMixin.Order calldata order, bytes32 orderHash) private view returns(uint256 remainingMakingAmount) {\n        if (order.makerTraits.useBitInvalidator()) {\n            remainingMakingAmount = order.makingAmount;\n        } else {\n            remainingMakingAmount = _remainingInvalidator[order.maker.get()][orderHash].remaining(order.makingAmount);\n        }\n        if (remainingMakingAmount == 0) revert InvalidatedOrder();\n    }\n\n    /**\n      * @notice Calls the transferFrom function with an arbitrary suffix.\n      * @dev The suffix is appended to the end of the standard ERC20 transferFrom function parameters.\n      * @param asset The token to be transferred.\n      * @param from The address to transfer the token from.\n      * @param to The address to transfer the token to.\n      * @param amount The amount of the token to transfer.\n      * @param suffix The suffix (additional data) to append to the end of the transferFrom call.\n      * @return success A boolean indicating whether the transfer was successful.\n      */\n    function _callTransferFromWithSuffix(address asset, address from, address to, uint256 amount, bytes calldata suffix) private returns(bool success) {\n        bytes4 selector = IERC20.transferFrom.selector;\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let data := mload(0x40)\n            mstore(data, selector)\n            mstore(add(data, 0x04), from)\n            mstore(add(data, 0x24), to)\n            mstore(add(data, 0x44), amount)\n            if suffix.length {\n                calldatacopy(add(data, 0x64), suffix.offset, suffix.length)\n            }\n            let status := call(gas(), asset, 0, data, add(0x64, suffix.length), 0x0, 0x20)\n            success := and(status, or(iszero(returndatasize()), and(gt(returndatasize(), 31), eq(mload(0), 1))))\n        }\n    }\n}"
			},
			"contracts/Pausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}"
			},
			"contracts/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"
			},
			"contracts/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"./ShortStrings.sol\";\nimport {IERC5267} from \"./IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    // slither-disable-next-line constable-states\n    string private _nameFallback;\n    // slither-disable-next-line constable-states\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /// @inheritdoc IERC5267\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}"
			},
			"contracts/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}"
			},
			"contracts/OrderLib.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.23;\n\nimport \"./ECDSA.sol\";\nimport \"./AddressLib.sol\";\n\nimport \"./IOrderMixin.sol\";\nimport \"./MakerTraitsLib.sol\";\nimport \"./ExtensionLib.sol\";\nimport \"./AmountCalculatorLib.sol\";\nimport \"./IAmountGetter.sol\";\n\n/**\n * @title OrderLib\n * @dev The library provides common functionality for processing and manipulating limit orders.\n * It provides functionality to calculate and verify order hashes, calculate trade amounts, and validate\n * extension data associated with orders. The library also contains helper methods to get the receiver of\n * an order and call getter functions.\n */\n library OrderLib {\n    using AddressLib for Address;\n    using MakerTraitsLib for MakerTraits;\n    using ExtensionLib for bytes;\n\n    /// @dev Error to be thrown when the extension data of an order is missing.\n    error MissingOrderExtension();\n    /// @dev Error to be thrown when the order has an unexpected extension.\n    error UnexpectedOrderExtension();\n    /// @dev Error to be thrown when the order extension hash is invalid.\n    error InvalidExtensionHash();\n\n    /// @dev The typehash of the order struct.\n    bytes32 constant internal _LIMIT_ORDER_TYPEHASH = keccak256(\n        \"Order(\"\n            \"uint256 salt,\"\n            \"address maker,\"\n            \"address receiver,\"\n            \"address makerAsset,\"\n            \"address takerAsset,\"\n            \"uint256 makingAmount,\"\n            \"uint256 takingAmount,\"\n            \"uint256 makerTraits\"\n        \")\"\n    );\n    uint256 constant internal _ORDER_STRUCT_SIZE = 0x100;\n    uint256 constant internal _DATA_HASH_SIZE = 0x120;\n\n    /**\n      * @notice Calculates the hash of an order.\n      * @param order The order to be hashed.\n      * @param domainSeparator The domain separator to be used for the EIP-712 hashing.\n      * @return result The keccak256 hash of the order data.\n      */\n    function hash(IOrderMixin.Order calldata order, bytes32 domainSeparator) internal pure returns(bytes32 result) {\n        bytes32 typehash = _LIMIT_ORDER_TYPEHASH;\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let ptr := mload(0x40)\n\n            // keccak256(abi.encode(_LIMIT_ORDER_TYPEHASH, order));\n            mstore(ptr, typehash)\n            calldatacopy(add(ptr, 0x20), order, _ORDER_STRUCT_SIZE)\n            result := keccak256(ptr, _DATA_HASH_SIZE)\n        }\n        result = ECDSA.toTypedDataHash(domainSeparator, result);\n    }\n\n    /**\n      * @notice Returns the receiver address for an order.\n      * @param order The order.\n      * @return receiver The address of the receiver, either explicitly defined in the order or the maker's address if not specified.\n      */\n    function getReceiver(IOrderMixin.Order calldata order) internal pure returns(address /*receiver*/) {\n        address receiver = order.receiver.get();\n        return receiver != address(0) ? receiver : order.maker.get();\n    }\n\n    /**\n      * @notice Calculates the making amount based on the requested taking amount.\n      * @dev If getter is specified in the extension data, the getter is called to calculate the making amount,\n      * otherwise the making amount is calculated linearly.\n      * @param order The order.\n      * @param extension The extension data associated with the order.\n      * @param requestedTakingAmount The amount the taker wants to take.\n      * @param remainingMakingAmount The remaining amount of the asset left to fill.\n      * @param orderHash The hash of the order.\n      * @return makingAmount The amount of the asset the maker receives.\n      */\n    function calculateMakingAmount(\n        IOrderMixin.Order calldata order,\n        bytes calldata extension,\n        uint256 requestedTakingAmount,\n        uint256 remainingMakingAmount,\n        bytes32 orderHash\n    ) internal view returns(uint256) {\n        bytes calldata data = extension.makingAmountData();\n        if (data.length == 0) {\n            // Linear proportion\n            return AmountCalculatorLib.getMakingAmount(order.makingAmount, order.takingAmount, requestedTakingAmount);\n        }\n        return IAmountGetter(address(bytes20(data))).getMakingAmount(\n            order,\n            extension,\n            orderHash,\n            msg.sender,\n            requestedTakingAmount,\n            remainingMakingAmount,\n            data[20:]\n        );\n    }\n\n    /**\n      * @notice Calculates the taking amount based on the requested making amount.\n      * @dev If getter is specified in the extension data, the getter is called to calculate the taking amount,\n      * otherwise the taking amount is calculated linearly.\n      * @param order The order.\n      * @param extension The extension data associated with the order.\n      * @param requestedMakingAmount The amount the maker wants to receive.\n      * @param remainingMakingAmount The remaining amount of the asset left to be filled.\n      * @param orderHash The hash of the order.\n      * @return takingAmount The amount of the asset the taker takes.\n      */\n    function calculateTakingAmount(\n        IOrderMixin.Order calldata order,\n        bytes calldata extension,\n        uint256 requestedMakingAmount,\n        uint256 remainingMakingAmount,\n        bytes32 orderHash\n    ) internal view returns(uint256) {\n        bytes calldata data = extension.takingAmountData();\n        if (data.length == 0) {\n            // Linear proportion\n            return AmountCalculatorLib.getTakingAmount(order.makingAmount, order.takingAmount, requestedMakingAmount);\n        }\n        return IAmountGetter(address(bytes20(data))).getTakingAmount(\n            order,\n            extension,\n            orderHash,\n            msg.sender,\n            requestedMakingAmount,\n            remainingMakingAmount,\n            data[20:]\n        );\n    }\n\n    /**\n      * @dev Validates the extension associated with an order.\n      * @param order The order to validate against.\n      * @param extension The extension associated with the order.\n      * @return valid True if the extension is valid, false otherwise.\n      * @return errorSelector The error selector if the extension is invalid, 0x00000000 otherwise.\n      */\n    function isValidExtension(IOrderMixin.Order calldata order, bytes calldata extension) internal pure returns(bool, bytes4) {\n        if (order.makerTraits.hasExtension()) {\n            if (extension.length == 0) return (false, MissingOrderExtension.selector);\n            // Lowest 160 bits of the order salt must be equal to the lowest 160 bits of the extension hash\n            if (uint256(keccak256(extension)) & type(uint160).max != order.salt & type(uint160).max) return (false, InvalidExtensionHash.selector);\n        } else {\n            if (extension.length > 0) return (false, UnexpectedOrderExtension.selector);\n        }\n        return (true, 0x00000000);\n    }\n}"
			},
			"contracts/RemainingInvalidatorLib.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ntype RemainingInvalidator is uint256;\n\n/**\n * @title RemainingInvalidatorLib\n * @notice The library provides a mechanism to invalidate order based on the remaining amount of the order.\n * @dev The remaining amount is used as a nonce to invalidate the order.\n * When order is created, the remaining invalidator is 0.\n * When order is filled, the remaining invalidator is the inverse of the remaining amount.\n */\nlibrary RemainingInvalidatorLib {\n\n    /// @dev The error is thrown when an attempt is made to invalidate an already invalidated entity.\n    error RemainingInvalidatedOrder();\n\n    /**\n     * @notice Checks if an order is new based on the invalidator value.\n     * @param invalidator The remaining invalidator of the order.\n     * @return result Whether the order is new or not.\n     */\n    function isNewOrder(RemainingInvalidator invalidator) internal pure returns(bool) {\n        return RemainingInvalidator.unwrap(invalidator) == 0;\n    }\n\n    /**\n     * @notice Retrieves the remaining amount for an order.\n     * @dev If the order is unknown, a RemainingInvalidatedOrder error is thrown.\n     * @param invalidator The remaining invalidator for the order.\n     * @return result The remaining amount for the order.\n     */\n    function remaining(RemainingInvalidator invalidator) internal pure returns(uint256) {\n        uint256 value = RemainingInvalidator.unwrap(invalidator);\n        if (value == 0) {\n            revert RemainingInvalidatedOrder();\n        }\n        unchecked {\n            return ~value;\n        }\n    }\n\n    /**\n     * @notice Calculates the remaining amount for an order.\n     * @dev If the order is unknown, the order maker amount is returned.\n     * @param invalidator The remaining invalidator for the order.\n     * @param orderMakerAmount The amount to return if the order is new.\n     * @return result The remaining amount for the order.\n     */\n    function remaining(RemainingInvalidator invalidator, uint256 orderMakerAmount) internal pure returns(uint256) {\n        uint256 value = RemainingInvalidator.unwrap(invalidator);\n        if (value == 0) {\n            return orderMakerAmount;\n        }\n        unchecked {\n            return ~value;\n        }\n    }\n\n    /**\n     * @notice Calculates the remaining invalidator of the order.\n     * @param remainingMakingAmount The remaining making amount of the order.\n     * @param makingAmount The making amount of the order.\n     * @return result The remaining invalidator for the order.\n     */\n    function remains(uint256 remainingMakingAmount, uint256 makingAmount) internal pure returns(RemainingInvalidator) {\n        unchecked {\n            return RemainingInvalidator.wrap(~(remainingMakingAmount - makingAmount));\n        }\n    }\n\n    /**\n     * @notice Provides the remaining invalidator for a fully filled order.\n     * @return result The remaining invalidator for a fully filled order.\n     */\n    function fullyFilled() internal pure returns(RemainingInvalidator) {\n        return RemainingInvalidator.wrap(type(uint256).max);\n    }\n}"
			},
			"contracts/BitInvalidatorLib.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title BitInvalidatorLib\n * @dev The library provides a mechanism to invalidate objects based on a bit invalidator.\n * The bit invalidator holds a mapping where each key represents a slot number and each value contains an integer.\n * Each bit of the integer represents whether the object with corresponding index is valid or has been invalidated (0 - valid, 1 - invalidated).\n * The nonce given to access or invalidate an entity's state follows this structure:\n * - bits [0..7] represent the object state index in the slot.\n * - bits [8..255] represent the slot number (mapping key).\n */\nlibrary BitInvalidatorLib {\n    /// @dev The error is thrown when an attempt is made to invalidate an already invalidated entity.\n    error BitInvalidatedOrder();\n\n    struct Data {\n        mapping(uint256 slotIndex => uint256 slotData) _raw;\n    }\n\n    /**\n     * @notice Retrieves the validity status of entities in a specific slot.\n     * @dev Each bit in the returned value corresponds to the validity of an entity. 0 for valid, 1 for invalidated.\n     * @param self The data structure.\n     * @param nonce The nonce identifying the slot.\n     * @return result The validity status of entities in the slot as a uint256.\n     */\n    function checkSlot(Data storage self, uint256 nonce) internal view returns(uint256) {\n        uint256 invalidatorSlot = nonce >> 8;\n        return self._raw[invalidatorSlot];\n    }\n\n    /**\n     * @notice Checks the validity of a specific entity and invalidates it if valid.\n     * @dev Throws an error if the entity has already been invalidated.\n     * @param self The data structure.\n     * @param nonce The nonce identifying the slot and the entity.\n     */\n    function checkAndInvalidate(Data storage self, uint256 nonce) internal {\n        uint256 invalidatorSlot = nonce >> 8;\n        uint256 invalidatorBit = 1 << (nonce & 0xff);\n        uint256 invalidator = self._raw[invalidatorSlot];\n        if (invalidator & invalidatorBit == invalidatorBit) revert BitInvalidatedOrder();\n        self._raw[invalidatorSlot] = invalidator | invalidatorBit;\n    }\n\n    /**\n     * @notice Invalidates multiple entities in a single slot.\n     * @dev The entities to be invalidated are identified by setting their corresponding bits to 1 in a mask.\n     * @param self The data structure.\n     * @param nonce The nonce identifying the slot.\n     * @param additionalMask A mask of bits to be invalidated.\n     * @return result Resulting validity status of entities in the slot as a uint256.\n     */\n    function massInvalidate(Data storage self, uint256 nonce, uint256 additionalMask) internal returns(uint256 result) {\n        uint256 invalidatorSlot = nonce >> 8;\n        uint256 invalidatorBits = (1 << (nonce & 0xff)) | additionalMask;\n        result = self._raw[invalidatorSlot] | invalidatorBits;\n        self._raw[invalidatorSlot] = result;\n    }\n}"
			},
			"contracts/TakerTraitsLib.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ntype TakerTraits is uint256;\n\n/**\n * @title TakerTraitsLib\n * @notice This library to manage and check TakerTraits, which are used to encode the taker's preferences for an order in a single uint256.\n * @dev The TakerTraits are structured as follows:\n * High bits are used for flags\n * 255 bit `_MAKER_AMOUNT_FLAG`           - If set, the taking amount is calculated based on making amount, otherwise making amount is calculated based on taking amount.\n * 254 bit `_UNWRAP_WETH_FLAG`            - If set, the WETH will be unwrapped into ETH before sending to taker.\n * 253 bit `_SKIP_ORDER_PERMIT_FLAG`      - If set, the order skips maker's permit execution.\n * 252 bit `_USE_PERMIT2_FLAG`            - If set, the order uses the permit2 function for authorization.\n * 251 bit `_ARGS_HAS_TARGET`             - If set, then first 20 bytes of args are treated as target address for maker’s funds transfer.\n * 224-247 bits `ARGS_EXTENSION_LENGTH`   - The length of the extension calldata in the args.\n * 200-223 bits `ARGS_INTERACTION_LENGTH` - The length of the interaction calldata in the args.\n * 0-184 bits                             - The threshold amount (the maximum amount a taker agrees to give in exchange for a making amount).\n */\nlibrary TakerTraitsLib {\n    uint256 private constant _MAKER_AMOUNT_FLAG = 1 << 255;\n    uint256 private constant _UNWRAP_WETH_FLAG = 1 << 254;\n    uint256 private constant _SKIP_ORDER_PERMIT_FLAG = 1 << 253;\n    uint256 private constant _USE_PERMIT2_FLAG = 1 << 252;\n    uint256 private constant _ARGS_HAS_TARGET = 1 << 251;\n\n    uint256 private constant _ARGS_EXTENSION_LENGTH_OFFSET = 224;\n    uint256 private constant _ARGS_EXTENSION_LENGTH_MASK = 0xffffff;\n    uint256 private constant _ARGS_INTERACTION_LENGTH_OFFSET = 200;\n    uint256 private constant _ARGS_INTERACTION_LENGTH_MASK = 0xffffff;\n\n    uint256 private constant _AMOUNT_MASK = 0x000000000000000000ffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /**\n     * @notice Checks if the args should contain target address.\n     * @param takerTraits The traits of the taker.\n     * @return result A boolean indicating whether the args should contain target address.\n     */\n    function argsHasTarget(TakerTraits takerTraits) internal pure returns (bool) {\n        return (TakerTraits.unwrap(takerTraits) & _ARGS_HAS_TARGET) != 0;\n    }\n\n    /**\n     * @notice Retrieves the length of the extension calldata from the takerTraits.\n     * @param takerTraits The traits of the taker.\n     * @return result The length of the extension calldata encoded in the takerTraits.\n     */\n    function argsExtensionLength(TakerTraits takerTraits) internal pure returns (uint256) {\n        return (TakerTraits.unwrap(takerTraits) >> _ARGS_EXTENSION_LENGTH_OFFSET) & _ARGS_EXTENSION_LENGTH_MASK;\n    }\n\n    /**\n     * @notice Retrieves the length of the interaction calldata from the takerTraits.\n     * @param takerTraits The traits of the taker.\n     * @return result The length of the interaction calldata encoded in the takerTraits.\n     */\n    function argsInteractionLength(TakerTraits takerTraits) internal pure returns (uint256) {\n        return (TakerTraits.unwrap(takerTraits) >> _ARGS_INTERACTION_LENGTH_OFFSET) & _ARGS_INTERACTION_LENGTH_MASK;\n    }\n\n    /**\n     * @notice Checks if the taking amount should be calculated based on making amount.\n     * @param takerTraits The traits of the taker.\n     * @return result A boolean indicating whether the taking amount should be calculated based on making amount.\n     */\n    function isMakingAmount(TakerTraits takerTraits) internal pure returns (bool) {\n        return (TakerTraits.unwrap(takerTraits) & _MAKER_AMOUNT_FLAG) != 0;\n    }\n\n    /**\n     * @notice Checks if the order should unwrap WETH and send ETH to taker.\n     * @param takerTraits The traits of the taker.\n     * @return result A boolean indicating whether the order should unwrap WETH.\n     */\n    function unwrapWeth(TakerTraits takerTraits) internal pure returns (bool) {\n        return (TakerTraits.unwrap(takerTraits) & _UNWRAP_WETH_FLAG) != 0;\n    }\n\n    /**\n     * @notice Checks if the order should skip maker's permit execution.\n     * @param takerTraits The traits of the taker.\n     * @return result A boolean indicating whether the order don't apply permit.\n     */\n    function skipMakerPermit(TakerTraits takerTraits) internal pure returns (bool) {\n        return (TakerTraits.unwrap(takerTraits) & _SKIP_ORDER_PERMIT_FLAG) != 0;\n    }\n\n    /**\n     * @notice Checks if the order uses the permit2 instead of permit.\n     * @param takerTraits The traits of the taker.\n     * @return result A boolean indicating whether the order uses the permit2.\n     */\n    function usePermit2(TakerTraits takerTraits) internal pure returns (bool) {\n        return (TakerTraits.unwrap(takerTraits) & _USE_PERMIT2_FLAG) != 0;\n    }\n\n    /**\n     * @notice Retrieves the threshold amount from the takerTraits.\n     * The maximum amount a taker agrees to give in exchange for a making amount.\n     * @param takerTraits The traits of the taker.\n     * @return result The threshold amount encoded in the takerTraits.\n     */\n    function threshold(TakerTraits takerTraits) internal pure returns (uint256) {\n        return TakerTraits.unwrap(takerTraits) & _AMOUNT_MASK;\n    }\n}"
			},
			"contracts/Errors.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary Errors {\n    error InvalidMsgValue();\n    error ETHTransferFailed();\n}"
			},
			"contracts/IOrderMixin.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./AddressLib.sol\";\nimport \"./MakerTraitsLib.sol\";\nimport \"./TakerTraitsLib.sol\";\n\n/**\n * @title IOrderMixin\n * @notice Interface for order processing logic in the 1inch Limit Order Protocol.\n */\ninterface IOrderMixin {\n    struct Order {\n        uint256 salt;\n        Address maker;\n        Address receiver;\n        Address makerAsset;\n        Address takerAsset;\n        uint256 makingAmount;\n        uint256 takingAmount;\n        MakerTraits makerTraits;\n    }\n\n    error InvalidatedOrder();\n    error TakingAmountExceeded();\n    error PrivateOrder();\n    error BadSignature();\n    error OrderExpired();\n    error WrongSeriesNonce();\n    error SwapWithZeroAmount();\n    error PartialFillNotAllowed();\n    error OrderIsNotSuitableForMassInvalidation();\n    error EpochManagerAndBitInvalidatorsAreIncompatible();\n    error ReentrancyDetected();\n    error PredicateIsNotTrue();\n    error TakingAmountTooHigh();\n    error MakingAmountTooLow();\n    error TransferFromMakerToTakerFailed();\n    error TransferFromTakerToMakerFailed();\n    error MismatchArraysLengths();\n    error InvalidPermit2Transfer();\n    error SimulationResults(bool success, bytes res);\n\n    /**\n     * @notice Emitted when order gets filled\n     * @param orderHash Hash of the order\n     * @param remainingAmount Amount of the maker asset that remains to be filled\n     */\n    event OrderFilled(\n        bytes32 orderHash,\n        uint256 remainingAmount\n    );\n\n    /**\n     * @notice Emitted when order without `useBitInvalidator` gets cancelled\n     * @param orderHash Hash of the order\n     */\n    event OrderCancelled(\n        bytes32 orderHash\n    );\n\n    /**\n     * @notice Emitted when order with `useBitInvalidator` gets cancelled\n     * @param maker Maker address\n     * @param slotIndex Slot index that was updated\n     * @param slotValue New slot value\n     */\n    event BitInvalidatorUpdated(\n        address indexed maker,\n        uint256 slotIndex,\n        uint256 slotValue\n    );\n\n    /**\n     * @notice Delegates execution to custom implementation. Could be used to validate if `transferFrom` works properly\n     * @dev The function always reverts and returns the simulation results in revert data.\n     * @param target Addresses that will be delegated\n     * @param data Data that will be passed to delegatee\n     */\n    function simulate(address target, bytes calldata data) external;\n\n    /**\n     * @notice Cancels order's quote\n     * @param makerTraits Order makerTraits\n     * @param orderHash Hash of the order to cancel\n     */\n    function cancelOrder(MakerTraits makerTraits, bytes32 orderHash) external;\n\n    /**\n     * @notice Cancels orders' quotes\n     * @param makerTraits Orders makerTraits\n     * @param orderHashes Hashes of the orders to cancel\n     */\n    function cancelOrders(MakerTraits[] calldata makerTraits, bytes32[] calldata orderHashes) external;\n\n    /**\n     * @notice Cancels all quotes of the maker (works for bit-invalidating orders only)\n     * @param makerTraits Order makerTraits\n     * @param additionalMask Additional bitmask to invalidate orders\n     */\n    function bitsInvalidateForOrder(MakerTraits makerTraits, uint256 additionalMask) external;\n\n    /**\n     * @notice Fills order's quote, fully or partially (whichever is possible).\n     * @param order Order quote to fill\n     * @param r R component of signature\n     * @param vs VS component of signature\n     * @param amount Taker amount to fill\n     * @param takerTraits Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies\n     * minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\n     * @return makingAmount Actual amount transferred from maker to taker\n     * @return takingAmount Actual amount transferred from taker to maker\n     * @return orderHash Hash of the filled order\n     */\n    function fillOrder(\n        Order calldata order,\n        bytes32 r,\n        bytes32 vs,\n        uint256 amount,\n        TakerTraits takerTraits\n    ) external payable returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash);\n\n    /**\n     * @notice Same as `fillOrder` but allows to specify arguments that are used by the taker.\n     * @param order Order quote to fill\n     * @param r R component of signature\n     * @param vs VS component of signature\n     * @param amount Taker amount to fill\n     * @param takerTraits Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies\n     * minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\n     * @param args Arguments that are used by the taker (target, extension, interaction, permit)\n     * @return makingAmount Actual amount transferred from maker to taker\n     * @return takingAmount Actual amount transferred from taker to maker\n     * @return orderHash Hash of the filled order\n     */\n    function fillOrderArgs(\n        IOrderMixin.Order calldata order,\n        bytes32 r,\n        bytes32 vs,\n        uint256 amount,\n        TakerTraits takerTraits,\n        bytes calldata args\n    ) external payable returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash);\n\n    /**\n     * @notice Same as `fillOrder` but uses contract-based signatures.\n     * @param order Order quote to fill\n     * @param signature Signature to confirm quote ownership\n     * @param amount Taker amount to fill\n     * @param takerTraits Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies\n     * minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\n     * @return makingAmount Actual amount transferred from maker to taker\n     * @return takingAmount Actual amount transferred from taker to maker\n     * @return orderHash Hash of the filled order\n     * @dev See tests for examples\n     */\n    function fillContractOrder(\n        Order calldata order,\n        bytes calldata signature,\n        uint256 amount,\n        TakerTraits takerTraits\n    ) external returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash);\n\n    /**\n     * @notice Same as `fillContractOrder` but allows to specify arguments that are used by the taker.\n     * @param order Order quote to fill\n     * @param signature Signature to confirm quote ownership\n     * @param amount Taker amount to fill\n     * @param takerTraits Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies\n     * minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\n     * @param args Arguments that are used by the taker (target, extension, interaction, permit)\n     * @return makingAmount Actual amount transferred from maker to taker\n     * @return takingAmount Actual amount transferred from taker to maker\n     * @return orderHash Hash of the filled order\n     * @dev See tests for examples\n     */\n    function fillContractOrderArgs(\n        Order calldata order,\n        bytes calldata signature,\n        uint256 amount,\n        TakerTraits takerTraits,\n        bytes calldata args\n    ) external returns(uint256 makingAmount, uint256 takingAmount, bytes32 orderHash);\n\n    /**\n     * @notice Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\n     * @param maker Maker address\n     * @param slot Slot number to return bitmask for\n     * @return result Each bit represents whether corresponding was already invalidated\n     */\n    function bitInvalidatorForOrder(address maker, uint256 slot) external view returns(uint256 result);\n\n    /**\n     * @notice Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\n     * @param orderHash Hash of the order\n     * @return remaining Remaining amount of the order\n     */\n    function remainingInvalidatorForOrder(address maker, bytes32 orderHash) external view returns(uint256 remaining);\n\n    /**\n     * @notice Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\n     * @param orderHash Hash of the order\n     * @return remainingRaw Inverse of the remaining amount of the order if order was filled at least once, otherwise 0\n     */\n    function rawRemainingInvalidatorForOrder(address maker, bytes32 orderHash) external view returns(uint256 remainingRaw);\n\n    /**\n     * @notice Returns order hash, hashed with limit order protocol contract EIP712\n     * @param order Order\n     * @return orderHash Hash of the order\n     */\n    function hashOrder(IOrderMixin.Order calldata order) external view returns(bytes32 orderHash);\n}"
			},
			"contracts/IPostInteraction.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IOrderMixin.sol\";\n\ninterface IPostInteraction {\n    /**\n     * @notice Callback method that gets called after all fund transfers\n     * @param order Order being processed\n     * @param extension Order extension data\n     * @param orderHash Hash of the order being processed\n     * @param taker Taker address\n     * @param makingAmount Actual making amount\n     * @param takingAmount Actual taking amount\n     * @param remainingMakingAmount Order remaining making amount\n     * @param extraData Extra data\n     */\n    function postInteraction(\n        IOrderMixin.Order calldata order,\n        bytes calldata extension,\n        bytes32 orderHash,\n        address taker,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        uint256 remainingMakingAmount,\n        bytes calldata extraData\n    ) external;\n}"
			},
			"contracts/IPreInteraction.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IOrderMixin.sol\";\n\ninterface IPreInteraction {\n    /**\n     * @notice Callback method that gets called before any funds transfers\n     * @param order Order being processed\n     * @param extension Order extension data\n     * @param orderHash Hash of the order being processed\n     * @param taker Taker address\n     * @param makingAmount Actual making amount\n     * @param takingAmount Actual taking amount\n     * @param remainingMakingAmount Order remaining making amount\n     * @param extraData Extra data\n     */\n    function preInteraction(\n        IOrderMixin.Order calldata order,\n        bytes calldata extension,\n        bytes32 orderHash,\n        address taker,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        uint256 remainingMakingAmount,\n        bytes calldata extraData\n    ) external;\n}"
			},
			"contracts/ITakerInteraction.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IOrderMixin.sol\";\n\n/**\n * @title Interface for interactor which acts after `maker -> taker` transfer but before `taker -> maker` transfer.\n * @notice The order filling steps are `preInteraction` =>` Transfer \"maker -> taker\"` => **`Interaction`** => `Transfer \"taker -> maker\"` => `postInteraction`\n */\ninterface ITakerInteraction {\n    /**\n     * @dev This callback allows to interactively handle maker aseets to produce takers assets, doesn't supports ETH as taker assets\n     * @notice Callback method that gets called after maker fund transfer but before taker fund transfer\n     * @param order Order being processed\n     * @param extension Order extension data\n     * @param orderHash Hash of the order being processed\n     * @param taker Taker address\n     * @param makingAmount Actual making amount\n     * @param takingAmount Actual taking amount\n     * @param remainingMakingAmount Order remaining making amount\n     * @param extraData Extra data\n     */\n    function takerInteraction(\n        IOrderMixin.Order calldata order,\n        bytes calldata extension,\n        bytes32 orderHash,\n        address taker,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        uint256 remainingMakingAmount,\n        bytes calldata extraData\n    ) external;\n}"
			},
			"contracts/SeriesEpochManager.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.23;\n\n/// @title A helper contract to manage nonce with the series\ncontract SeriesEpochManager {\n    error AdvanceEpochFailed();\n    event EpochIncreased(address indexed maker, uint256 series, uint256 newEpoch);\n\n    // {\n    //    1: {\n    //        '0x762f73Ad...842Ffa8': 0,\n    //        '0xd20c41ee...32aaDe2': 1\n    //    },\n    //    2: {\n    //        '0x762f73Ad...842Ffa8': 3,\n    //        '0xd20c41ee...32aaDe2': 15\n    //    },\n    //    ...\n    // }\n    mapping(uint256 seriesId => uint256 epoch) private _epochs;\n\n    /// @notice Returns nonce for `maker` and `series`\n    function epoch(address maker, uint96 series) public view returns(uint256) {\n        return _epochs[uint160(maker) | (uint256(series) << 160)];\n    }\n\n    /// @notice Advances nonce by one\n    function increaseEpoch(uint96 series) external {\n        advanceEpoch(series, 1);\n    }\n\n    /// @notice Advances nonce by specified amount\n    function advanceEpoch(uint96 series, uint256 amount) public {\n        if (amount == 0 || amount > 255) revert AdvanceEpochFailed();\n        unchecked {\n            uint256 key = uint160(msg.sender) | (uint256(series) << 160);\n            uint256 newEpoch = _epochs[key] + amount;\n            _epochs[key] = newEpoch;\n            emit EpochIncreased(msg.sender, series, newEpoch);\n        }\n    }\n\n    /// @notice Checks if `maker` has specified `makerEpoch` for `series`\n    /// @return Result True if `maker` has specified epoch. Otherwise, false\n    function epochEquals(address maker, uint256 series, uint256 makerEpoch) public view returns(bool) {\n        return _epochs[uint160(maker) | (uint256(series) << 160)] == makerEpoch;\n    }\n}"
			},
			"contracts/PredicateHelper.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.23;\n\n/// @title A helper contract for executing boolean functions on arbitrary target call results\ncontract PredicateHelper {\n    error ArbitraryStaticCallFailed();\n\n    /// @notice Calls every target with corresponding data\n    /// @return Result True if call to any target returned True. Otherwise, false\n    function or(uint256 offsets, bytes calldata data) public view returns(bool) {\n        uint256 previous;\n        for (uint256 current; (current = uint32(offsets)) != 0; offsets >>= 32) {\n            (bool success, uint256 res) = _staticcallForUint(address(this), data[previous:current]);\n            if (success && res == 1) {\n                return true;\n            }\n            previous = current;\n        }\n        return false;\n    }\n\n    /// @notice Calls every target with corresponding data\n    /// @return Result True if calls to all targets returned True. Otherwise, false\n    function and(uint256 offsets, bytes calldata data) public view returns(bool) {\n        uint256 previous;\n        for (uint256 current; (current = uint32(offsets)) != 0; offsets >>= 32) {\n            (bool success, uint256 res) = _staticcallForUint(address(this), data[previous:current]);\n            if (!success || res != 1) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;\n    }\n\n    /// @notice Calls target with specified data and tests if it's equal to 0\n    /// @return Result True if call to target returns 0. Otherwise, false\n    function not(bytes calldata data) public view returns(bool) {\n        (bool success, uint256 res) = _staticcallForUint(address(this), data);\n        return success && res == 0;\n    }\n\n    /// @notice Calls target with specified data and tests if it's equal to the value\n    /// @param value Value to test\n    /// @return Result True if call to target returns the same value as `value`. Otherwise, false\n    function eq(uint256 value, bytes calldata data) public view returns(bool) {\n        (bool success, uint256 res) = _staticcallForUint(address(this), data);\n        return success && res == value;\n    }\n\n    /// @notice Calls target with specified data and tests if it's lower than value\n    /// @param value Value to test\n    /// @return Result True if call to target returns value which is lower than `value`. Otherwise, false\n    function lt(uint256 value, bytes calldata data) public view returns(bool) {\n        (bool success, uint256 res) = _staticcallForUint(address(this), data);\n        return success && res < value;\n    }\n\n    /// @notice Calls target with specified data and tests if it's bigger than value\n    /// @param value Value to test\n    /// @return Result True if call to target returns value which is bigger than `value`. Otherwise, false\n    function gt(uint256 value, bytes calldata data) public view returns(bool) {\n        (bool success, uint256 res) = _staticcallForUint(address(this), data);\n        return success && res > value;\n    }\n\n    /// @notice Performs an arbitrary call to target with data\n    /// @return Result Bytes transmuted to uint256\n    function arbitraryStaticCall(address target, bytes calldata data) public view returns(uint256) {\n        (bool success, uint256 res) = _staticcallForUint(target, data);\n        if (!success) revert ArbitraryStaticCallFailed();\n        return res;\n    }\n\n    function _staticcallForUint(address target, bytes calldata data) internal view returns(bool success, uint256 res) {\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let ptr := mload(0x40)\n\n            calldatacopy(ptr, data.offset, data.length)\n            success := staticcall(gas(), target, ptr, data.length, 0x0, 0x20)\n            success := and(success, eq(returndatasize(), 32))\n            if success {\n                res := mload(0)\n            }\n        }\n    }\n}"
			},
			"contracts/PermitAndCall.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"./IERC20.sol\";\nimport { SafeERC20 } from \"./SafeERC20.sol\";\n\n/**\n * @title PermitAndCall\n * @dev Abstract contract to support permit and action execution in a single transaction.\n * Allows tokens that implement EIP-2612 permits, DAI-like permits, USDC-like permits and Permit2 to be approved and spent in a single transaction.\n */\nabstract contract PermitAndCall {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Executes a permit for an ERC20 token and then a specified action in a single transaction.\n     * @param permit ERC20 token address (20 bytes) concatenated with the permit data, allowing this contract to spend the token.\n     * Format: [token address (20 bytes)][permit data]\n     * @param action The data representing the action to be executed after the permit.\n     */\n    function permitAndCall(bytes calldata permit, bytes calldata action) external payable {\n        IERC20(address(bytes20(permit))).tryPermit(permit[20:]);\n        // solhint-disable-next-line no-inline-assembly\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, action.offset, action.length)\n            let success := delegatecall(gas(), address(), ptr, action.length, 0, 0)\n            returndatacopy(ptr, 0, returndatasize())\n            switch success\n            case 0 {\n                revert(ptr, returndatasize())\n            }\n            default {\n                return(ptr, returndatasize())\n            }\n        }\n    }\n}"
			},
			"contracts/OnlyWethReceiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./EthReceiver.sol\";\n\n/**\n * @title OnlyWethReceiver\n * @dev Abstract contract extending EthReceiver to accept only ETH deposits from a specified WETH contract.\n * This contract ensures that only wrapped ETH (WETH) can be deposited, rejecting all other direct ETH transfers.\n */\nabstract contract OnlyWethReceiver is EthReceiver {\n    /// @notice Address of the WETH contract allowed to deposit ETH.\n    address private immutable _WETH; // solhint-disable-line var-name-mixedcase\n\n    /**\n     * @dev Sets the WETH contract address during construction.\n     * @param weth Address of the WETH contract.\n     */\n    constructor(address weth) {\n        _WETH = address(weth);\n    }\n\n    /**\n     * @dev Overrides _receive to restrict ETH transfers solely to the WETH contract.\n     * Reverts with EthDepositRejected if ETH is sent from any other address.\n     */\n    function _receive() internal virtual override {\n        if (msg.sender != _WETH) revert EthDepositRejected();\n    }\n}"
			},
			"contracts/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Permit.sol\";\nimport \"./IDaiLikePermit.sol\";\nimport \"./IPermit2.sol\";\nimport \"./IERC7597Permit.sol\";\nimport \"./IWETH.sol\";\nimport \"./RevertReasonForwarder.sol\";\n\n/**\n * @title Implements efficient safe methods for ERC20 interface.\n * @notice Compared to the standard ERC20, this implementation offers several enhancements:\n * 1. more gas-efficient, providing significant savings in transaction costs.\n * 2. support for different permit implementations\n * 3. forceApprove functionality\n * 4. support for WETH deposit and withdraw\n */\nlibrary SafeERC20 {\n    error SafeTransferFailed();\n    error SafeTransferFromFailed();\n    error ForceApproveFailed();\n    error SafeIncreaseAllowanceFailed();\n    error SafeDecreaseAllowanceFailed();\n    error SafePermitBadLength();\n    error Permit2TransferAmountTooHigh();\n\n    // Uniswap Permit2 address\n    address private constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\n    address private constant _PERMIT2_ZKSYNC = 0x0000000000225e31D15943971F47aD3022F714Fa;\n    bytes4 private constant _PERMIT_LENGTH_ERROR = 0x68275857;  // SafePermitBadLength.selector\n\n    /**\n     * @notice Fetches the balance of a specific ERC20 token held by an account.\n     * Consumes less gas then regular `ERC20.balanceOf`.\n     * @dev Note that the implementation does not perform dirty bits cleaning, so it is the\n     * responsibility of the caller to make sure that the higher 96 bits of the `account` parameter are clean.\n     * @param token The IERC20 token contract for which the balance will be fetched.\n     * @param account The address of the account whose token balance will be fetched.\n     * @return tokenBalance The balance of the specified ERC20 token held by the account.\n     */\n    function safeBalanceOf(\n        IERC20 token,\n        address account\n    ) internal view returns(uint256 tokenBalance) {\n        bytes4 selector = IERC20.balanceOf.selector;\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            mstore(0x00, selector)\n            mstore(0x04, account)\n            let success := staticcall(gas(), token, 0x00, 0x24, 0x00, 0x20)\n            tokenBalance := mload(0)\n\n            if or(iszero(success), lt(returndatasize(), 0x20)) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @notice Attempts to safely transfer tokens from one address to another.\n     * @dev If permit2 is true, uses the Permit2 standard; otherwise uses the standard ERC20 transferFrom.\n     * Either requires `true` in return data, or requires target to be smart-contract and empty return data.\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\n     * @param token The IERC20 token contract from which the tokens will be transferred.\n     * @param from The address from which the tokens will be transferred.\n     * @param to The address to which the tokens will be transferred.\n     * @param amount The amount of tokens to transfer.\n     * @param permit2 If true, uses the Permit2 standard for the transfer; otherwise uses the standard ERC20 transferFrom.\n     */\n    function safeTransferFromUniversal(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount,\n        bool permit2\n    ) internal {\n        if (permit2) {\n            safeTransferFromPermit2(token, from, to, amount);\n        } else {\n            safeTransferFrom(token, from, to, amount);\n        }\n    }\n\n    /**\n     * @notice Attempts to safely transfer tokens from one address to another using the ERC20 standard.\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\n     * @param token The IERC20 token contract from which the tokens will be transferred.\n     * @param from The address from which the tokens will be transferred.\n     * @param to The address to which the tokens will be transferred.\n     * @param amount The amount of tokens to transfer.\n     */\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bytes4 selector = token.transferFrom.selector;\n        bool success;\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let data := mload(0x40)\n\n            mstore(data, selector)\n            mstore(add(data, 0x04), from)\n            mstore(add(data, 0x24), to)\n            mstore(add(data, 0x44), amount)\n            success := call(gas(), token, 0, data, 0x64, 0x0, 0x20)\n            if success {\n                switch returndatasize()\n                case 0 {\n                    success := gt(extcodesize(token), 0)\n                }\n                default {\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\n                }\n            }\n        }\n        if (!success) revert SafeTransferFromFailed();\n    }\n\n    /**\n     * @notice Attempts to safely transfer tokens from one address to another using the Permit2 standard.\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\n     * @param token The IERC20 token contract from which the tokens will be transferred.\n     * @param from The address from which the tokens will be transferred.\n     * @param to The address to which the tokens will be transferred.\n     * @param amount The amount of tokens to transfer.\n     */\n    function safeTransferFromPermit2(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        if (amount > type(uint160).max) revert Permit2TransferAmountTooHigh();\n        address permit2 = _getPermit2Address();\n        bytes4 selector = IPermit2.transferFrom.selector;\n        bool success;\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let data := mload(0x40)\n\n            mstore(data, selector)\n            mstore(add(data, 0x04), from)\n            mstore(add(data, 0x24), to)\n            mstore(add(data, 0x44), amount)\n            mstore(add(data, 0x64), token)\n            success := call(gas(), permit2, 0, data, 0x84, 0x0, 0x0)\n            if success {\n                success := gt(extcodesize(permit2), 0)\n            }\n        }\n        if (!success) revert SafeTransferFromFailed();\n    }\n\n    /**\n     * @notice Attempts to safely transfer tokens to another address.\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\n     * the caller to make sure that the higher 96 bits of the `to` parameter are clean.\n     * @param token The IERC20 token contract from which the tokens will be transferred.\n     * @param to The address to which the tokens will be transferred.\n     * @param amount The amount of tokens to transfer.\n     */\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        if (!_makeCall(token, token.transfer.selector, to, amount)) {\n            revert SafeTransferFailed();\n        }\n    }\n\n    /**\n     * @notice Attempts to approve a spender to spend a certain amount of tokens.\n     * @dev If `approve(from, to, amount)` fails, it tries to set the allowance to zero, and retries the `approve` call.\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\n     * @param token The IERC20 token contract on which the call will be made.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function forceApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\n            if (\n                !_makeCall(token, token.approve.selector, spender, 0) ||\n                !_makeCall(token, token.approve.selector, spender, value)\n            ) {\n                revert ForceApproveFailed();\n            }\n        }\n    }\n\n    /**\n     * @notice Safely increases the allowance of a spender.\n     * @dev Increases with safe math check. Checks if the increased allowance will overflow, if yes, then it reverts the transaction.\n     * Then uses `forceApprove` to increase the allowance.\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\n     * @param token The IERC20 token contract on which the call will be made.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to increase the allowance by.\n     */\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 allowance = token.allowance(address(this), spender);\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\n        forceApprove(token, spender, allowance + value);\n    }\n\n    /**\n     * @notice Safely decreases the allowance of a spender.\n     * @dev Decreases with safe math check. Checks if the decreased allowance will underflow, if yes, then it reverts the transaction.\n     * Then uses `forceApprove` to increase the allowance.\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\n     * @param token The IERC20 token contract on which the call will be made.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to decrease the allowance by.\n     */\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 allowance = token.allowance(address(this), spender);\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\n        forceApprove(token, spender, allowance - value);\n    }\n\n    /**\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\n     * @param token The IERC20 token to execute the permit function on.\n     * @param permit The permit data to be used in the function call.\n     */\n    function safePermit(IERC20 token, bytes calldata permit) internal {\n        if (!tryPermit(token, msg.sender, address(this), permit)) RevertReasonForwarder.reRevert();\n    }\n\n    /**\n     * @notice Attempts to execute the `permit` function on the provided token with custom owner and spender parameters.\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\n     * the caller to make sure that the higher 96 bits of the `owner` and `spender` parameters are clean.\n     * @param token The IERC20 token to execute the permit function on.\n     * @param owner The owner of the tokens for which the permit is made.\n     * @param spender The spender allowed to spend the tokens by the permit.\n     * @param permit The permit data to be used in the function call.\n     */\n    function safePermit(IERC20 token, address owner, address spender, bytes calldata permit) internal {\n        if (!tryPermit(token, owner, spender, permit)) RevertReasonForwarder.reRevert();\n    }\n\n    /**\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\n     * @dev Invokes `tryPermit` with sender as owner and contract as spender.\n     * @param token The IERC20 token to execute the permit function on.\n     * @param permit The permit data to be used in the function call.\n     * @return success Returns true if the permit function was successfully executed, false otherwise.\n     */\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool success) {\n        return tryPermit(token, msg.sender, address(this), permit);\n    }\n\n    /**\n     * @notice The function attempts to call the permit function on a given ERC20 token.\n     * @dev The function is designed to support a variety of permit functions, namely: IERC20Permit, IDaiLikePermit, IERC7597Permit and IPermit2.\n     * It accommodates both Compact and Full formats of these permit types.\n     * Please note, it is expected that the `expiration` parameter for the compact Permit2 and the `deadline` parameter\n     * for the compact Permit are to be incremented by one before invoking this function. This approach is motivated by\n     * gas efficiency considerations; as the unlimited expiration period is likely to be the most common scenario, and\n     * zeros are cheaper to pass in terms of gas cost. Thus, callers should increment the expiration or deadline by one\n     * before invocation for optimized performance.\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\n     * the caller to make sure that the higher 96 bits of the `owner` and `spender` parameters are clean.\n     * @param token The address of the ERC20 token on which to call the permit function.\n     * @param owner The owner of the tokens. This address should have signed the off-chain permit.\n     * @param spender The address which will be approved for transfer of tokens.\n     * @param permit The off-chain permit data, containing different fields depending on the type of permit function.\n     * @return success A boolean indicating whether the permit call was successful.\n     */\n    function tryPermit(IERC20 token, address owner, address spender, bytes calldata permit) internal returns(bool success) {\n        address permit2 = _getPermit2Address();\n        // load function selectors for different permit standards\n        bytes4 permitSelector = IERC20Permit.permit.selector;\n        bytes4 daiPermitSelector = IDaiLikePermit.permit.selector;\n        bytes4 permit2Selector = IPermit2.permit.selector;\n        bytes4 erc7597PermitSelector = IERC7597Permit.permit.selector;\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let ptr := mload(0x40)\n\n            // Switch case for different permit lengths, indicating different permit standards\n            switch permit.length\n            // Compact IERC20Permit\n            case 100 {\n                mstore(ptr, permitSelector)     // store selector\n                mstore(add(ptr, 0x04), owner)   // store owner\n                mstore(add(ptr, 0x24), spender) // store spender\n\n                // Compact IERC20Permit.permit(uint256 value, uint32 deadline, uint256 r, uint256 vs)\n                {  // stack too deep\n                    let deadline := shr(224, calldataload(add(permit.offset, 0x20))) // loads permit.offset 0x20..0x23\n                    let vs := calldataload(add(permit.offset, 0x44))                 // loads permit.offset 0x44..0x63\n\n                    calldatacopy(add(ptr, 0x44), permit.offset, 0x20)            // store value     = copy permit.offset 0x00..0x19\n                    mstore(add(ptr, 0x64), sub(deadline, 1))                     // store deadline  = deadline - 1\n                    mstore(add(ptr, 0x84), add(27, shr(255, vs)))                // store v         = most significant bit of vs + 27 (27 or 28)\n                    calldatacopy(add(ptr, 0xa4), add(permit.offset, 0x24), 0x20) // store r         = copy permit.offset 0x24..0x43\n                    mstore(add(ptr, 0xc4), shr(1, shl(1, vs)))                   // store s         = vs without most significant bit\n                }\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\n            }\n            // Compact IDaiLikePermit\n            case 72 {\n                mstore(ptr, daiPermitSelector)  // store selector\n                mstore(add(ptr, 0x04), owner)   // store owner\n                mstore(add(ptr, 0x24), spender) // store spender\n\n                // Compact IDaiLikePermit.permit(uint32 nonce, uint32 expiry, uint256 r, uint256 vs)\n                {  // stack too deep\n                    let expiry := shr(224, calldataload(add(permit.offset, 0x04))) // loads permit.offset 0x04..0x07\n                    let vs := calldataload(add(permit.offset, 0x28))               // loads permit.offset 0x28..0x47\n\n                    mstore(add(ptr, 0x44), shr(224, calldataload(permit.offset))) // store nonce   = copy permit.offset 0x00..0x03\n                    mstore(add(ptr, 0x64), sub(expiry, 1))                        // store expiry  = expiry - 1\n                    mstore(add(ptr, 0x84), true)                                  // store allowed = true\n                    mstore(add(ptr, 0xa4), add(27, shr(255, vs)))                 // store v       = most significant bit of vs + 27 (27 or 28)\n                    calldatacopy(add(ptr, 0xc4), add(permit.offset, 0x08), 0x20)  // store r       = copy permit.offset 0x08..0x27\n                    mstore(add(ptr, 0xe4), shr(1, shl(1, vs)))                    // store s       = vs without most significant bit\n                }\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\n            }\n            // IERC20Permit\n            case 224 {\n                mstore(ptr, permitSelector)\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\n            }\n            // IDaiLikePermit\n            case 256 {\n                mstore(ptr, daiPermitSelector)\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\n            }\n            // Compact IPermit2\n            case 96 {\n                // Compact IPermit2.permit(uint160 amount, uint32 expiration, uint32 nonce, uint32 sigDeadline, uint256 r, uint256 vs)\n                mstore(ptr, permit2Selector)  // store selector\n                mstore(add(ptr, 0x04), owner) // store owner\n                mstore(add(ptr, 0x24), token) // store token\n\n                calldatacopy(add(ptr, 0x50), permit.offset, 0x14)             // store amount = copy permit.offset 0x00..0x13\n                // and(0xffffffffffff, ...) - conversion to uint48\n                mstore(add(ptr, 0x64), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x14))), 1))) // store expiration = ((permit.offset 0x14..0x17 - 1) & 0xffffffffffff)\n                mstore(add(ptr, 0x84), shr(224, calldataload(add(permit.offset, 0x18)))) // store nonce = copy permit.offset 0x18..0x1b\n                mstore(add(ptr, 0xa4), spender)                               // store spender\n                // and(0xffffffffffff, ...) - conversion to uint48\n                mstore(add(ptr, 0xc4), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x1c))), 1))) // store sigDeadline = ((permit.offset 0x1c..0x1f - 1) & 0xffffffffffff)\n                mstore(add(ptr, 0xe4), 0x100)                                 // store offset = 256\n                mstore(add(ptr, 0x104), 0x40)                                 // store length = 64\n                calldatacopy(add(ptr, 0x124), add(permit.offset, 0x20), 0x20) // store r      = copy permit.offset 0x20..0x3f\n                calldatacopy(add(ptr, 0x144), add(permit.offset, 0x40), 0x20) // store vs     = copy permit.offset 0x40..0x5f\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\n                success := call(gas(), permit2, 0, ptr, 0x164, 0, 0)\n            }\n            // IPermit2\n            case 352 {\n                mstore(ptr, permit2Selector)\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\n                success := call(gas(), permit2, 0, ptr, 0x164, 0, 0)\n            }\n            // Dynamic length\n            default {\n                mstore(ptr, erc7597PermitSelector)\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\n                // IERC7597Permit.permit(address owner, address spender, uint256 value, uint256 deadline, bytes memory signature)\n                success := call(gas(), token, 0, ptr, add(permit.length, 4), 0, 0)\n            }\n        }\n    }\n\n    /**\n     * @dev Executes a low level call to a token contract, making it resistant to reversion and erroneous boolean returns.\n     * @param token The IERC20 token contract on which the call will be made.\n     * @param selector The function signature that is to be called on the token contract.\n     * @param to The address to which the token amount will be transferred.\n     * @param amount The token amount to be transferred.\n     * @return success A boolean indicating if the call was successful. Returns 'true' on success and 'false' on failure.\n     * In case of success but no returned data, validates that the contract code exists.\n     * In case of returned data, ensures that it's a boolean `true`.\n     */\n    function _makeCall(\n        IERC20 token,\n        bytes4 selector,\n        address to,\n        uint256 amount\n    ) private returns (bool success) {\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let data := mload(0x40)\n\n            mstore(data, selector)\n            mstore(add(data, 0x04), to)\n            mstore(add(data, 0x24), amount)\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\n            if success {\n                switch returndatasize()\n                case 0 {\n                    success := gt(extcodesize(token), 0)\n                }\n                default {\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Safely deposits a specified amount of Ether into the IWETH contract. Consumes less gas then regular `IWETH.deposit`.\n     * @param weth The IWETH token contract.\n     * @param amount The amount of Ether to deposit into the IWETH contract.\n     */\n    function safeDeposit(IWETH weth, uint256 amount) internal {\n        bytes4 selector = IWETH.deposit.selector;\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            mstore(0, selector)\n            if iszero(call(gas(), weth, amount, 0, 4, 0, 0)) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract. Consumes less gas then regular `IWETH.withdraw`.\n     * @dev Uses inline assembly to interact with the IWETH contract.\n     * @param weth The IWETH token contract.\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\n     */\n    function safeWithdraw(IWETH weth, uint256 amount) internal {\n        bytes4 selector = IWETH.withdraw.selector;\n        assembly (\"memory-safe\") {  // solhint-disable-line no-inline-assembly\n            mstore(0, selector)\n            mstore(4, amount)\n            if iszero(call(gas(), weth, 0, 0, 0x24, 0, 0)) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract to a specified recipient.\n     * Consumes less gas then regular `IWETH.withdraw`.\n     * @param weth The IWETH token contract.\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\n     * @param to The recipient of the withdrawn Ether.\n     */\n    function safeWithdrawTo(IWETH weth, uint256 amount, address to) internal {\n        safeWithdraw(weth, amount);\n        if (to != address(this)) {\n            assembly (\"memory-safe\") {  // solhint-disable-line no-inline-assembly\n                if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\n                    let ptr := mload(0x40)\n                    returndatacopy(ptr, 0, returndatasize())\n                    revert(ptr, returndatasize())\n                }\n            }\n        }\n    }\n\n    function _getPermit2Address() private view returns (address permit2) {\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            switch chainid()\n            case 324 { // zksync mainnet\n                permit2 := _PERMIT2_ZKSYNC\n            }\n            case 300 { // zksync testnet\n                permit2 := _PERMIT2_ZKSYNC\n            }\n            case 260 { // zksync fork network\n                permit2 := _PERMIT2_ZKSYNC\n            }\n            default {\n                permit2 := _PERMIT2\n            }\n        }\n    }\n}"
			},
			"contracts/IWETH.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @title IWETH\n * @dev Interface for wrapper as WETH-like token.\n */\ninterface IWETH is IERC20 {\n    /**\n     * @notice Emitted when Ether is deposited to get wrapper tokens.\n     */\n    event Deposit(address indexed dst, uint256 wad);\n\n    /**\n     * @notice Emitted when wrapper tokens is withdrawn as Ether.\n     */\n    event Withdrawal(address indexed src, uint256 wad);\n\n    /**\n     * @notice Deposit Ether to get wrapper tokens.\n     */\n    function deposit() external payable;\n\n    /**\n     * @notice Withdraw wrapped tokens as Ether.\n     * @param amount Amount of wrapped tokens to withdraw.\n     */\n    function withdraw(uint256 amount) external;\n}"
			},
			"contracts/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}"
			},
			"contracts/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"./Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2²⁵⁶ + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        uint256 exp;\n        unchecked {\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\n            value >>= exp;\n            result += exp;\n\n            result += SafeCast.toUint(value > 1);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        uint256 isGt;\n        unchecked {\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\n            value >>= isGt * 128;\n            result += isGt * 16;\n\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\n            value >>= isGt * 64;\n            result += isGt * 8;\n\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\n            value >>= isGt * 32;\n            result += isGt * 4;\n\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\n            value >>= isGt * 16;\n            result += isGt * 2;\n\n            result += SafeCast.toUint(value > (1 << 8) - 1);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}"
			},
			"contracts/IERC5267.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC5267.sol)\n\npragma solidity >=0.4.16;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}"
			},
			"contracts/ShortStrings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        assembly (\"memory-safe\") {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {toShortStringWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {toShortStringWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}"
			},
			"contracts/MessageHashUtils.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"./Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32.\n     */\n    function toDataWithIntendedValidatorHash(\n        address validator,\n        bytes32 messageHash\n    ) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, hex\"19_00\")\n            mstore(0x02, shl(96, validator))\n            mstore(0x16, messageHash)\n            digest := keccak256(0x00, 0x36)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}"
			},
			"contracts/StorageSlot.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}"
			},
			"contracts/RevertReasonForwarder.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title RevertReasonForwarder\n * @notice Provides utilities for forwarding and retrieving revert reasons from failed external calls.\n */\nlibrary RevertReasonForwarder {\n    /**\n     * @dev Forwards the revert reason from the latest external call.\n     * This method allows propagating the revert reason of a failed external call to the caller.\n     */\n    function reRevert() internal pure {\n        // bubble up revert reason from latest external call\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, returndatasize())\n            revert(ptr, returndatasize())\n        }\n    }\n\n    /**\n     * @dev Retrieves the revert reason from the latest external call.\n     * This method enables capturing the revert reason of a failed external call for inspection or processing.\n     * @return reason The latest external call revert reason.\n     */\n    function reReason() internal pure returns (bytes memory reason) {\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            reason := mload(0x40)\n            let length := returndatasize()\n            mstore(reason, length)\n            returndatacopy(add(reason, 0x20), 0, length)\n            mstore(0x40, add(reason, add(0x20, length)))\n        }\n    }\n}"
			},
			"contracts/IERC7597Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC7597Permit\n * @dev A new extension for ERC-2612 permit, which has already been added to USDC v2.2.\n */\ninterface IERC7597Permit {\n    /**\n     * @notice Update allowance with a signed permit.\n     * @dev Signature bytes can be used for both EOA wallets and contract wallets.\n     * @param owner Token owner's address (Authorizer).\n     * @param spender Spender's address.\n     * @param value Amount of allowance.\n     * @param deadline The time at which the signature expires (unixtime).\n     * @param signature Unstructured bytes signature signed by an EOA wallet or a contract wallet.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        bytes memory signature\n    ) external;\n}"
			},
			"contracts/IPermit2.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IPermit2\n * @dev Interface for a flexible permit system that extends ERC20 tokens to support permits in tokens lacking native permit functionality.\n */\ninterface IPermit2 {\n    /**\n     * @dev Struct for holding permit details.\n     * @param token ERC20 token address for which the permit is issued.\n     * @param amount The maximum amount allowed to spend.\n     * @param expiration Timestamp until which the permit is valid.\n     * @param nonce An incrementing value for each signature, unique per owner, token, and spender.\n     */\n    struct PermitDetails {\n        address token;\n        uint160 amount;\n        uint48 expiration;\n        uint48 nonce;\n    }\n\n    /**\n     * @dev Struct for a single token allowance permit.\n     * @param details Permit details including token, amount, expiration, and nonce.\n     * @param spender Address authorized to spend the tokens.\n     * @param sigDeadline Deadline for the permit signature, ensuring timeliness of the permit.\n     */\n    struct PermitSingle {\n        PermitDetails details;\n        address spender;\n        uint256 sigDeadline;\n    }\n\n    /**\n     * @dev Struct for packed allowance data to optimize storage.\n     * @param amount Amount allowed.\n     * @param expiration Permission expiry timestamp.\n     * @param nonce Unique incrementing value for tracking allowances.\n     */\n    struct PackedAllowance {\n        uint160 amount;\n        uint48 expiration;\n        uint48 nonce;\n    }\n\n    /**\n     * @notice Executes a token transfer from one address to another.\n     * @param user The token owner's address.\n     * @param spender The address authorized to spend the tokens.\n     * @param amount The amount of tokens to transfer.\n     * @param token The address of the token being transferred.\n     */\n    function transferFrom(address user, address spender, uint160 amount, address token) external;\n\n    /**\n     * @notice Issues a permit for spending tokens via a signed authorization.\n     * @param owner The token owner's address.\n     * @param permitSingle Struct containing the permit details.\n     * @param signature The signature proving the owner authorized the permit.\n     */\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\n\n    /**\n     * @notice Retrieves the allowance details between a token owner and spender.\n     * @param user The token owner's address.\n     * @param token The token address.\n     * @param spender The spender's address.\n     * @return The packed allowance details.\n     */\n    function allowance(address user, address token, address spender) external view returns (PackedAllowance memory);\n\n    /**\n     * @notice Approves the spender to use up to amount of the specified token up until the expiration\n     * @param token The token to approve\n     * @param spender The spender address to approve\n     * @param amount The approved amount of the token\n     * @param expiration The timestamp at which the approval is no longer valid\n     * @dev The packed allowance also holds a nonce, which will stay unchanged in approve\n     * @dev Setting amount to type(uint160).max sets an unlimited approval\n     */\n    function approve(address token, address spender, uint160 amount, uint48 expiration) external;\n}"
			},
			"contracts/IDaiLikePermit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IDaiLikePermit\n * @dev Interface for Dai-like permit function allowing token spending via signatures.\n */\ninterface IDaiLikePermit {\n    /**\n     * @notice Approves spending of tokens via off-chain signatures.\n     * @param holder Token holder's address.\n     * @param spender Spender's address.\n     * @param nonce Current nonce of the holder.\n     * @param expiry Time when the permit expires.\n     * @param allowed True to allow, false to disallow spending.\n     * @param v, r, s Signature components.\n     */\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}"
			},
			"contracts/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}"
			},
			"contracts/IAmountGetter.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IOrderMixin.sol\";\n\n/**\n * @title IAmountGetter\n * @notice Interface for external logic to determine actual making and taking amounts for orders.\n */\ninterface IAmountGetter {\n    /**\n     * @notice View method that gets called to determine the actual making amount\n     * @param order Order being processed\n     * @param extension Order extension data\n     * @param orderHash Hash of the order being processed\n     * @param taker Taker address\n     * @param takingAmount Actual taking amount\n     * @param remainingMakingAmount Order remaining making amount\n     * @param extraData Extra data\n     * @return makingAmount Actual making amount that should be used for the order\n     */\n    function getMakingAmount(\n        IOrderMixin.Order calldata order,\n        bytes calldata extension,\n        bytes32 orderHash,\n        address taker,\n        uint256 takingAmount,\n        uint256 remainingMakingAmount,\n        bytes calldata extraData\n    ) external view returns (uint256);\n\n    /**\n     * @notice View method that gets called to determine the actual taking amount\n     * @param order Order being processed\n     * @param extension Order extension data\n     * @param orderHash Hash of the order being processed\n     * @param taker Taker address\n     * @param makingAmount Actual taking amount\n     * @param remainingMakingAmount Order remaining making amount\n     * @param extraData Extra data\n     * @return takingAmount Actual taking amount that should be used for the order\n     */\n    function getTakingAmount(\n        IOrderMixin.Order calldata order,\n        bytes calldata extension,\n        bytes32 orderHash,\n        address taker,\n        uint256 makingAmount,\n        uint256 remainingMakingAmount,\n        bytes calldata extraData\n    ) external view returns (uint256);\n}"
			},
			"contracts/AmountCalculatorLib.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.23;\n\n/// @title The helper library to calculate linearly taker amount from maker amount and vice versa.\nlibrary AmountCalculatorLib {\n    /// @notice Calculates maker amount\n    /// @return Result Floored maker amount\n    function getMakingAmount(uint256 orderMakerAmount, uint256 orderTakerAmount, uint256 swapTakerAmount) internal pure returns(uint256) {\n        if ((swapTakerAmount | orderMakerAmount) >> 128 == 0) {\n            unchecked {\n                return (swapTakerAmount * orderMakerAmount) / orderTakerAmount;\n            }\n        }\n        return swapTakerAmount * orderMakerAmount / orderTakerAmount;\n    }\n\n    /// @notice Calculates taker amount\n    /// @return Result Ceiled taker amount\n    function getTakingAmount(uint256 orderMakerAmount, uint256 orderTakerAmount, uint256 swapMakerAmount) internal pure returns(uint256) {\n        if ((swapMakerAmount | orderTakerAmount) >> 128 == 0) {\n            unchecked {\n                return (swapMakerAmount * orderTakerAmount + orderMakerAmount - 1) / orderMakerAmount;\n            }\n        }\n        return (swapMakerAmount * orderTakerAmount + orderMakerAmount - 1) / orderMakerAmount;\n    }\n}"
			},
			"contracts/ExtensionLib.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IOrderMixin.sol\";\nimport \"./OffsetsLib.sol\";\n\n/**\n * @title ExtensionLib\n * @notice Library for retrieving extensions information for the IOrderMixin Interface.\n */\nlibrary ExtensionLib {\n    using AddressLib for Address;\n    using OffsetsLib for Offsets;\n\n    enum DynamicField {\n        MakerAssetSuffix,\n        TakerAssetSuffix,\n        MakingAmountData,\n        TakingAmountData,\n        Predicate,\n        MakerPermit,\n        PreInteractionData,\n        PostInteractionData,\n        CustomData\n    }\n\n    /**\n     * @notice Returns the MakerAssetSuffix from the provided extension calldata.\n     * @param extension The calldata from which the MakerAssetSuffix is to be retrieved.\n     * @return calldata Bytes representing the MakerAssetSuffix.\n     */\n    function makerAssetSuffix(bytes calldata extension) internal pure returns(bytes calldata) {\n        return _get(extension, DynamicField.MakerAssetSuffix);\n    }\n\n    /**\n     * @notice Returns the TakerAssetSuffix from the provided extension calldata.\n     * @param extension The calldata from which the TakerAssetSuffix is to be retrieved.\n     * @return calldata Bytes representing the TakerAssetSuffix.\n     */\n    function takerAssetSuffix(bytes calldata extension) internal pure returns(bytes calldata) {\n        return _get(extension, DynamicField.TakerAssetSuffix);\n    }\n\n    /**\n     * @notice Returns the MakingAmountData from the provided extension calldata.\n     * @param extension The calldata from which the MakingAmountData is to be retrieved.\n     * @return calldata Bytes representing the MakingAmountData.\n     */\n    function makingAmountData(bytes calldata extension) internal pure returns(bytes calldata) {\n        return _get(extension, DynamicField.MakingAmountData);\n    }\n\n    /**\n     * @notice Returns the TakingAmountData from the provided extension calldata.\n     * @param extension The calldata from which the TakingAmountData is to be retrieved.\n     * @return calldata Bytes representing the TakingAmountData.\n     */\n    function takingAmountData(bytes calldata extension) internal pure returns(bytes calldata) {\n        return _get(extension, DynamicField.TakingAmountData);\n    }\n\n    /**\n     * @notice Returns the order's predicate from the provided extension calldata.\n     * @param extension The calldata from which the predicate is to be retrieved.\n     * @return calldata Bytes representing the predicate.\n     */\n    function predicate(bytes calldata extension) internal pure returns(bytes calldata) {\n        return _get(extension, DynamicField.Predicate);\n    }\n\n    /**\n     * @notice Returns the maker's permit from the provided extension calldata.\n     * @param extension The calldata from which the maker's permit is to be retrieved.\n     * @return calldata Bytes representing the maker's permit.\n     */\n    function makerPermit(bytes calldata extension) internal pure returns(bytes calldata) {\n        return _get(extension, DynamicField.MakerPermit);\n    }\n\n\n    /**\n     * @notice Returns the pre-interaction from the provided extension calldata.\n     * @param extension The calldata from which the pre-interaction is to be retrieved.\n     * @return calldata Bytes representing the pre-interaction.\n     */\n    function preInteractionTargetAndData(bytes calldata extension) internal pure returns(bytes calldata) {\n        return _get(extension, DynamicField.PreInteractionData);\n    }\n\n    /**\n     * @notice Returns the post-interaction from the provided extension calldata.\n     * @param extension The calldata from which the post-interaction is to be retrieved.\n     * @return calldata Bytes representing the post-interaction.\n     */\n    function postInteractionTargetAndData(bytes calldata extension) internal pure returns(bytes calldata) {\n        return _get(extension, DynamicField.PostInteractionData);\n    }\n\n    /**\n     * @notice Returns extra suffix data from the provided extension calldata.\n     * @param extension The calldata from which the extra suffix data is to be retrieved.\n     * @return calldata Bytes representing the extra suffix data.\n     */\n    function customData(bytes calldata extension) internal pure returns(bytes calldata) {\n        if (extension.length < 0x20) return msg.data[:0];\n        uint256 offsets = uint256(bytes32(extension));\n        unchecked {\n            return extension[0x20 + (offsets >> 224):];\n        }\n    }\n\n    /**\n     * @notice Retrieves a specific field from the provided extension calldata.\n     * @dev The first 32 bytes of an extension calldata contain offsets to the end of each field within the calldata.\n     * @param extension The calldata from which the field is to be retrieved.\n     * @param field The specific dynamic field to retrieve from the extension.\n     * @return calldata Bytes representing the requested field.\n     */\n    function _get(bytes calldata extension, DynamicField field) private pure returns(bytes calldata) {\n        if (extension.length < 0x20) return msg.data[:0];\n\n        Offsets offsets;\n        bytes calldata concat;\n        assembly (\"memory-safe\") {  // solhint-disable-line no-inline-assembly\n            offsets := calldataload(extension.offset)\n            concat.offset := add(extension.offset, 0x20)\n            concat.length := sub(extension.length, 0x20)\n        }\n\n        return offsets.get(concat, uint256(field));\n    }\n}"
			},
			"contracts/MakerTraitsLib.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ntype MakerTraits is uint256;\n\n/**\n * @title MakerTraitsLib\n * @notice A library to manage and check MakerTraits, which are used to encode the maker's preferences for an order in a single uint256.\n * @dev\n * The MakerTraits type is a uint256 and different parts of the number are used to encode different traits.\n * High bits are used for flags\n * 255 bit `NO_PARTIAL_FILLS_FLAG`          - if set, the order does not allow partial fills\n * 254 bit `ALLOW_MULTIPLE_FILLS_FLAG`      - if set, the order permits multiple fills\n * 253 bit                                  - unused\n * 252 bit `PRE_INTERACTION_CALL_FLAG`      - if set, the order requires pre-interaction call\n * 251 bit `POST_INTERACTION_CALL_FLAG`     - if set, the order requires post-interaction call\n * 250 bit `NEED_CHECK_EPOCH_MANAGER_FLAG`  - if set, the order requires to check the epoch manager\n * 249 bit `HAS_EXTENSION_FLAG`             - if set, the order has extension(s)\n * 248 bit `USE_PERMIT2_FLAG`               - if set, the order uses permit2\n * 247 bit `UNWRAP_WETH_FLAG`               - if set, the order requires to unwrap WETH\n\n * Low 200 bits are used for allowed sender, expiration, nonceOrEpoch, and series\n * uint80 last 10 bytes of allowed sender address (0 if any)\n * uint40 expiration timestamp (0 if none)\n * uint40 nonce or epoch\n * uint40 series\n */\nlibrary MakerTraitsLib {\n    // Low 200 bits are used for allowed sender, expiration, nonceOrEpoch, and series\n    uint256 private constant _ALLOWED_SENDER_MASK = type(uint80).max;\n    uint256 private constant _EXPIRATION_OFFSET = 80;\n    uint256 private constant _EXPIRATION_MASK = type(uint40).max;\n    uint256 private constant _NONCE_OR_EPOCH_OFFSET = 120;\n    uint256 private constant _NONCE_OR_EPOCH_MASK = type(uint40).max;\n    uint256 private constant _SERIES_OFFSET = 160;\n    uint256 private constant _SERIES_MASK = type(uint40).max;\n\n    uint256 private constant _NO_PARTIAL_FILLS_FLAG = 1 << 255;\n    uint256 private constant _ALLOW_MULTIPLE_FILLS_FLAG = 1 << 254;\n    uint256 private constant _PRE_INTERACTION_CALL_FLAG = 1 << 252;\n    uint256 private constant _POST_INTERACTION_CALL_FLAG = 1 << 251;\n    uint256 private constant _NEED_CHECK_EPOCH_MANAGER_FLAG = 1 << 250;\n    uint256 private constant _HAS_EXTENSION_FLAG = 1 << 249;\n    uint256 private constant _USE_PERMIT2_FLAG = 1 << 248;\n    uint256 private constant _UNWRAP_WETH_FLAG = 1 << 247;\n\n    /**\n     * @notice Checks if the order has the extension flag set.\n     * @dev If the `HAS_EXTENSION_FLAG` is set in the makerTraits, then the protocol expects that the order has extension(s).\n     * @param makerTraits The traits of the maker.\n     * @return result A boolean indicating whether the flag is set.\n     */\n    function hasExtension(MakerTraits makerTraits) internal pure returns (bool) {\n        return (MakerTraits.unwrap(makerTraits) & _HAS_EXTENSION_FLAG) != 0;\n    }\n\n    /**\n     * @notice Checks if the maker allows a specific taker to fill the order.\n     * @param makerTraits The traits of the maker.\n     * @param sender The address of the taker to be checked.\n     * @return result A boolean indicating whether the taker is allowed.\n     */\n    function isAllowedSender(MakerTraits makerTraits, address sender) internal pure returns (bool) {\n        uint160 allowedSender = uint160(MakerTraits.unwrap(makerTraits) & _ALLOWED_SENDER_MASK);\n        return allowedSender == 0 || allowedSender == uint160(sender) & _ALLOWED_SENDER_MASK;\n    }\n\n    /**\n     * @notice Returns the expiration time of the order.\n     * @param makerTraits The traits of the maker.\n     * @return result The expiration timestamp of the order.\n     */\n    function getExpirationTime(MakerTraits makerTraits) internal pure returns (uint256) {\n        return (MakerTraits.unwrap(makerTraits) >> _EXPIRATION_OFFSET) & _EXPIRATION_MASK;\n    }\n\n    /**\n     * @notice Checks if the order has expired.\n     * @param makerTraits The traits of the maker.\n     * @return result A boolean indicating whether the order has expired.\n     */\n    function isExpired(MakerTraits makerTraits) internal view returns (bool) {\n        uint256 expiration = getExpirationTime(makerTraits);\n        return expiration != 0 && expiration < block.timestamp;  // solhint-disable-line not-rely-on-time\n    }\n\n    /**\n     * @notice Returns the nonce or epoch of the order.\n     * @param makerTraits The traits of the maker.\n     * @return result The nonce or epoch of the order.\n     */\n    function nonceOrEpoch(MakerTraits makerTraits) internal pure returns (uint256) {\n        return (MakerTraits.unwrap(makerTraits) >> _NONCE_OR_EPOCH_OFFSET) & _NONCE_OR_EPOCH_MASK;\n    }\n\n    /**\n     * @notice Returns the series of the order.\n     * @param makerTraits The traits of the maker.\n     * @return result The series of the order.\n     */\n    function series(MakerTraits makerTraits) internal pure returns (uint256) {\n        return (MakerTraits.unwrap(makerTraits) >> _SERIES_OFFSET) & _SERIES_MASK;\n    }\n\n    /**\n      * @notice Determines if the order allows partial fills.\n      * @dev If the _NO_PARTIAL_FILLS_FLAG is not set in the makerTraits, then the order allows partial fills.\n      * @param makerTraits The traits of the maker, determining their preferences for the order.\n      * @return result A boolean indicating whether the maker allows partial fills.\n      */\n    function allowPartialFills(MakerTraits makerTraits) internal pure returns (bool) {\n        return (MakerTraits.unwrap(makerTraits) & _NO_PARTIAL_FILLS_FLAG) == 0;\n    }\n\n    /**\n     * @notice Checks if the maker needs pre-interaction call.\n     * @param makerTraits The traits of the maker.\n     * @return result A boolean indicating whether the maker needs a pre-interaction call.\n     */\n    function needPreInteractionCall(MakerTraits makerTraits) internal pure returns (bool) {\n        return (MakerTraits.unwrap(makerTraits) & _PRE_INTERACTION_CALL_FLAG) != 0;\n    }\n\n    /**\n     * @notice Checks if the maker needs post-interaction call.\n     * @param makerTraits The traits of the maker.\n     * @return result A boolean indicating whether the maker needs a post-interaction call.\n     */\n    function needPostInteractionCall(MakerTraits makerTraits) internal pure returns (bool) {\n        return (MakerTraits.unwrap(makerTraits) & _POST_INTERACTION_CALL_FLAG) != 0;\n    }\n\n    /**\n      * @notice Determines if the order allows multiple fills.\n      * @dev If the _ALLOW_MULTIPLE_FILLS_FLAG is set in the makerTraits, then the maker allows multiple fills.\n      * @param makerTraits The traits of the maker, determining their preferences for the order.\n      * @return result A boolean indicating whether the maker allows multiple fills.\n      */\n    function allowMultipleFills(MakerTraits makerTraits) internal pure returns (bool) {\n        return (MakerTraits.unwrap(makerTraits) & _ALLOW_MULTIPLE_FILLS_FLAG) != 0;\n    }\n\n    /**\n      * @notice Determines if an order should use the bit invalidator or remaining amount validator.\n      * @dev The bit invalidator can be used if the order does not allow partial or multiple fills.\n      * @param makerTraits The traits of the maker, determining their preferences for the order.\n      * @return result A boolean indicating whether the bit invalidator should be used.\n      * True if the order requires the use of the bit invalidator.\n      */\n    function useBitInvalidator(MakerTraits makerTraits) internal pure returns (bool) {\n        return !allowPartialFills(makerTraits) || !allowMultipleFills(makerTraits);\n    }\n\n    /**\n     * @notice Checks if the maker needs to check the epoch.\n     * @param makerTraits The traits of the maker.\n     * @return result A boolean indicating whether the maker needs to check the epoch manager.\n     */\n    function needCheckEpochManager(MakerTraits makerTraits) internal pure returns (bool) {\n        return (MakerTraits.unwrap(makerTraits) & _NEED_CHECK_EPOCH_MANAGER_FLAG) != 0;\n    }\n\n    /**\n     * @notice Checks if the maker uses permit2.\n     * @param makerTraits The traits of the maker.\n     * @return result A boolean indicating whether the maker uses permit2.\n     */\n    function usePermit2(MakerTraits makerTraits) internal pure returns (bool) {\n        return MakerTraits.unwrap(makerTraits) & _USE_PERMIT2_FLAG != 0;\n    }\n\n    /**\n     * @notice Checks if the maker needs to unwraps WETH.\n     * @param makerTraits The traits of the maker.\n     * @return result A boolean indicating whether the maker needs to unwrap WETH.\n     */\n    function unwrapWeth(MakerTraits makerTraits) internal pure returns (bool) {\n        return MakerTraits.unwrap(makerTraits) & _UNWRAP_WETH_FLAG != 0;\n    }\n}"
			},
			"contracts/AddressLib.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ntype Address is uint256;\n\n/**\n* @notice AddressLib\n* @notice Library for working with addresses encoded as uint256 values, which can include flags in the highest bits.\n*/\nlibrary AddressLib {\n    uint256 private constant _LOW_160_BIT_MASK = (1 << 160) - 1;\n\n    /**\n    * @notice Returns the address representation of a uint256.\n    * @param a The uint256 value to convert to an address.\n    * @return The address representation of the provided uint256 value.\n    */\n    function get(Address a) internal pure returns (address) {\n        return address(uint160(Address.unwrap(a) & _LOW_160_BIT_MASK));\n    }\n\n    /**\n    * @notice Checks if a given flag is set for the provided address.\n    * @param a The address to check for the flag.\n    * @param flag The flag to check for in the provided address.\n    * @return True if the provided flag is set in the address, false otherwise.\n    */\n    function getFlag(Address a, uint256 flag) internal pure returns (bool) {\n        return (Address.unwrap(a) & flag) != 0;\n    }\n\n    /**\n    * @notice Returns a uint32 value stored at a specific bit offset in the provided address.\n    * @param a The address containing the uint32 value.\n    * @param offset The bit offset at which the uint32 value is stored.\n    * @return The uint32 value stored in the address at the specified bit offset.\n    */\n    function getUint32(Address a, uint256 offset) internal pure returns (uint32) {\n        return uint32(Address.unwrap(a) >> offset);\n    }\n\n    /**\n    * @notice Returns a uint64 value stored at a specific bit offset in the provided address.\n    * @param a The address containing the uint64 value.\n    * @param offset The bit offset at which the uint64 value is stored.\n    * @return The uint64 value stored in the address at the specified bit offset.\n    */\n    function getUint64(Address a, uint256 offset) internal pure returns (uint64) {\n        return uint64(Address.unwrap(a) >> offset);\n    }\n}"
			},
			"contracts/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1271.sol\";\n\n/**\n * @title ECDSA signature operations\n * @notice Provides functions for recovering addresses from signatures and verifying signatures, including support for EIP-2098 compact signatures.\n */\nlibrary ECDSA {\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n    // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n    //\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n    // these malleable signatures as well.\n    uint256 private constant _S_BOUNDARY = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 + 1;\n    uint256 private constant _COMPACT_S_MASK = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    uint256 private constant _COMPACT_V_SHIFT = 255;\n\n    /**\n     * @notice Recovers the signer's address from the signature.\n     * @dev Recovers the address that has signed a hash with `(v, r, s)` signature.\n     * @param hash The keccak256 hash of the data signed.\n     * @param v The recovery byte of the signature.\n     * @param r The first 32 bytes of the signature.\n     * @param s The second 32 bytes of the signature.\n     * @return signer The address of the signer.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal view returns (address signer) {\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            if lt(s, _S_BOUNDARY) {\n                let ptr := mload(0x40)\n\n                mstore(ptr, hash)\n                mstore(add(ptr, 0x20), v)\n                mstore(add(ptr, 0x40), r)\n                mstore(add(ptr, 0x60), s)\n                mstore(0, 0)\n                pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\n                signer := mload(0)\n            }\n        }\n    }\n\n    /**\n     * @notice Recovers the signer's address from the signature using `r` and `vs` components.\n     * @dev Recovers the address that has signed a hash with `r` and `vs`, where `vs` combines `v` and `s`.\n     * @param hash The keccak256 hash of the data signed.\n     * @param r The first 32 bytes of the signature.\n     * @param vs The combined `v` and `s` values of the signature.\n     * @return signer The address of the signer.\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal view returns (address signer) {\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let s := and(vs, _COMPACT_S_MASK)\n            if lt(s, _S_BOUNDARY) {\n                let ptr := mload(0x40)\n\n                mstore(ptr, hash)\n                mstore(add(ptr, 0x20), add(27, shr(_COMPACT_V_SHIFT, vs)))\n                mstore(add(ptr, 0x40), r)\n                mstore(add(ptr, 0x60), s)\n                mstore(0, 0)\n                pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\n                signer := mload(0)\n            }\n        }\n    }\n\n    /**\n     * @notice Recovers the signer's address from a hash and a signature.\n     * @param hash The keccak256 hash of the signed data.\n     * @param signature The full signature from which the signer will be recovered.\n     * @return signer The address of the signer.\n     */\n    /// @dev WARNING!!!\n    /// There is a known signature malleability issue with two representations of signatures!\n    /// Even though this function is able to verify both standard 65-byte and compact 64-byte EIP-2098 signatures\n    /// one should never use raw signatures for any kind of invalidation logic in their code.\n    /// As the standard and compact representations are interchangeable any invalidation logic that relies on\n    /// signature uniqueness will get rekt.\n    /// More info: https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-4h98-2769-gh6h\n    function recover(bytes32 hash, bytes calldata signature) internal view returns (address signer) {\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let ptr := mload(0x40)\n\n            // memory[ptr:ptr+0x80] = (hash, v, r, s)\n            switch signature.length\n            case 65 {\n                // memory[ptr+0x20:ptr+0x80] = (v, r, s)\n                mstore(add(ptr, 0x20), byte(0, calldataload(add(signature.offset, 0x40))))\n                calldatacopy(add(ptr, 0x40), signature.offset, 0x40)\n            }\n            case 64 {\n                // memory[ptr+0x20:ptr+0x80] = (v, r, s)\n                let vs := calldataload(add(signature.offset, 0x20))\n                mstore(add(ptr, 0x20), add(27, shr(_COMPACT_V_SHIFT, vs)))\n                calldatacopy(add(ptr, 0x40), signature.offset, 0x20)\n                mstore(add(ptr, 0x60), and(vs, _COMPACT_S_MASK))\n            }\n            default {\n                ptr := 0\n            }\n\n            if ptr {\n                if lt(mload(add(ptr, 0x60)), _S_BOUNDARY) {\n                    // memory[ptr:ptr+0x20] = (hash)\n                    mstore(ptr, hash)\n\n                    mstore(0, 0)\n                    pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\n                    signer := mload(0)\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Verifies the signature for a hash, either by recovering the signer or using EIP-1271's `isValidSignature` function.\n     * @dev Attempts to recover the signer's address from the signature; if the address is non-zero, checks if it's valid according to EIP-1271.\n     * @param signer The address to validate the signature against.\n     * @param hash The hash of the signed data.\n     * @param signature The signature to verify.\n     * @return success True if the signature is verified, false otherwise.\n     */\n    function recoverOrIsValidSignature(\n        address signer,\n        bytes32 hash,\n        bytes calldata signature\n    ) internal view returns (bool success) {\n        if (signer == address(0)) return false;\n        if ((signature.length == 64 || signature.length == 65) && recover(hash, signature) == signer) {\n            return true;\n        }\n        return isValidSignature(signer, hash, signature);\n    }\n\n    /**\n     * @notice Verifies the signature for a hash, either by recovering the signer or using EIP-1271's `isValidSignature` function.\n     * @dev Attempts to recover the signer's address from the signature; if the address is non-zero, checks if it's valid according to EIP-1271.\n     * @param signer The address to validate the signature against.\n     * @param hash The hash of the signed data.\n     * @param v The recovery byte of the signature.\n     * @param r The first 32 bytes of the signature.\n     * @param s The second 32 bytes of the signature.\n     * @return success True if the signature is verified, false otherwise.\n     */\n    function recoverOrIsValidSignature(\n        address signer,\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal view returns (bool success) {\n        if (signer == address(0)) return false;\n        if (recover(hash, v, r, s) == signer) {\n            return true;\n        }\n        return isValidSignature(signer, hash, v, r, s);\n    }\n\n    /**\n     * @notice Verifies the signature for a hash, either by recovering the signer or using EIP-1271's `isValidSignature` function.\n     * @dev Attempts to recover the signer's address from the signature; if the address is non-zero, checks if it's valid according to EIP-1271.\n     * @param signer The address to validate the signature against.\n     * @param hash The hash of the signed data.\n     * @param r The first 32 bytes of the signature.\n     * @param vs The combined `v` and `s` values of the signature.\n     * @return success True if the signature is verified, false otherwise.\n     */\n    function recoverOrIsValidSignature(\n        address signer,\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal view returns (bool success) {\n        if (signer == address(0)) return false;\n        if (recover(hash, r, vs) == signer) {\n            return true;\n        }\n        return isValidSignature(signer, hash, r, vs);\n    }\n\n    /**\n     * @notice Verifies the signature for a given hash, attempting to recover the signer's address or validates it using EIP-1271 for 65-byte signatures.\n     * @dev Attempts to recover the signer's address from the signature. If the address is a contract, checks if the signature is valid according to EIP-1271.\n     * @param signer The expected signer's address.\n     * @param hash The keccak256 hash of the signed data.\n     * @param r The first 32 bytes of the signature.\n     * @param vs The last 32 bytes of the signature, with the last byte being the recovery id.\n     * @return success True if the signature is valid, false otherwise.\n     */\n    function recoverOrIsValidSignature65(\n        address signer,\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal view returns (bool success) {\n        if (signer == address(0)) return false;\n        if (recover(hash, r, vs) == signer) {\n            return true;\n        }\n        return isValidSignature65(signer, hash, r, vs);\n    }\n\n    /**\n     * @notice Validates a signature for a hash using EIP-1271, if `signer` is a contract.\n     * @dev Makes a static call to `signer` with `isValidSignature` function selector from EIP-1271.\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\n     * @param hash The hash of the signed data.\n     * @param signature The signature to validate.\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\n     */\n    function isValidSignature(\n        address signer,\n        bytes32 hash,\n        bytes calldata signature\n    ) internal view returns (bool success) {\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature));\n        // return success && data.length == 32 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\n        bytes4 selector = IERC1271.isValidSignature.selector;\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let ptr := mload(0x40)\n\n            mstore(ptr, selector)\n            mstore(add(ptr, 0x04), hash)\n            mstore(add(ptr, 0x24), 0x40)\n            mstore(add(ptr, 0x44), signature.length)\n            calldatacopy(add(ptr, 0x64), signature.offset, signature.length)\n            if staticcall(gas(), signer, ptr, add(0x64, signature.length), 0, 0x20) {\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\n            }\n        }\n    }\n\n    /**\n     * @notice Validates a signature for a hash using EIP-1271, if `signer` is a contract.\n     * @dev Makes a static call to `signer` with `isValidSignature` function selector from EIP-1271.\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\n     * @param hash The hash of the signed data.\n     * @param v The recovery byte of the signature.\n     * @param r The first 32 bytes of the signature.\n     * @param s The second 32 bytes of the signature.\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\n     */\n    function isValidSignature(\n        address signer,\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal view returns (bool success) {\n        bytes4 selector = IERC1271.isValidSignature.selector;\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let ptr := mload(0x40)\n\n            mstore(ptr, selector)\n            mstore(add(ptr, 0x04), hash)\n            mstore(add(ptr, 0x24), 0x40)\n            mstore(add(ptr, 0x44), 65)\n            mstore(add(ptr, 0x64), r)\n            mstore(add(ptr, 0x84), s)\n            mstore8(add(ptr, 0xa4), v)\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\n            }\n        }\n    }\n\n    /**\n     * @notice Validates a signature for a hash using EIP-1271, if `signer` is a contract.\n     * @dev Makes a static call to `signer` with `isValidSignature` function selector from EIP-1271.\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\n     * @param hash The hash of the signed data.\n     * @param r The first 32 bytes of the signature.\n     * @param vs The last 32 bytes of the signature, with the last byte being the recovery id.\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\n     */\n    function isValidSignature(\n        address signer,\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal view returns (bool success) {\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, abi.encodePacked(r, vs)));\n        // return success && data.length == 32 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\n        bytes4 selector = IERC1271.isValidSignature.selector;\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let ptr := mload(0x40)\n\n            mstore(ptr, selector)\n            mstore(add(ptr, 0x04), hash)\n            mstore(add(ptr, 0x24), 0x40)\n            mstore(add(ptr, 0x44), 64)\n            mstore(add(ptr, 0x64), r)\n            mstore(add(ptr, 0x84), vs)\n            if staticcall(gas(), signer, ptr, 0xa4, 0, 0x20) {\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\n            }\n        }\n    }\n\n    /**\n     * @notice Verifies if a 65-byte signature is valid for a given hash, according to EIP-1271.\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\n     * @param hash The hash of the signed data.\n     * @param r The first 32 bytes of the signature.\n     * @param vs The combined `v` (recovery id) and `s` component of the signature, packed into the last 32 bytes.\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\n     */\n    function isValidSignature65(\n        address signer,\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal view returns (bool success) {\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, abi.encodePacked(r, vs & ~uint256(1 << 255), uint8(vs >> 255))));\n        // return success && data.length == 32 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\n        bytes4 selector = IERC1271.isValidSignature.selector;\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let ptr := mload(0x40)\n\n            mstore(ptr, selector)\n            mstore(add(ptr, 0x04), hash)\n            mstore(add(ptr, 0x24), 0x40)\n            mstore(add(ptr, 0x44), 65)\n            mstore(add(ptr, 0x64), r)\n            mstore(add(ptr, 0x84), and(vs, _COMPACT_S_MASK))\n            mstore8(add(ptr, 0xa4), add(27, shr(_COMPACT_V_SHIFT, vs)))\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a hash compatible with Ethereum's signed message format.\n     * @dev Prepends the hash with Ethereum's message prefix before hashing it.\n     * @param hash The hash of the data to sign.\n     * @return res The Ethereum signed message hash.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 res) {\n        // 32 is the length in bytes of hash, enforced by the type signature above\n        // return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            mstore(0, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000) // \"\\x19Ethereum Signed Message:\\n32\"\n            mstore(28, hash)\n            res := keccak256(0, 60)\n        }\n    }\n\n    /**\n     * @notice Generates an EIP-712 compliant hash.\n     * @dev Encodes the domain separator and the struct hash according to EIP-712.\n     * @param domainSeparator The EIP-712 domain separator.\n     * @param structHash The EIP-712 struct hash.\n     * @return res The EIP-712 compliant hash.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 res) {\n        // return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n        assembly (\"memory-safe\") { // solhint-disable-line no-inline-assembly\n            let ptr := mload(0x40)\n            mstore(ptr, 0x1901000000000000000000000000000000000000000000000000000000000000) // \"\\x19\\x01\"\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            res := keccak256(ptr, 66)\n        }\n    }\n}"
			},
			"contracts/EthReceiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title EthReceiver\n * @dev Abstract contract for rejecting direct ETH transfers from EOAs.\n * Implements a custom error and logic to reject ETH deposits from non-contract addresses.\n */\nabstract contract EthReceiver {\n    /// @dev Error thrown when an ETH deposit from an EOA is attempted.\n    error EthDepositRejected();\n\n    /// @dev External payable function to receive ETH, automatically rejects deposits from EOAs.\n    receive() external payable {\n        _receive();\n    }\n\n    /**\n     * @dev Internal function containing the logic to reject ETH deposits.\n     * Can be overridden by derived contracts for specific behaviors while maintaining the base rejection mechanism.\n     */\n    function _receive() internal virtual {\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin) revert EthDepositRejected();\n    }\n}"
			},
			"contracts/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./Math.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\nimport {SignedMath} from \"./SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    using SafeCast for *;\n\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev The string being parsed contains characters that are not in scope of the given base.\n     */\n    error StringsInvalidChar();\n\n    /**\n     * @dev The string being parsed is not a properly formatted address.\n     */\n    error StringsInvalidAddressFormat();\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            assembly (\"memory-safe\") {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                assembly (\"memory-safe\") {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n     * representation, according to EIP-55.\n     */\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\n        bytes memory buffer = bytes(toHexString(addr));\n\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\n        uint256 hashValue;\n        assembly (\"memory-safe\") {\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\n        }\n\n        for (uint256 i = 41; i > 1; --i) {\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\n                // case shift by xoring with 0x20\n                buffer[i] ^= 0x20;\n            }\n            hashValue >>= 4;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input) internal pure returns (uint256) {\n        return parseUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        uint256 result = 0;\n        for (uint256 i = begin; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 9) return (false, 0);\n            result *= 10;\n            result += chr;\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `int256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input) internal pure returns (int256) {\n        return parseInt(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\n        (bool success, int256 value) = tryParseInt(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n     * the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\n\n    /**\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character or if the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, int256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseIntUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseIntUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, int256 value) {\n        bytes memory buffer = bytes(input);\n\n        // Check presence of a negative sign.\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        bool positiveSign = sign == bytes1(\"+\");\n        bool negativeSign = sign == bytes1(\"-\");\n        uint256 offset = (positiveSign || negativeSign).toUint();\n\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\n\n        if (absSuccess && absValue < ABS_MIN_INT256) {\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\n            return (true, type(int256).min);\n        } else return (false, 0);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input) internal pure returns (uint256) {\n        return parseHexUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n     * invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseHexUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        // skip 0x prefix if present\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 offset = hasPrefix.toUint() * 2;\n\n        uint256 result = 0;\n        for (uint256 i = begin + offset; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 15) return (false, 0);\n            result *= 16;\n            unchecked {\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\n                result += chr;\n            }\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input) internal pure returns (address) {\n        return parseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\n        (bool success, address value) = tryParseAddress(input, begin, end);\n        if (!success) revert StringsInvalidAddressFormat();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n     * formatted address. See {parseAddress} requirements.\n     */\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\n        return tryParseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n     * formatted address. See {parseAddress} requirements.\n     */\n    function tryParseAddress(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, address value) {\n        if (end > bytes(input).length || begin > end) return (false, address(0));\n\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\n\n        // check that input is the correct length\n        if (end - begin == expectedLength) {\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\n            return (s, address(uint160(v)));\n        } else {\n            return (false, address(0));\n        }\n    }\n\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\n        uint8 value = uint8(chr);\n\n        // Try to parse `chr`:\n        // - Case 1: [0-9]\n        // - Case 2: [a-f]\n        // - Case 3: [A-F]\n        // - otherwise not supported\n        unchecked {\n            if (value > 47 && value < 58) value -= 48;\n            else if (value > 96 && value < 103) value -= 87;\n            else if (value > 64 && value < 71) value -= 55;\n            else return type(uint8).max;\n        }\n\n        return value;\n    }\n\n    /**\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\n     *\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n     * assembly block as such would prevent some optimizations.\n     */\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\n        assembly (\"memory-safe\") {\n            value := mload(add(buffer, add(0x20, offset)))\n        }\n    }\n}"
			},
			"contracts/SafeCast.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}"
			},
			"contracts/Panic.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}"
			},
			"contracts/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}"
			},
			"contracts/OffsetsLib.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ntype Offsets is uint256;\n\n/// @title OffsetsLib\n/// @dev A library for retrieving values by offsets from a concatenated calldata.\nlibrary OffsetsLib {\n\n    /// @dev Error to be thrown when the offset is out of bounds.\n    error OffsetOutOfBounds();\n\n    /**\n     * @notice Retrieves the field value calldata corresponding to the provided field index from the concatenated calldata.\n     * @dev \n     * The function performs the following steps:\n     * 1. Retrieve the start and end of the segment corresponding to the provided index from the offsets array.\n     * 2. Get the value from segment using offset and length calculated based on the start and end of the segment.\n     * 3. Throw `OffsetOutOfBounds` error if the length of the segment is greater than the length of the concatenated data.\n     * @param offsets The offsets encoding the start and end of each segment within the concatenated calldata.\n     * @param concat The concatenated calldata.\n     * @param index The index of the segment to retrieve. The field index 0 corresponds to the lowest bytes of the offsets array.\n     * @return result The calldata from a segment of the concatenated calldata corresponding to the provided index.\n     */\n    function get(Offsets offsets, bytes calldata concat, uint256 index) internal pure returns(bytes calldata result) {\n        bytes4 exception = OffsetOutOfBounds.selector;\n        assembly (\"memory-safe\") {  // solhint-disable-line no-inline-assembly\n            let bitShift := shl(5, index)                                   // bitShift = index * 32\n            let begin := and(0xffffffff, shr(bitShift, shl(32, offsets)))   // begin = offsets[ bitShift : bitShift + 32 ]\n            let end := and(0xffffffff, shr(bitShift, offsets))              // end   = offsets[ bitShift + 32 : bitShift + 64 ]\n            result.offset := add(concat.offset, begin)\n            result.length := sub(end, begin)\n            if gt(end, concat.length) {\n                mstore(0, exception)\n                revert(0, 4)\n            }\n        }\n    }\n}"
			},
			"contracts/IERC1271.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1271.sol)\n\npragma solidity >=0.5.0;\n\n/**\n * @dev Interface of the ERC-1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with `hash`\n     */\n    function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue);\n}"
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/AddressLib.sol": {
				"AddressLib": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212200b66fab8a5026a63a0b15f033e8dd4cd45dc3c312a4babf612f876c3816240e264736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND PUSH7 0xFAB8A5026A63A0 0xB1 PUSH0 SUB RETURNDATACOPY DUP14 0xD4 0xCD GASLIMIT 0xDC EXTCODECOPY BALANCE 0x2A 0x4B 0xAB 0xF6 SLT 0xF8 PUSH23 0xC3816240E264736F6C6343000817003300000000000000 ",
							"sourceMap": "229:1771:0:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212200b66fab8a5026a63a0b15f033e8dd4cd45dc3c312a4babf612f876c3816240e264736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND PUSH7 0xFAB8A5026A63A0 0xB1 PUSH0 SUB RETURNDATACOPY DUP14 0xD4 0xCD GASLIMIT 0xDC EXTCODECOPY BALANCE 0x2A 0x4B 0xAB 0xF6 SLT 0xF8 PUSH23 0xC3816240E264736F6C6343000817003300000000000000 ",
							"sourceMap": "229:1771:0:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"AddressLibLibrary for working with addresses encoded as uint256 values, which can include flags in the highest bits.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AddressLib.sol\":\"AddressLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/AddressLib.sol\":{\"keccak256\":\"0x5dbbd2513216eca9660b83e356b1b50d6dd5f854c0106be6bc7df3fff01821d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71c5a3b82d7cb1c060885ed6a11710fe216af832d30b6dd30d051635e6c4e586\",\"dweb:/ipfs/QmWYnTddAxLhKQq58wwya9NUkhudFoYamGZpcuHc6XdAMR\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "AddressLibLibrary for working with addresses encoded as uint256 values, which can include flags in the highest bits.",
						"version": 1
					}
				}
			},
			"contracts/AmountCalculatorLib.sol": {
				"AmountCalculatorLib": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "The helper library to calculate linearly taker amount from maker amount and vice versa.",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212208d0e6795d44cb89d6462bbc15d9f39fe72b3b22824672ce7d51142a11fe9231164736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 0xE PUSH8 0x95D44CB89D6462BB 0xC1 0x5D SWAP16 CODECOPY INVALID PUSH19 0xB3B22824672CE7D51142A11FE9231164736F6C PUSH4 0x43000817 STOP CALLER ",
							"sourceMap": "157:1061:1:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212208d0e6795d44cb89d6462bbc15d9f39fe72b3b22824672ce7d51142a11fe9231164736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 0xE PUSH8 0x95D44CB89D6462BB 0xC1 0x5D SWAP16 CODECOPY INVALID PUSH19 0xB3B22824672CE7D51142A11FE9231164736F6C PUSH4 0x43000817 STOP CALLER ",
							"sourceMap": "157:1061:1:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The helper library to calculate linearly taker amount from maker amount and vice versa.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AmountCalculatorLib.sol\":\"AmountCalculatorLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/AmountCalculatorLib.sol\":{\"keccak256\":\"0xb1fbc0d0951abce2e6d07b021ab03af781de5fa6b5002422d183ce81d9f2ef32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc4475dfc44f050aa4ee8b7335aa512a02669055639a0dbf267f81376a54cd89\",\"dweb:/ipfs/QmSVm5eyL8sPJGxc3oZmmZCeK5aonjr1M7qHUdtpAGHX4G\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/BitInvalidatorLib.sol": {
				"BitInvalidatorLib": {
					"abi": [
						{
							"inputs": [],
							"name": "BitInvalidatedOrder",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "The library provides a mechanism to invalidate objects based on a bit invalidator. The bit invalidator holds a mapping where each key represents a slot number and each value contains an integer. Each bit of the integer represents whether the object with corresponding index is valid or has been invalidated (0 - valid, 1 - invalidated). The nonce given to access or invalidate an entity's state follows this structure: - bits [0..7] represent the object state index in the slot. - bits [8..255] represent the slot number (mapping key).",
						"errors": {
							"BitInvalidatedOrder()": [
								{
									"details": "The error is thrown when an attempt is made to invalidate an already invalidated entity."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "BitInvalidatorLib",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220144097009b5ae7291613256388b3b51ee1442fff6a8e6b2ab759dc535687201b64736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ BLOCKHASH SWAP8 STOP SWAP12 GAS 0xE7 0x29 AND SGT 0x25 PUSH4 0x88B3B51E 0xE1 PREVRANDAO 0x2F SELFDESTRUCT PUSH11 0x8E6B2AB759DC535687201B PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "653:2280:2:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220144097009b5ae7291613256388b3b51ee1442fff6a8e6b2ab759dc535687201b64736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ BLOCKHASH SWAP8 STOP SWAP12 GAS 0xE7 0x29 AND SGT 0x25 PUSH4 0x88B3B51E 0xE1 PREVRANDAO 0x2F SELFDESTRUCT PUSH11 0x8E6B2AB759DC535687201B PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "653:2280:2:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BitInvalidatedOrder\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"The library provides a mechanism to invalidate objects based on a bit invalidator. The bit invalidator holds a mapping where each key represents a slot number and each value contains an integer. Each bit of the integer represents whether the object with corresponding index is valid or has been invalidated (0 - valid, 1 - invalidated). The nonce given to access or invalidate an entity's state follows this structure: - bits [0..7] represent the object state index in the slot. - bits [8..255] represent the slot number (mapping key).\",\"errors\":{\"BitInvalidatedOrder()\":[{\"details\":\"The error is thrown when an attempt is made to invalidate an already invalidated entity.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"BitInvalidatorLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BitInvalidatorLib.sol\":\"BitInvalidatorLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/BitInvalidatorLib.sol\":{\"keccak256\":\"0xd82e4b69af3f9883f6ac9560965a763a04f79e583b31b2f37982e24f44e25bcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ccf59b63d1721e65dcd41283a634874824689b2f7a02fd3f98d2fde03f07c2e4\",\"dweb:/ipfs/QmfA5ZSffvaaYCw5T8G11Bj3tGWcupx2ZBSJNZD6cDKrCq\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Context.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Context.sol\":{\"keccak256\":\"0x28ad9de5e26095f685a085591178af7aeac1427af1bf442986b5aee0a5b2a14a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad3864801aabbcc6f52361a1b86a3d4d342e283cc2036c47a3ef2df7e4a3c51\",\"dweb:/ipfs/QmezNWJGoPBwtHjsQae7dbqjeZgpbB2cHFE5nFBBzGvJFR\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/ECDSA.sol": {
				"ECDSA": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "ECDSA signature operations",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212209d28bba3840035bc4ef5bc62fb5bf836c44a1f28fcc5e1191cef98e1d05587c164736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 0x28 0xBB LOG3 DUP5 STOP CALLDATALOAD 0xBC 0x4E CREATE2 0xBC PUSH3 0xFB5BF8 CALLDATASIZE 0xC4 0x4A 0x1F 0x28 0xFC 0xC5 0xE1 NOT SHR 0xEF SWAP9 0xE1 0xD0 SSTORE DUP8 0xC1 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "277:17461:4:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212209d28bba3840035bc4ef5bc62fb5bf836c44a1f28fcc5e1191cef98e1d05587c164736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 0x28 0xBB LOG3 DUP5 STOP CALLDATALOAD 0xBC 0x4E CREATE2 0xBC PUSH3 0xFB5BF8 CALLDATASIZE 0xC4 0x4A 0x1F 0x28 0xFC 0xC5 0xE1 NOT SHR 0xEF SWAP9 0xE1 0xD0 SSTORE DUP8 0xC1 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "277:17461:4:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"ECDSA signature operations\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides functions for recovering addresses from signatures and verifying signatures, including support for EIP-2098 compact signatures.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ECDSA.sol\":{\"keccak256\":\"0xa6e29ba3b3f26b1d82b2f76c349038e314c4bcd7930ec8b2255022d8b684bd78\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f07a89f3ab957b78bab77074d61d0149d3b49ae1f9fa3b9b704cfdda974897ec\",\"dweb:/ipfs/QmbS9FUMWM1sDVin9R4A8ZG4Z4EukgNmUM59PnvzQ1Bhd3\"]},\"contracts/IERC1271.sol\":{\"keccak256\":\"0xa46ecff1d8a61c56161d3c1ec3cf10b62595bb8dc6bc2bd7ebb2eab2fda06c9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://443beef6470857f7c919bc98c6dc21bd2031742398e156cf29e8e873099d4f4f\",\"dweb:/ipfs/QmZfdVdBmJJi1z7mtjHTiaChPxxNHTjJrTwU3c9Br4GM4m\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Provides functions for recovering addresses from signatures and verifying signatures, including support for EIP-2098 compact signatures.",
						"version": 1
					}
				}
			},
			"contracts/EIP712.sol": {
				"EIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "state-variable-immutable",
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.",
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							},
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/EIP712.sol\":{\"keccak256\":\"0xb4c232fe0a8def0f88b00e6ebce12ab4813f0d642c328132b7c836c1922ce2b1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ae9d0cf798117e2bd4da0ddccf456866d3fc5ffa147cd4172f15af965aa561a7\",\"dweb:/ipfs/QmWmgX4Ug6XbaPTMV6U921Za9QvzYtoWa3kCTo1eX47moq\"]},\"contracts/IERC5267.sol\":{\"keccak256\":\"0xeb1cfabddcb4460c6145294ffebe6e15277f53923f488905ef0b18f8e4b7f1d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8419131499a0f3018b6596362238b47abe33e842798cc313494c6fd3081c1a63\",\"dweb:/ipfs/QmPRvMVqAteuCA1jzTUUz5AZLGuCTdVLF2x9Nw4nE1KiVS\"]},\"contracts/Math.sol\":{\"keccak256\":\"0x38c3845ac06436b72e265731c3546e21b2e792a800af0c355f2039ceb85cdbfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c63508dd9c15bf8155a8c248518310ad06b1d3f8d42082866fc8ecaa37f8dfda\",\"dweb:/ipfs/QmXiJyT5zGCgPWeLrF1g3fpvbjMkVQBt9MSq3fiA97VsTj\"]},\"contracts/MessageHashUtils.sol\":{\"keccak256\":\"0x8f285fdf7d54a65521a41ce2301f9be9727a5fe12e92e6c531255fb552f49450\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3ba231f35f2eff8d87c6a2a30a085844f9b94a4b568ad74777dc2a33d2849ba\",\"dweb:/ipfs/QmPs1ur6k3pkcHpbwh3aTR4tJsHctcY2Goze5VspFuRZfv\"]},\"contracts/Panic.sol\":{\"keccak256\":\"0xec0c46048fd01751aa22ecddb66df20b702374fd68f3f4b3ae363782f6b31f9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d32d9af31bc44235f769cf820ec96fd3f0aea9e16a169b244a62e34e482d7d55\",\"dweb:/ipfs/Qmd4Lw5sSLQtfE2vEy29RHzffinDsHgN1pGaS8Eex1F8ks\"]},\"contracts/SafeCast.sol\":{\"keccak256\":\"0x16949b29739a3a20cf5ffe9ca22830a9f9b6deff16ee925827b19ddb5fbc127a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://768190c98439f96d5cad1900cc96e24f0749172192be8b5de885c426750c6ecd\",\"dweb:/ipfs/QmWPmxri7eCbAXC7p3qJ14ckPTUDkdE3wuyiMoc1pat5ft\"]},\"contracts/ShortStrings.sol\":{\"keccak256\":\"0xbfad9b3a40cba77c2f86c308175ac65e06b10e76159d635b018171c67846da69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3b4406389834f36341fc1c87d4e8ab26d902a40b887a17689a238e5a97ef0b2\",\"dweb:/ipfs/QmQtUoQLw3NjKrAutrXqepURfrb4pvoZ6mXp4AcUuosH4D\"]},\"contracts/SignedMath.sol\":{\"keccak256\":\"0xc07e2a3d5f315dafaec45606b60414be49cc913bd11ea1b1d8ee460e72f37445\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d5f6ea2b532028ac1b221ce2e33bfbf71d2ef43b318db47c029ea7b1760d4df\",\"dweb:/ipfs/QmdxY44UJdhcgVZ7YCm6um4FKBU1PvL925KgefxD7onTRw\"]},\"contracts/StorageSlot.sol\":{\"keccak256\":\"0x2373cbbdccacc6777b2a7b459aa35b7629b0f7aa63566cd9afe45be9f256645c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4d674a1520bc8b6888ff3c5e663a45b5da00bc20ddc82e8351f6bc28d6f23db\",\"dweb:/ipfs/QmWG1RkHw5AtGdQZQpk4CZZc4HXp9bJVSf1xiR2yF9yAtP\"]},\"contracts/Strings.sol\":{\"keccak256\":\"0x250d60b0677654f4955e3cd43a8d9b41a8d7f2e6a8c222c28629c7c4abafa4f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8af0ca2b41a72909427f62226a438fc38e5c7b94057744d3a079da0a6973ff0d\",\"dweb:/ipfs/QmWUydSxPhJbJFqi8q6YvyxpUiMhGDSDDYxvubcSVjeuXG\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Errors.sol": {
				"Errors": {
					"abi": [
						{
							"inputs": [],
							"name": "ETHTransferFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMsgValue",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212203eeaf09d5ce5ed83d8807ee8eabc76358d595b0688d55ad1fd035d74c6da5dc764736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATACOPY 0xEA CREATE SWAP14 0x5C 0xE5 0xED DUP4 0xD8 DUP1 PUSH31 0xE8EABC76358D595B0688D55AD1FD035D74C6DA5DC764736F6C634300081700 CALLER ",
							"sourceMap": "58:78:6:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212203eeaf09d5ce5ed83d8807ee8eabc76358d595b0688d55ad1fd035d74c6da5dc764736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATACOPY 0xEA CREATE SWAP14 0x5C 0xE5 0xED DUP4 0xD8 DUP1 PUSH31 0xE8EABC76358D595B0688D55AD1FD035D74C6DA5DC764736F6C634300081700 CALLER ",
							"sourceMap": "58:78:6:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgValue\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Errors.sol\":\"Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Errors.sol\":{\"keccak256\":\"0x9809fef666ce40e434d4019d25e06c69e7ad2aad7de59966a426cdee8b5a467e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://160977820c842b4d417f26f113a42027001ed3d23e398560f3f41316f31a4705\",\"dweb:/ipfs/QmPdqyve3ryoj3Hw52SG59LBpLhw8jNff6otau6iUKyQJh\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/EthReceiver.sol": {
				"EthReceiver": {
					"abi": [
						{
							"inputs": [],
							"name": "EthDepositRejected",
							"type": "error"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"details": "Abstract contract for rejecting direct ETH transfers from EOAs. Implements a custom error and logic to reject ETH deposits from non-contract addresses.",
						"errors": {
							"EthDepositRejected()": [
								{
									"details": "Error thrown when an ETH deposit from an EOA is attempted."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "EthReceiver",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EthDepositRejected\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Abstract contract for rejecting direct ETH transfers from EOAs. Implements a custom error and logic to reject ETH deposits from non-contract addresses.\",\"errors\":{\"EthDepositRejected()\":[{\"details\":\"Error thrown when an ETH deposit from an EOA is attempted.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"EthReceiver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EthReceiver.sol\":\"EthReceiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/EthReceiver.sol\":{\"keccak256\":\"0x7fbf52c64fd6e03b2f5d977aac7d2b377fc240495d09e47642dc4ef301d173c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8dfcabf097c3a4e0819d387acc40b135aa9d59320971c2d648e399f77fedd7fc\",\"dweb:/ipfs/QmQreuBPfDUkauL9FTFY9dLe7vGyLsQoDA5DHZrA1u9SZS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/ExtensionLib.sol": {
				"ExtensionLib": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "ExtensionLib",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212202c793b7ef13fa54ad2c2bd198e7fb9b830b62acc1b54034bd1df29878695991364736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2C PUSH26 0x3B7EF13FA54AD2C2BD198E7FB9B830B62ACC1B54034BD1DF2987 DUP7 SWAP6 SWAP10 SGT PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "233:5187:8:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212202c793b7ef13fa54ad2c2bd198e7fb9b830b62acc1b54034bd1df29878695991364736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2C PUSH26 0x3B7EF13FA54AD2C2BD198E7FB9B830B62ACC1B54034BD1DF2987 DUP7 SWAP6 SWAP10 SGT PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "233:5187:8:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"ExtensionLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for retrieving extensions information for the IOrderMixin Interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExtensionLib.sol\":\"ExtensionLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/AddressLib.sol\":{\"keccak256\":\"0x5dbbd2513216eca9660b83e356b1b50d6dd5f854c0106be6bc7df3fff01821d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71c5a3b82d7cb1c060885ed6a11710fe216af832d30b6dd30d051635e6c4e586\",\"dweb:/ipfs/QmWYnTddAxLhKQq58wwya9NUkhudFoYamGZpcuHc6XdAMR\"]},\"contracts/ExtensionLib.sol\":{\"keccak256\":\"0x054ca2ebc73bc4dd62816bd9a3d384b89454e5e65d9d83c66637c578789d96ca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9dc6a0163be726abd9732ac63c31f2b99a8f9505ae6280e9d2fa13150990d113\",\"dweb:/ipfs/Qmd6CCRPTWE13WPEMTZZqisDkMQXdWm99P5N66CcT4uGaj\"]},\"contracts/IOrderMixin.sol\":{\"keccak256\":\"0x34ead0b58bd2640652ad6366b4c4ea1370b66d2dd21ffb5d5b831ed54fc9cc71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65b82f8298ed8d9cb9eb3604af3c15129cffa009c5b0150f7f42154093d9ce96\",\"dweb:/ipfs/QmaQoQNVTiJPKB6MVwtemAWrwyKEKR5fLqy7vyfm8oqBEx\"]},\"contracts/MakerTraitsLib.sol\":{\"keccak256\":\"0x2077d7a827c3ba2fa53c92b87bc586385c1310c3fe67edffe09c31a22900cbf9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49f7294dcb82d3acd8b7e2f95546cc85e24ceb7e3564a21ebf852544887cda3b\",\"dweb:/ipfs/QmPgzEiFpUHmGYfXF4EEdpCnb9TPnCpoF48bNMGw74vk1b\"]},\"contracts/OffsetsLib.sol\":{\"keccak256\":\"0xd8218c3b9241501b41fc0f0b579dce00a0b81603582e11f3da28881ed00801a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://039b36fea4d1d12fe0d02ac26bdefd959c6fe447bd73ea0599a49e08f1712999\",\"dweb:/ipfs/QmcyPNSDc2RjksmwYPY3jGAjD9bEhBAWi3qKYWNvtHHZT6\"]},\"contracts/TakerTraitsLib.sol\":{\"keccak256\":\"0x25d36a3b3645561fc5b3f35c1e93fe60220bd15f9af896b0c6263a3269710fcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45597b42af6b436271ac8e6577255137557ff72d45883ef4bce01198016d4bb5\",\"dweb:/ipfs/QmamEQ6c5ffZqanpuX52PUf88wPu6Gp4T8LCVVzonAo1uS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Library for retrieving extensions information for the IOrderMixin Interface.",
						"version": 1
					}
				}
			},
			"contracts/IAmountGetter.sol": {
				"IAmountGetter": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "extension",
									"type": "bytes"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "taker",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "takingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "remainingMakingAmount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "extraData",
									"type": "bytes"
								}
							],
							"name": "getMakingAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "extension",
									"type": "bytes"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "taker",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "makingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "remainingMakingAmount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "extraData",
									"type": "bytes"
								}
							],
							"name": "getTakingAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"getMakingAmount((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,bytes)": {
								"params": {
									"extension": "Order extension data",
									"extraData": "Extra data",
									"order": "Order being processed",
									"orderHash": "Hash of the order being processed",
									"remainingMakingAmount": "Order remaining making amount",
									"taker": "Taker address",
									"takingAmount": "Actual taking amount"
								},
								"returns": {
									"_0": "makingAmount Actual making amount that should be used for the order"
								}
							},
							"getTakingAmount((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,bytes)": {
								"params": {
									"extension": "Order extension data",
									"extraData": "Extra data",
									"makingAmount": "Actual taking amount",
									"order": "Order being processed",
									"orderHash": "Hash of the order being processed",
									"remainingMakingAmount": "Order remaining making amount",
									"taker": "Taker address"
								},
								"returns": {
									"_0": "takingAmount Actual taking amount that should be used for the order"
								}
							}
						},
						"title": "IAmountGetter",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extension\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getMakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extension\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getTakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getMakingAmount((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,bytes)\":{\"params\":{\"extension\":\"Order extension data\",\"extraData\":\"Extra data\",\"order\":\"Order being processed\",\"orderHash\":\"Hash of the order being processed\",\"remainingMakingAmount\":\"Order remaining making amount\",\"taker\":\"Taker address\",\"takingAmount\":\"Actual taking amount\"},\"returns\":{\"_0\":\"makingAmount Actual making amount that should be used for the order\"}},\"getTakingAmount((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,bytes)\":{\"params\":{\"extension\":\"Order extension data\",\"extraData\":\"Extra data\",\"makingAmount\":\"Actual taking amount\",\"order\":\"Order being processed\",\"orderHash\":\"Hash of the order being processed\",\"remainingMakingAmount\":\"Order remaining making amount\",\"taker\":\"Taker address\"},\"returns\":{\"_0\":\"takingAmount Actual taking amount that should be used for the order\"}}},\"title\":\"IAmountGetter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getMakingAmount((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,bytes)\":{\"notice\":\"View method that gets called to determine the actual making amount\"},\"getTakingAmount((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,bytes)\":{\"notice\":\"View method that gets called to determine the actual taking amount\"}},\"notice\":\"Interface for external logic to determine actual making and taking amounts for orders.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IAmountGetter.sol\":\"IAmountGetter\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/AddressLib.sol\":{\"keccak256\":\"0x5dbbd2513216eca9660b83e356b1b50d6dd5f854c0106be6bc7df3fff01821d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71c5a3b82d7cb1c060885ed6a11710fe216af832d30b6dd30d051635e6c4e586\",\"dweb:/ipfs/QmWYnTddAxLhKQq58wwya9NUkhudFoYamGZpcuHc6XdAMR\"]},\"contracts/IAmountGetter.sol\":{\"keccak256\":\"0x877aa31c7903e60289a1ba750e583113b1f317a9dfaeefcbf7fd19b4c62dbd98\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7bbeceff66893fba29928459f2afa4546d19aaacdc3e6450ca51fb216874a86\",\"dweb:/ipfs/QmYny4mRyuGRoRGNmoqYnpU6um3KhoTmfWs1xvLnLLEs3f\"]},\"contracts/IOrderMixin.sol\":{\"keccak256\":\"0x34ead0b58bd2640652ad6366b4c4ea1370b66d2dd21ffb5d5b831ed54fc9cc71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65b82f8298ed8d9cb9eb3604af3c15129cffa009c5b0150f7f42154093d9ce96\",\"dweb:/ipfs/QmaQoQNVTiJPKB6MVwtemAWrwyKEKR5fLqy7vyfm8oqBEx\"]},\"contracts/MakerTraitsLib.sol\":{\"keccak256\":\"0x2077d7a827c3ba2fa53c92b87bc586385c1310c3fe67edffe09c31a22900cbf9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49f7294dcb82d3acd8b7e2f95546cc85e24ceb7e3564a21ebf852544887cda3b\",\"dweb:/ipfs/QmPgzEiFpUHmGYfXF4EEdpCnb9TPnCpoF48bNMGw74vk1b\"]},\"contracts/TakerTraitsLib.sol\":{\"keccak256\":\"0x25d36a3b3645561fc5b3f35c1e93fe60220bd15f9af896b0c6263a3269710fcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45597b42af6b436271ac8e6577255137557ff72d45883ef4bce01198016d4bb5\",\"dweb:/ipfs/QmamEQ6c5ffZqanpuX52PUf88wPu6Gp4T8LCVVzonAo1uS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"getMakingAmount((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,bytes)": {
								"notice": "View method that gets called to determine the actual making amount"
							},
							"getTakingAmount((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,bytes)": {
								"notice": "View method that gets called to determine the actual taking amount"
							}
						},
						"notice": "Interface for external logic to determine actual making and taking amounts for orders.",
						"version": 1
					}
				}
			},
			"contracts/IDaiLikePermit.sol": {
				"IDaiLikePermit": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "holder",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "allowed",
									"type": "bool"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for Dai-like permit function allowing token spending via signatures.",
						"kind": "dev",
						"methods": {
							"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": {
								"params": {
									"allowed": "True to allow, false to disallow spending.",
									"expiry": "Time when the permit expires.",
									"holder": "Token holder's address.",
									"nonce": "Current nonce of the holder.",
									"spender": "Spender's address.",
									"v": ", r, s Signature components."
								}
							}
						},
						"title": "IDaiLikePermit",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for Dai-like permit function allowing token spending via signatures.\",\"kind\":\"dev\",\"methods\":{\"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)\":{\"params\":{\"allowed\":\"True to allow, false to disallow spending.\",\"expiry\":\"Time when the permit expires.\",\"holder\":\"Token holder's address.\",\"nonce\":\"Current nonce of the holder.\",\"spender\":\"Spender's address.\",\"v\":\", r, s Signature components.\"}}},\"title\":\"IDaiLikePermit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)\":{\"notice\":\"Approves spending of tokens via off-chain signatures.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDaiLikePermit.sol\":\"IDaiLikePermit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/IDaiLikePermit.sol\":{\"keccak256\":\"0x0bcc9c886acb32f5664e3bfd0640e6fc1de6525b8f6103f25906d040d054ce07\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://551e3b7d18d5e83727491f6749643a9a1e9a2e253a1a9be56eeb44e4c1b13876\",\"dweb:/ipfs/QmSpGRSD3DDP1EbBbXDPqAbSP58roEvCsosMQCDtSDnEBa\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": {
								"notice": "Approves spending of tokens via off-chain signatures."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/IERC1271.sol": {
				"IERC1271": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "hash",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "isValidSignature",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "magicValue",
									"type": "bytes4"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-1271 standard signature validation method for contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].",
						"kind": "dev",
						"methods": {
							"isValidSignature(bytes32,bytes)": {
								"details": "Should return whether the signature provided is valid for the provided data",
								"params": {
									"hash": "Hash of the data to be signed",
									"signature": "Signature byte array associated with `hash`"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1271 standard signature validation method for contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\",\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with `hash`\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC1271.sol\":\"IERC1271\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/IERC1271.sol\":{\"keccak256\":\"0xa46ecff1d8a61c56161d3c1ec3cf10b62595bb8dc6bc2bd7ebb2eab2fda06c9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://443beef6470857f7c919bc98c6dc21bd2031742398e156cf29e8e873099d4f4f\",\"dweb:/ipfs/QmZfdVdBmJJi1z7mtjHTiaChPxxNHTjJrTwU3c9Br4GM4m\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/IERC20.sol\":{\"keccak256\":\"0x91104f4bcc877f2506e4485b871efe0a6beb5c1ef7de9c374d99d75289905905\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57a7ecbec5ff542c117d36c7487386b5653ad21d0a83414e859d4202e069b36f\",\"dweb:/ipfs/QmaPocSUaysdjd1Ksa5kttxRHxhA7XWd6HrQ9teLFRyR6W\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/IERC20Permit.sol\":{\"keccak256\":\"0x08d82b52e80c1a83f792c519388ca1ae86ae441bdfbd7d84addc82ef9c499a9e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a5449dde3b5541f3f653b352bfa0aa4f3e91ab24a110106319baa83940f540a5\",\"dweb:/ipfs/QmUuadcLdSPtqMuuhBgkdAZHrE3tx5rdQ7HCXCsa8RDaTU\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/IERC5267.sol": {
				"IERC5267": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/IERC5267.sol\":{\"keccak256\":\"0xeb1cfabddcb4460c6145294ffebe6e15277f53923f488905ef0b18f8e4b7f1d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8419131499a0f3018b6596362238b47abe33e842798cc313494c6fd3081c1a63\",\"dweb:/ipfs/QmPRvMVqAteuCA1jzTUUz5AZLGuCTdVLF2x9Nw4nE1KiVS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/IERC7597Permit.sol": {
				"IERC7597Permit": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "A new extension for ERC-2612 permit, which has already been added to USDC v2.2.",
						"kind": "dev",
						"methods": {
							"permit(address,address,uint256,uint256,bytes)": {
								"details": "Signature bytes can be used for both EOA wallets and contract wallets.",
								"params": {
									"deadline": "The time at which the signature expires (unixtime).",
									"owner": "Token owner's address (Authorizer).",
									"signature": "Unstructured bytes signature signed by an EOA wallet or a contract wallet.",
									"spender": "Spender's address.",
									"value": "Amount of allowance."
								}
							}
						},
						"title": "IERC7597Permit",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A new extension for ERC-2612 permit, which has already been added to USDC v2.2.\",\"kind\":\"dev\",\"methods\":{\"permit(address,address,uint256,uint256,bytes)\":{\"details\":\"Signature bytes can be used for both EOA wallets and contract wallets.\",\"params\":{\"deadline\":\"The time at which the signature expires (unixtime).\",\"owner\":\"Token owner's address (Authorizer).\",\"signature\":\"Unstructured bytes signature signed by an EOA wallet or a contract wallet.\",\"spender\":\"Spender's address.\",\"value\":\"Amount of allowance.\"}}},\"title\":\"IERC7597Permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,bytes)\":{\"notice\":\"Update allowance with a signed permit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC7597Permit.sol\":\"IERC7597Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/IERC7597Permit.sol\":{\"keccak256\":\"0x550ff037524afe9ef46d2c54ed59f4048c4216122e80da3b17872e05c163a74e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40df00df81d4a4d2a78105bf5b86694037d885abf30e1e47e286b6e3310bdf48\",\"dweb:/ipfs/QmVqmS8BpSMV8PeiUme1tNDq48zfn71XYxWhb6fLtxCT6f\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"permit(address,address,uint256,uint256,bytes)": {
								"notice": "Update allowance with a signed permit."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/IOrderMixin.sol": {
				"IOrderMixin": {
					"abi": [
						{
							"inputs": [],
							"name": "BadSignature",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EpochManagerAndBitInvalidatorsAreIncompatible",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidPermit2Transfer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidatedOrder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MakingAmountTooLow",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MismatchArraysLengths",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OrderExpired",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OrderIsNotSuitableForMassInvalidation",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "PartialFillNotAllowed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "PredicateIsNotTrue",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "PrivateOrder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ReentrancyDetected",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "res",
									"type": "bytes"
								}
							],
							"name": "SimulationResults",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SwapWithZeroAmount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TakingAmountExceeded",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TakingAmountTooHigh",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromMakerToTakerFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromTakerToMakerFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "WrongSeriesNonce",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotIndex",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotValue",
									"type": "uint256"
								}
							],
							"name": "BitInvalidatorUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"name": "OrderCancelled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "remainingAmount",
									"type": "uint256"
								}
							],
							"name": "OrderFilled",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slot",
									"type": "uint256"
								}
							],
							"name": "bitInvalidatorForOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "result",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "MakerTraits",
									"name": "makerTraits",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "additionalMask",
									"type": "uint256"
								}
							],
							"name": "bitsInvalidateForOrder",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "MakerTraits",
									"name": "makerTraits",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"name": "cancelOrder",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "MakerTraits[]",
									"name": "makerTraits",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes32[]",
									"name": "orderHashes",
									"type": "bytes32[]"
								}
							],
							"name": "cancelOrders",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "TakerTraits",
									"name": "takerTraits",
									"type": "uint256"
								}
							],
							"name": "fillContractOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "makingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "takingAmount",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "TakerTraits",
									"name": "takerTraits",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "args",
									"type": "bytes"
								}
							],
							"name": "fillContractOrderArgs",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "makingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "takingAmount",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "vs",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "TakerTraits",
									"name": "takerTraits",
									"type": "uint256"
								}
							],
							"name": "fillOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "makingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "takingAmount",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "vs",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "TakerTraits",
									"name": "takerTraits",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "args",
									"type": "bytes"
								}
							],
							"name": "fillOrderArgs",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "makingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "takingAmount",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								}
							],
							"name": "hashOrder",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"name": "rawRemainingInvalidatorForOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "remainingRaw",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"name": "remainingInvalidatorForOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "remaining",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "simulate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"BitInvalidatorUpdated(address,uint256,uint256)": {
								"params": {
									"maker": "Maker address",
									"slotIndex": "Slot index that was updated",
									"slotValue": "New slot value"
								}
							},
							"OrderCancelled(bytes32)": {
								"params": {
									"orderHash": "Hash of the order"
								}
							},
							"OrderFilled(bytes32,uint256)": {
								"params": {
									"orderHash": "Hash of the order",
									"remainingAmount": "Amount of the maker asset that remains to be filled"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"bitInvalidatorForOrder(address,uint256)": {
								"params": {
									"maker": "Maker address",
									"slot": "Slot number to return bitmask for"
								},
								"returns": {
									"result": "Each bit represents whether corresponding was already invalidated"
								}
							},
							"bitsInvalidateForOrder(uint256,uint256)": {
								"params": {
									"additionalMask": "Additional bitmask to invalidate orders",
									"makerTraits": "Order makerTraits"
								}
							},
							"cancelOrder(uint256,bytes32)": {
								"params": {
									"makerTraits": "Order makerTraits",
									"orderHash": "Hash of the order to cancel"
								}
							},
							"cancelOrders(uint256[],bytes32[])": {
								"params": {
									"makerTraits": "Orders makerTraits",
									"orderHashes": "Hashes of the orders to cancel"
								}
							},
							"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)": {
								"details": "See tests for examples",
								"params": {
									"amount": "Taker amount to fill",
									"order": "Order quote to fill",
									"signature": "Signature to confirm quote ownership",
									"takerTraits": "Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit."
								},
								"returns": {
									"makingAmount": "Actual amount transferred from maker to taker",
									"orderHash": "Hash of the filled order",
									"takingAmount": "Actual amount transferred from taker to maker"
								}
							},
							"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)": {
								"details": "See tests for examples",
								"params": {
									"amount": "Taker amount to fill",
									"args": "Arguments that are used by the taker (target, extension, interaction, permit)",
									"order": "Order quote to fill",
									"signature": "Signature to confirm quote ownership",
									"takerTraits": "Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit."
								},
								"returns": {
									"makingAmount": "Actual amount transferred from maker to taker",
									"orderHash": "Hash of the filled order",
									"takingAmount": "Actual amount transferred from taker to maker"
								}
							},
							"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)": {
								"params": {
									"amount": "Taker amount to fill",
									"order": "Order quote to fill",
									"r": "R component of signature",
									"takerTraits": "Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.",
									"vs": "VS component of signature"
								},
								"returns": {
									"makingAmount": "Actual amount transferred from maker to taker",
									"orderHash": "Hash of the filled order",
									"takingAmount": "Actual amount transferred from taker to maker"
								}
							},
							"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)": {
								"params": {
									"amount": "Taker amount to fill",
									"args": "Arguments that are used by the taker (target, extension, interaction, permit)",
									"order": "Order quote to fill",
									"r": "R component of signature",
									"takerTraits": "Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.",
									"vs": "VS component of signature"
								},
								"returns": {
									"makingAmount": "Actual amount transferred from maker to taker",
									"orderHash": "Hash of the filled order",
									"takingAmount": "Actual amount transferred from taker to maker"
								}
							},
							"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
								"params": {
									"order": "Order"
								},
								"returns": {
									"orderHash": "Hash of the order"
								}
							},
							"rawRemainingInvalidatorForOrder(address,bytes32)": {
								"params": {
									"orderHash": "Hash of the order"
								},
								"returns": {
									"remainingRaw": "Inverse of the remaining amount of the order if order was filled at least once, otherwise 0"
								}
							},
							"remainingInvalidatorForOrder(address,bytes32)": {
								"params": {
									"orderHash": "Hash of the order"
								},
								"returns": {
									"remaining": "Remaining amount of the order"
								}
							},
							"simulate(address,bytes)": {
								"details": "The function always reverts and returns the simulation results in revert data.",
								"params": {
									"data": "Data that will be passed to delegatee",
									"target": "Addresses that will be delegated"
								}
							}
						},
						"title": "IOrderMixin",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BadSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochManagerAndBitInvalidatorsAreIncompatible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPermit2Transfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidatedOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MakingAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchArraysLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderIsNotSuitableForMassInvalidation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PartialFillNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PredicateIsNotTrue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrivateOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyDetected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"name\":\"SimulationResults\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapWithZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakingAmountExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakingAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromMakerToTakerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromTakerToMakerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongSeriesNonce\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotValue\",\"type\":\"uint256\"}],\"name\":\"BitInvalidatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"bitInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalMask\",\"type\":\"uint256\"}],\"name\":\"bitsInvalidateForOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits[]\",\"name\":\"makerTraits\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"orderHashes\",\"type\":\"bytes32[]\"}],\"name\":\"cancelOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"}],\"name\":\"fillContractOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"fillContractOrderArgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"fillOrderArgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"rawRemainingInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"remainingInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"simulate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BitInvalidatorUpdated(address,uint256,uint256)\":{\"params\":{\"maker\":\"Maker address\",\"slotIndex\":\"Slot index that was updated\",\"slotValue\":\"New slot value\"}},\"OrderCancelled(bytes32)\":{\"params\":{\"orderHash\":\"Hash of the order\"}},\"OrderFilled(bytes32,uint256)\":{\"params\":{\"orderHash\":\"Hash of the order\",\"remainingAmount\":\"Amount of the maker asset that remains to be filled\"}}},\"kind\":\"dev\",\"methods\":{\"bitInvalidatorForOrder(address,uint256)\":{\"params\":{\"maker\":\"Maker address\",\"slot\":\"Slot number to return bitmask for\"},\"returns\":{\"result\":\"Each bit represents whether corresponding was already invalidated\"}},\"bitsInvalidateForOrder(uint256,uint256)\":{\"params\":{\"additionalMask\":\"Additional bitmask to invalidate orders\",\"makerTraits\":\"Order makerTraits\"}},\"cancelOrder(uint256,bytes32)\":{\"params\":{\"makerTraits\":\"Order makerTraits\",\"orderHash\":\"Hash of the order to cancel\"}},\"cancelOrders(uint256[],bytes32[])\":{\"params\":{\"makerTraits\":\"Orders makerTraits\",\"orderHashes\":\"Hashes of the orders to cancel\"}},\"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)\":{\"details\":\"See tests for examples\",\"params\":{\"amount\":\"Taker amount to fill\",\"order\":\"Order quote to fill\",\"signature\":\"Signature to confirm quote ownership\",\"takerTraits\":\"Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\"},\"returns\":{\"makingAmount\":\"Actual amount transferred from maker to taker\",\"orderHash\":\"Hash of the filled order\",\"takingAmount\":\"Actual amount transferred from taker to maker\"}},\"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)\":{\"details\":\"See tests for examples\",\"params\":{\"amount\":\"Taker amount to fill\",\"args\":\"Arguments that are used by the taker (target, extension, interaction, permit)\",\"order\":\"Order quote to fill\",\"signature\":\"Signature to confirm quote ownership\",\"takerTraits\":\"Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\"},\"returns\":{\"makingAmount\":\"Actual amount transferred from maker to taker\",\"orderHash\":\"Hash of the filled order\",\"takingAmount\":\"Actual amount transferred from taker to maker\"}},\"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)\":{\"params\":{\"amount\":\"Taker amount to fill\",\"order\":\"Order quote to fill\",\"r\":\"R component of signature\",\"takerTraits\":\"Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\",\"vs\":\"VS component of signature\"},\"returns\":{\"makingAmount\":\"Actual amount transferred from maker to taker\",\"orderHash\":\"Hash of the filled order\",\"takingAmount\":\"Actual amount transferred from taker to maker\"}},\"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"Taker amount to fill\",\"args\":\"Arguments that are used by the taker (target, extension, interaction, permit)\",\"order\":\"Order quote to fill\",\"r\":\"R component of signature\",\"takerTraits\":\"Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\",\"vs\":\"VS component of signature\"},\"returns\":{\"makingAmount\":\"Actual amount transferred from maker to taker\",\"orderHash\":\"Hash of the filled order\",\"takingAmount\":\"Actual amount transferred from taker to maker\"}},\"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"order\":\"Order\"},\"returns\":{\"orderHash\":\"Hash of the order\"}},\"rawRemainingInvalidatorForOrder(address,bytes32)\":{\"params\":{\"orderHash\":\"Hash of the order\"},\"returns\":{\"remainingRaw\":\"Inverse of the remaining amount of the order if order was filled at least once, otherwise 0\"}},\"remainingInvalidatorForOrder(address,bytes32)\":{\"params\":{\"orderHash\":\"Hash of the order\"},\"returns\":{\"remaining\":\"Remaining amount of the order\"}},\"simulate(address,bytes)\":{\"details\":\"The function always reverts and returns the simulation results in revert data.\",\"params\":{\"data\":\"Data that will be passed to delegatee\",\"target\":\"Addresses that will be delegated\"}}},\"title\":\"IOrderMixin\",\"version\":1},\"userdoc\":{\"events\":{\"BitInvalidatorUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when order with `useBitInvalidator` gets cancelled\"},\"OrderCancelled(bytes32)\":{\"notice\":\"Emitted when order without `useBitInvalidator` gets cancelled\"},\"OrderFilled(bytes32,uint256)\":{\"notice\":\"Emitted when order gets filled\"}},\"kind\":\"user\",\"methods\":{\"bitInvalidatorForOrder(address,uint256)\":{\"notice\":\"Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\"},\"bitsInvalidateForOrder(uint256,uint256)\":{\"notice\":\"Cancels all quotes of the maker (works for bit-invalidating orders only)\"},\"cancelOrder(uint256,bytes32)\":{\"notice\":\"Cancels order's quote\"},\"cancelOrders(uint256[],bytes32[])\":{\"notice\":\"Cancels orders' quotes\"},\"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)\":{\"notice\":\"Same as `fillOrder` but uses contract-based signatures.\"},\"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)\":{\"notice\":\"Same as `fillContractOrder` but allows to specify arguments that are used by the taker.\"},\"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Fills order's quote, fully or partially (whichever is possible).\"},\"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)\":{\"notice\":\"Same as `fillOrder` but allows to specify arguments that are used by the taker.\"},\"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Returns order hash, hashed with limit order protocol contract EIP712\"},\"rawRemainingInvalidatorForOrder(address,bytes32)\":{\"notice\":\"Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\"},\"remainingInvalidatorForOrder(address,bytes32)\":{\"notice\":\"Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\"},\"simulate(address,bytes)\":{\"notice\":\"Delegates execution to custom implementation. Could be used to validate if `transferFrom` works properly\"}},\"notice\":\"Interface for order processing logic in the 1inch Limit Order Protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IOrderMixin.sol\":\"IOrderMixin\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/AddressLib.sol\":{\"keccak256\":\"0x5dbbd2513216eca9660b83e356b1b50d6dd5f854c0106be6bc7df3fff01821d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71c5a3b82d7cb1c060885ed6a11710fe216af832d30b6dd30d051635e6c4e586\",\"dweb:/ipfs/QmWYnTddAxLhKQq58wwya9NUkhudFoYamGZpcuHc6XdAMR\"]},\"contracts/IOrderMixin.sol\":{\"keccak256\":\"0x34ead0b58bd2640652ad6366b4c4ea1370b66d2dd21ffb5d5b831ed54fc9cc71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65b82f8298ed8d9cb9eb3604af3c15129cffa009c5b0150f7f42154093d9ce96\",\"dweb:/ipfs/QmaQoQNVTiJPKB6MVwtemAWrwyKEKR5fLqy7vyfm8oqBEx\"]},\"contracts/MakerTraitsLib.sol\":{\"keccak256\":\"0x2077d7a827c3ba2fa53c92b87bc586385c1310c3fe67edffe09c31a22900cbf9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49f7294dcb82d3acd8b7e2f95546cc85e24ceb7e3564a21ebf852544887cda3b\",\"dweb:/ipfs/QmPgzEiFpUHmGYfXF4EEdpCnb9TPnCpoF48bNMGw74vk1b\"]},\"contracts/TakerTraitsLib.sol\":{\"keccak256\":\"0x25d36a3b3645561fc5b3f35c1e93fe60220bd15f9af896b0c6263a3269710fcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45597b42af6b436271ac8e6577255137557ff72d45883ef4bce01198016d4bb5\",\"dweb:/ipfs/QmamEQ6c5ffZqanpuX52PUf88wPu6Gp4T8LCVVzonAo1uS\"]}},\"version\":1}",
					"userdoc": {
						"events": {
							"BitInvalidatorUpdated(address,uint256,uint256)": {
								"notice": "Emitted when order with `useBitInvalidator` gets cancelled"
							},
							"OrderCancelled(bytes32)": {
								"notice": "Emitted when order without `useBitInvalidator` gets cancelled"
							},
							"OrderFilled(bytes32,uint256)": {
								"notice": "Emitted when order gets filled"
							}
						},
						"kind": "user",
						"methods": {
							"bitInvalidatorForOrder(address,uint256)": {
								"notice": "Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes"
							},
							"bitsInvalidateForOrder(uint256,uint256)": {
								"notice": "Cancels all quotes of the maker (works for bit-invalidating orders only)"
							},
							"cancelOrder(uint256,bytes32)": {
								"notice": "Cancels order's quote"
							},
							"cancelOrders(uint256[],bytes32[])": {
								"notice": "Cancels orders' quotes"
							},
							"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)": {
								"notice": "Same as `fillOrder` but uses contract-based signatures."
							},
							"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)": {
								"notice": "Same as `fillContractOrder` but allows to specify arguments that are used by the taker."
							},
							"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)": {
								"notice": "Fills order's quote, fully or partially (whichever is possible)."
							},
							"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)": {
								"notice": "Same as `fillOrder` but allows to specify arguments that are used by the taker."
							},
							"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "Returns order hash, hashed with limit order protocol contract EIP712"
							},
							"rawRemainingInvalidatorForOrder(address,bytes32)": {
								"notice": "Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes"
							},
							"remainingInvalidatorForOrder(address,bytes32)": {
								"notice": "Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes"
							},
							"simulate(address,bytes)": {
								"notice": "Delegates execution to custom implementation. Could be used to validate if `transferFrom` works properly"
							}
						},
						"notice": "Interface for order processing logic in the 1inch Limit Order Protocol.",
						"version": 1
					}
				}
			},
			"contracts/IPermit2.sol": {
				"IPermit2": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint160",
											"name": "amount",
											"type": "uint160"
										},
										{
											"internalType": "uint48",
											"name": "expiration",
											"type": "uint48"
										},
										{
											"internalType": "uint48",
											"name": "nonce",
											"type": "uint48"
										}
									],
									"internalType": "struct IPermit2.PackedAllowance",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IPermit2.PermitDetails",
											"name": "details",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IPermit2.PermitSingle",
									"name": "permitSingle",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for a flexible permit system that extends ERC20 tokens to support permits in tokens lacking native permit functionality.",
						"kind": "dev",
						"methods": {
							"allowance(address,address,address)": {
								"params": {
									"spender": "The spender's address.",
									"token": "The token address.",
									"user": "The token owner's address."
								},
								"returns": {
									"_0": "The packed allowance details."
								}
							},
							"approve(address,address,uint160,uint48)": {
								"details": "The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval",
								"params": {
									"amount": "The approved amount of the token",
									"expiration": "The timestamp at which the approval is no longer valid",
									"spender": "The spender address to approve",
									"token": "The token to approve"
								}
							},
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
								"params": {
									"owner": "The token owner's address.",
									"permitSingle": "Struct containing the permit details.",
									"signature": "The signature proving the owner authorized the permit."
								}
							},
							"transferFrom(address,address,uint160,address)": {
								"params": {
									"amount": "The amount of tokens to transfer.",
									"spender": "The address authorized to spend the tokens.",
									"token": "The address of the token being transferred.",
									"user": "The token owner's address."
								}
							}
						},
						"title": "IPermit2",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IPermit2.PackedAllowance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IPermit2.PermitDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitSingle\",\"name\":\"permitSingle\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for a flexible permit system that extends ERC20 tokens to support permits in tokens lacking native permit functionality.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"params\":{\"spender\":\"The spender's address.\",\"token\":\"The token address.\",\"user\":\"The token owner's address.\"},\"returns\":{\"_0\":\"The packed allowance details.\"}},\"approve(address,address,uint160,uint48)\":{\"details\":\"The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval\",\"params\":{\"amount\":\"The approved amount of the token\",\"expiration\":\"The timestamp at which the approval is no longer valid\",\"spender\":\"The spender address to approve\",\"token\":\"The token to approve\"}},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"params\":{\"owner\":\"The token owner's address.\",\"permitSingle\":\"Struct containing the permit details.\",\"signature\":\"The signature proving the owner authorized the permit.\"}},\"transferFrom(address,address,uint160,address)\":{\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"spender\":\"The address authorized to spend the tokens.\",\"token\":\"The address of the token being transferred.\",\"user\":\"The token owner's address.\"}}},\"title\":\"IPermit2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"Retrieves the allowance details between a token owner and spender.\"},\"approve(address,address,uint160,uint48)\":{\"notice\":\"Approves the spender to use up to amount of the specified token up until the expiration\"},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"notice\":\"Issues a permit for spending tokens via a signed authorization.\"},\"transferFrom(address,address,uint160,address)\":{\"notice\":\"Executes a token transfer from one address to another.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IPermit2.sol\":\"IPermit2\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/IPermit2.sol\":{\"keccak256\":\"0x79e985eddaf616078cde10431fb615b577ba83b96ca5f4161cb82939a787a195\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a1d3243656736b7e4422a6eb7bbac982760f99674b9d80286e5bf45f1fe04376\",\"dweb:/ipfs/QmacX52RVqLnUgWxji9FkfFSZeGnV6qdxkkX5kMxakYRyW\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"allowance(address,address,address)": {
								"notice": "Retrieves the allowance details between a token owner and spender."
							},
							"approve(address,address,uint160,uint48)": {
								"notice": "Approves the spender to use up to amount of the specified token up until the expiration"
							},
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
								"notice": "Issues a permit for spending tokens via a signed authorization."
							},
							"transferFrom(address,address,uint160,address)": {
								"notice": "Executes a token transfer from one address to another."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/IPostInteraction.sol": {
				"IPostInteraction": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "extension",
									"type": "bytes"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "taker",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "makingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "takingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "remainingMakingAmount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "extraData",
									"type": "bytes"
								}
							],
							"name": "postInteraction",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"postInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,uint256,bytes)": {
								"params": {
									"extension": "Order extension data",
									"extraData": "Extra data",
									"makingAmount": "Actual making amount",
									"order": "Order being processed",
									"orderHash": "Hash of the order being processed",
									"remainingMakingAmount": "Order remaining making amount",
									"taker": "Taker address",
									"takingAmount": "Actual taking amount"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extension\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"postInteraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"postInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,uint256,bytes)\":{\"params\":{\"extension\":\"Order extension data\",\"extraData\":\"Extra data\",\"makingAmount\":\"Actual making amount\",\"order\":\"Order being processed\",\"orderHash\":\"Hash of the order being processed\",\"remainingMakingAmount\":\"Order remaining making amount\",\"taker\":\"Taker address\",\"takingAmount\":\"Actual taking amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"postInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Callback method that gets called after all fund transfers\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IPostInteraction.sol\":\"IPostInteraction\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/AddressLib.sol\":{\"keccak256\":\"0x5dbbd2513216eca9660b83e356b1b50d6dd5f854c0106be6bc7df3fff01821d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71c5a3b82d7cb1c060885ed6a11710fe216af832d30b6dd30d051635e6c4e586\",\"dweb:/ipfs/QmWYnTddAxLhKQq58wwya9NUkhudFoYamGZpcuHc6XdAMR\"]},\"contracts/IOrderMixin.sol\":{\"keccak256\":\"0x34ead0b58bd2640652ad6366b4c4ea1370b66d2dd21ffb5d5b831ed54fc9cc71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65b82f8298ed8d9cb9eb3604af3c15129cffa009c5b0150f7f42154093d9ce96\",\"dweb:/ipfs/QmaQoQNVTiJPKB6MVwtemAWrwyKEKR5fLqy7vyfm8oqBEx\"]},\"contracts/IPostInteraction.sol\":{\"keccak256\":\"0x34e475bf78d8978a6a6ac660f4c4357808bff2b27613dab281b562dc9fda907e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3c35113e8dcba3fc49650e2b48cd1a14e23050b66c748d2323898a0117a01b58\",\"dweb:/ipfs/QmYuhGpycuzAcVvcHt8Z4M7GPYt1XSwd1VvKtyKyeb1e8V\"]},\"contracts/MakerTraitsLib.sol\":{\"keccak256\":\"0x2077d7a827c3ba2fa53c92b87bc586385c1310c3fe67edffe09c31a22900cbf9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49f7294dcb82d3acd8b7e2f95546cc85e24ceb7e3564a21ebf852544887cda3b\",\"dweb:/ipfs/QmPgzEiFpUHmGYfXF4EEdpCnb9TPnCpoF48bNMGw74vk1b\"]},\"contracts/TakerTraitsLib.sol\":{\"keccak256\":\"0x25d36a3b3645561fc5b3f35c1e93fe60220bd15f9af896b0c6263a3269710fcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45597b42af6b436271ac8e6577255137557ff72d45883ef4bce01198016d4bb5\",\"dweb:/ipfs/QmamEQ6c5ffZqanpuX52PUf88wPu6Gp4T8LCVVzonAo1uS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"postInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,uint256,bytes)": {
								"notice": "Callback method that gets called after all fund transfers"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/IPreInteraction.sol": {
				"IPreInteraction": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "extension",
									"type": "bytes"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "taker",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "makingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "takingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "remainingMakingAmount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "extraData",
									"type": "bytes"
								}
							],
							"name": "preInteraction",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"preInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,uint256,bytes)": {
								"params": {
									"extension": "Order extension data",
									"extraData": "Extra data",
									"makingAmount": "Actual making amount",
									"order": "Order being processed",
									"orderHash": "Hash of the order being processed",
									"remainingMakingAmount": "Order remaining making amount",
									"taker": "Taker address",
									"takingAmount": "Actual taking amount"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extension\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"preInteraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"preInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,uint256,bytes)\":{\"params\":{\"extension\":\"Order extension data\",\"extraData\":\"Extra data\",\"makingAmount\":\"Actual making amount\",\"order\":\"Order being processed\",\"orderHash\":\"Hash of the order being processed\",\"remainingMakingAmount\":\"Order remaining making amount\",\"taker\":\"Taker address\",\"takingAmount\":\"Actual taking amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"preInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Callback method that gets called before any funds transfers\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IPreInteraction.sol\":\"IPreInteraction\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/AddressLib.sol\":{\"keccak256\":\"0x5dbbd2513216eca9660b83e356b1b50d6dd5f854c0106be6bc7df3fff01821d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71c5a3b82d7cb1c060885ed6a11710fe216af832d30b6dd30d051635e6c4e586\",\"dweb:/ipfs/QmWYnTddAxLhKQq58wwya9NUkhudFoYamGZpcuHc6XdAMR\"]},\"contracts/IOrderMixin.sol\":{\"keccak256\":\"0x34ead0b58bd2640652ad6366b4c4ea1370b66d2dd21ffb5d5b831ed54fc9cc71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65b82f8298ed8d9cb9eb3604af3c15129cffa009c5b0150f7f42154093d9ce96\",\"dweb:/ipfs/QmaQoQNVTiJPKB6MVwtemAWrwyKEKR5fLqy7vyfm8oqBEx\"]},\"contracts/IPreInteraction.sol\":{\"keccak256\":\"0xb2deb1dafa99ec8259fe651e8b39f5cfff725143c0394e4eb359729a399a2a55\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d07a0f88bad2704d4a1d15a8ee50cc997b830eef82153483d13c624101da8fdb\",\"dweb:/ipfs/QmSv8ZY7zmMJ5pAWaWVzDDN4kn5cPeBvVM61o4nja17u75\"]},\"contracts/MakerTraitsLib.sol\":{\"keccak256\":\"0x2077d7a827c3ba2fa53c92b87bc586385c1310c3fe67edffe09c31a22900cbf9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49f7294dcb82d3acd8b7e2f95546cc85e24ceb7e3564a21ebf852544887cda3b\",\"dweb:/ipfs/QmPgzEiFpUHmGYfXF4EEdpCnb9TPnCpoF48bNMGw74vk1b\"]},\"contracts/TakerTraitsLib.sol\":{\"keccak256\":\"0x25d36a3b3645561fc5b3f35c1e93fe60220bd15f9af896b0c6263a3269710fcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45597b42af6b436271ac8e6577255137557ff72d45883ef4bce01198016d4bb5\",\"dweb:/ipfs/QmamEQ6c5ffZqanpuX52PUf88wPu6Gp4T8LCVVzonAo1uS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"preInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,uint256,bytes)": {
								"notice": "Callback method that gets called before any funds transfers"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/ITakerInteraction.sol": {
				"ITakerInteraction": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "extension",
									"type": "bytes"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "taker",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "makingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "takingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "remainingMakingAmount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "extraData",
									"type": "bytes"
								}
							],
							"name": "takerInteraction",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"takerInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,uint256,bytes)": {
								"details": "This callback allows to interactively handle maker aseets to produce takers assets, doesn't supports ETH as taker assets",
								"params": {
									"extension": "Order extension data",
									"extraData": "Extra data",
									"makingAmount": "Actual making amount",
									"order": "Order being processed",
									"orderHash": "Hash of the order being processed",
									"remainingMakingAmount": "Order remaining making amount",
									"taker": "Taker address",
									"takingAmount": "Actual taking amount"
								}
							}
						},
						"title": "Interface for interactor which acts after `maker -> taker` transfer but before `taker -> maker` transfer.",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extension\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"takerInteraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"takerInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,uint256,bytes)\":{\"details\":\"This callback allows to interactively handle maker aseets to produce takers assets, doesn't supports ETH as taker assets\",\"params\":{\"extension\":\"Order extension data\",\"extraData\":\"Extra data\",\"makingAmount\":\"Actual making amount\",\"order\":\"Order being processed\",\"orderHash\":\"Hash of the order being processed\",\"remainingMakingAmount\":\"Order remaining making amount\",\"taker\":\"Taker address\",\"takingAmount\":\"Actual taking amount\"}}},\"title\":\"Interface for interactor which acts after `maker -> taker` transfer but before `taker -> maker` transfer.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"takerInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Callback method that gets called after maker fund transfer but before taker fund transfer\"}},\"notice\":\"The order filling steps are `preInteraction` =>` Transfer \\\"maker -> taker\\\"` => **`Interaction`** => `Transfer \\\"taker -> maker\\\"` => `postInteraction`\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ITakerInteraction.sol\":\"ITakerInteraction\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/AddressLib.sol\":{\"keccak256\":\"0x5dbbd2513216eca9660b83e356b1b50d6dd5f854c0106be6bc7df3fff01821d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71c5a3b82d7cb1c060885ed6a11710fe216af832d30b6dd30d051635e6c4e586\",\"dweb:/ipfs/QmWYnTddAxLhKQq58wwya9NUkhudFoYamGZpcuHc6XdAMR\"]},\"contracts/IOrderMixin.sol\":{\"keccak256\":\"0x34ead0b58bd2640652ad6366b4c4ea1370b66d2dd21ffb5d5b831ed54fc9cc71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65b82f8298ed8d9cb9eb3604af3c15129cffa009c5b0150f7f42154093d9ce96\",\"dweb:/ipfs/QmaQoQNVTiJPKB6MVwtemAWrwyKEKR5fLqy7vyfm8oqBEx\"]},\"contracts/ITakerInteraction.sol\":{\"keccak256\":\"0xc6c79fdf0d75b02c9ebc50a12c274c2fe8418fcbcdd49359ae58b6115859c5fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c73fc4a6102e51ced68750cf515daff7d7a4b9f4b380c92c66fc4a086dd4bb07\",\"dweb:/ipfs/QmbNmr96WaNzrvbiz6YZwQGLiCck5u4ujWx8LfRfK9wCY1\"]},\"contracts/MakerTraitsLib.sol\":{\"keccak256\":\"0x2077d7a827c3ba2fa53c92b87bc586385c1310c3fe67edffe09c31a22900cbf9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49f7294dcb82d3acd8b7e2f95546cc85e24ceb7e3564a21ebf852544887cda3b\",\"dweb:/ipfs/QmPgzEiFpUHmGYfXF4EEdpCnb9TPnCpoF48bNMGw74vk1b\"]},\"contracts/TakerTraitsLib.sol\":{\"keccak256\":\"0x25d36a3b3645561fc5b3f35c1e93fe60220bd15f9af896b0c6263a3269710fcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45597b42af6b436271ac8e6577255137557ff72d45883ef4bce01198016d4bb5\",\"dweb:/ipfs/QmamEQ6c5ffZqanpuX52PUf88wPu6Gp4T8LCVVzonAo1uS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"takerInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,bytes32,address,uint256,uint256,uint256,bytes)": {
								"notice": "Callback method that gets called after maker fund transfer but before taker fund transfer"
							}
						},
						"notice": "The order filling steps are `preInteraction` =>` Transfer \"maker -> taker\"` => **`Interaction`** => `Transfer \"taker -> maker\"` => `postInteraction`",
						"version": 1
					}
				}
			},
			"contracts/IWETH.sol": {
				"IWETH": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "dst",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "wad",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "src",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "wad",
									"type": "uint256"
								}
							],
							"name": "Withdrawal",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for wrapper as WETH-like token.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"withdraw(uint256)": {
								"params": {
									"amount": "Amount of wrapped tokens to withdraw."
								}
							}
						},
						"title": "IWETH",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for wrapper as WETH-like token.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount of wrapped tokens to withdraw.\"}}},\"title\":\"IWETH\",\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint256)\":{\"notice\":\"Emitted when Ether is deposited to get wrapper tokens.\"},\"Withdrawal(address,uint256)\":{\"notice\":\"Emitted when wrapper tokens is withdrawn as Ether.\"}},\"kind\":\"user\",\"methods\":{\"deposit()\":{\"notice\":\"Deposit Ether to get wrapper tokens.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw wrapped tokens as Ether.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IWETH.sol\":\"IWETH\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/IERC20.sol\":{\"keccak256\":\"0x91104f4bcc877f2506e4485b871efe0a6beb5c1ef7de9c374d99d75289905905\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57a7ecbec5ff542c117d36c7487386b5653ad21d0a83414e859d4202e069b36f\",\"dweb:/ipfs/QmaPocSUaysdjd1Ksa5kttxRHxhA7XWd6HrQ9teLFRyR6W\"]},\"contracts/IWETH.sol\":{\"keccak256\":\"0x2dc6d61d66f1881a6c273b5f30f9a82e6eda4988c7aeaf0b26549a5e10c9fcb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1695d9fd49960e732d2228a304fe9bc221439293e940fdcb9c17419ccafdcfc1\",\"dweb:/ipfs/QmPZrdz4icyWQeR5Yf1zDQnpH8MmYiHyKofVcwvwNADjRh\"]}},\"version\":1}",
					"userdoc": {
						"events": {
							"Deposit(address,uint256)": {
								"notice": "Emitted when Ether is deposited to get wrapper tokens."
							},
							"Withdrawal(address,uint256)": {
								"notice": "Emitted when wrapper tokens is withdrawn as Ether."
							}
						},
						"kind": "user",
						"methods": {
							"deposit()": {
								"notice": "Deposit Ether to get wrapper tokens."
							},
							"withdraw(uint256)": {
								"notice": "Withdraw wrapped tokens as Ether."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/LimitOrderProtocol.sol": {
				"LimitOrderProtocol": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract IWETH",
									"name": "_weth",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "AdvanceEpochFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ArbitraryStaticCallFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BadSignature",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BitInvalidatedOrder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ETHTransferFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EpochManagerAndBitInvalidatorsAreIncompatible",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EthDepositRejected",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMsgValue",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidPermit2Transfer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidatedOrder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MakingAmountTooLow",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MismatchArraysLengths",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OrderExpired",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OrderIsNotSuitableForMassInvalidation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "PartialFillNotAllowed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Permit2TransferAmountTooHigh",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "PredicateIsNotTrue",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "PrivateOrder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ReentrancyDetected",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RemainingInvalidatedOrder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SafeTransferFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SafeTransferFromFailed",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "res",
									"type": "bytes"
								}
							],
							"name": "SimulationResults",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SwapWithZeroAmount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TakingAmountExceeded",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TakingAmountTooHigh",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromMakerToTakerFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromTakerToMakerFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "WrongSeriesNonce",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotIndex",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotValue",
									"type": "uint256"
								}
							],
							"name": "BitInvalidatorUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "series",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "newEpoch",
									"type": "uint256"
								}
							],
							"name": "EpochIncreased",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"name": "OrderCancelled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "remainingAmount",
									"type": "uint256"
								}
							],
							"name": "OrderFilled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint96",
									"name": "series",
									"type": "uint96"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "advanceEpoch",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "offsets",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "and",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "arbitraryStaticCall",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slot",
									"type": "uint256"
								}
							],
							"name": "bitInvalidatorForOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "MakerTraits",
									"name": "makerTraits",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "additionalMask",
									"type": "uint256"
								}
							],
							"name": "bitsInvalidateForOrder",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "MakerTraits",
									"name": "makerTraits",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"name": "cancelOrder",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "MakerTraits[]",
									"name": "makerTraits",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes32[]",
									"name": "orderHashes",
									"type": "bytes32[]"
								}
							],
							"name": "cancelOrders",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "predicate",
									"type": "bytes"
								}
							],
							"name": "checkPredicate",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "uint96",
									"name": "series",
									"type": "uint96"
								}
							],
							"name": "epoch",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "series",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "makerEpoch",
									"type": "uint256"
								}
							],
							"name": "epochEquals",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "eq",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "TakerTraits",
									"name": "takerTraits",
									"type": "uint256"
								}
							],
							"name": "fillContractOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "TakerTraits",
									"name": "takerTraits",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "args",
									"type": "bytes"
								}
							],
							"name": "fillContractOrderArgs",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "vs",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "TakerTraits",
									"name": "takerTraits",
									"type": "uint256"
								}
							],
							"name": "fillOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "vs",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "TakerTraits",
									"name": "takerTraits",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "args",
									"type": "bytes"
								}
							],
							"name": "fillOrderArgs",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "gt",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								}
							],
							"name": "hashOrder",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint96",
									"name": "series",
									"type": "uint96"
								}
							],
							"name": "increaseEpoch",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "lt",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "not",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "offsets",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "or",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "permit",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "action",
									"type": "bytes"
								}
							],
							"name": "permitAndCall",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"name": "rawRemainingInvalidatorForOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"name": "remainingInvalidatorForOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "simulate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"errors": {
							"BitInvalidatedOrder()": [
								{
									"details": "The error is thrown when an attempt is made to invalidate an already invalidated entity."
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"EthDepositRejected()": [
								{
									"details": "Error thrown when an ETH deposit from an EOA is attempted."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							],
							"RemainingInvalidatedOrder()": [
								{
									"details": "The error is thrown when an attempt is made to invalidate an already invalidated entity."
								}
							]
						},
						"events": {
							"BitInvalidatorUpdated(address,uint256,uint256)": {
								"params": {
									"maker": "Maker address",
									"slotIndex": "Slot index that was updated",
									"slotValue": "New slot value"
								}
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"OrderCancelled(bytes32)": {
								"params": {
									"orderHash": "Hash of the order"
								}
							},
							"OrderFilled(bytes32,uint256)": {
								"params": {
									"orderHash": "Hash of the order",
									"remainingAmount": "Amount of the maker asset that remains to be filled"
								}
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator for the current chain (EIP-712)"
							},
							"and(uint256,bytes)": {
								"returns": {
									"_0": "Result True if calls to all targets returned True. Otherwise, false"
								}
							},
							"arbitraryStaticCall(address,bytes)": {
								"returns": {
									"_0": "Result Bytes transmuted to uint256"
								}
							},
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							},
							"epochEquals(address,uint256,uint256)": {
								"returns": {
									"_0": "Result True if `maker` has specified epoch. Otherwise, false"
								}
							},
							"eq(uint256,bytes)": {
								"params": {
									"value": "Value to test"
								},
								"returns": {
									"_0": "Result True if call to target returns the same value as `value`. Otherwise, false"
								}
							},
							"gt(uint256,bytes)": {
								"params": {
									"value": "Value to test"
								},
								"returns": {
									"_0": "Result True if call to target returns value which is bigger than `value`. Otherwise, false"
								}
							},
							"lt(uint256,bytes)": {
								"params": {
									"value": "Value to test"
								},
								"returns": {
									"_0": "Result True if call to target returns value which is lower than `value`. Otherwise, false"
								}
							},
							"not(bytes)": {
								"returns": {
									"_0": "Result True if call to target returns 0. Otherwise, false"
								}
							},
							"or(uint256,bytes)": {
								"returns": {
									"_0": "Result True if call to any target returned True. Otherwise, false"
								}
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"permitAndCall(bytes,bytes)": {
								"params": {
									"action": "The data representing the action to be executed after the permit.",
									"permit": "ERC20 token address (20 bytes) concatenated with the permit data, allowing this contract to spend the token. Format: [token address (20 bytes)][permit data]"
								}
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"title": "##1inch Limit Order Protocol v4",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {
								"finalize_allocation": {
									"entryPoint": 629,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_toShortStringWithFallback": {
									"entryPoint": 1115,
									"id": 9412,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_toShortStringWithFallback_4144": {
									"entryPoint": 657,
									"id": 9412,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6101a03462000271576001600160401b0390601f6200435838819003918201601f19168301929190848411838510176200025d5781602092849260409687528339810103126200027157516001600160a01b03918282169081830362000271578051906200006d8262000275565b601a825260208201907f31696e6368204c696d6974204f726465722050726f746f636f6c0000000000008252805196620000a78862000275565b6001885260208801600d60fa1b8152620000c18562000291565b93610120948552620000d38a6200045b565b95610140968752519020988960e05251902061010098818a524660a05283519160208301917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f83528584015260608301524660808301523060a083015260a0825260c0820192828410908411176200025d57828452815190206080523060c05233156200024757505060038054336001600160a01b0319821681179092559151969091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3610160928352610180938452613d55958662000603873960805186612ed0015260a05186612f9b015260c05186612e9a015260e05186612f1f01525185612f4501525184611d9a01525183611dc301525182601c01525181818161040c0152818161049b01528181610676015281816106c80152818161072e015281816107fc0152818161092b015281816110900152818161191a015281816122c50152818161235401526124750152f35b631e4fbdf760e01b82525f60c490910152602490fd5b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b604081019081106001600160401b038211176200025d57604052565b8051602090818110156200032b5750601f825111620002cc5780825192015190808310620002be57501790565b825f19910360031b1b161790565b90604051809263305a27a960e01b82528060048301528251908160248401525f935b82851062000311575050604492505f838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620002ee565b906001600160401b0382116200025d575f54926001938481811c9116801562000450575b838210146200043c57601f811162000406575b5081601f8411600114620003a057509282939183925f9462000394575b50501b915f199060031b1c1916175f5560ff90565b015192505f806200037f565b919083601f1981165f8052845f20945f905b88838310620003eb5750505010620003d2575b505050811b015f5560ff90565b01515f1960f88460031b161c191690555f8080620003c5565b858701518855909601959485019487935090810190620003b2565b5f805284601f845f20920160051c820191601f860160051c015b8281106200043057505062000362565b5f815501859062000420565b634e487b7160e01b5f52602260045260245ffd5b90607f16906200034f565b805160209081811015620004e75750601f825111620004885780825192015190808310620002be57501790565b90604051809263305a27a960e01b82528060048301528251908160248401525f935b828510620004cd575050604492505f838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620004aa565b9192916001600160401b0381116200025d5760019182548381811c91168015620005f7575b828210146200043c57601f8111620005c1575b5080601f83116001146200055d5750819293945f9262000551575b50505f19600383901b1c191690821b17905560ff90565b015190505f806200053a565b90601f19831695845f52825f20925f905b888210620005a9575050838596971062000590575b505050811b01905560ff90565b01515f1960f88460031b161c191690555f808062000583565b8087859682949686015181550195019301906200056e565b835f5283601f835f20920160051c820191601f850160051c015b828110620005eb5750506200051f565b5f8155018490620005db565b90607f16906200050c56fe608080604052600436101561005e575b50361561001a575f80fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361004c57005b604051631b10b0f960e01b8152600490fd5b5f3560e01c90816305b1ea0314612a09575080630d2c7c1614612964578063143e86a71461291d57806315169dec146128cd5780633644e515146128ab5780633f4ba83a1461283a578063435b9789146127dc5780634f38e2b8146127ab57806356a75868146120d05780635816d7231461203b5780635c975abb146120165780636fe7b0ba14611fe5578063715018a614611f8a5780637426114514611f71578063802b2ef114611f005780638456cb5914611e9f57806384b0196e14611d8557806389e7c65014611ceb5780638da5cb5b14611cc35780639fda64bd146117ac578063b68fb0201461178b578063bd61951d14611731578063bf15fcd8146116f7578063bf797959146116a1578063bfa7514314611688578063c2a4075314611644578063c3cf8043146115ca578063ca4ece221461158e578063cc713a0414610efe578063ce3d710a14610eb1578063f2fde38b14610e2a578063f497df75146102355763fcea9e4e146101d5575f61000f565b34610231576040366003190112610231576101ee612abc565b6024356001600160601b0381168103610231576001600160601b0360a01b9060a01b169060018060a01b0316175f526002602052602060405f2054604051908152f35b5f80fd5b36600319016101a0811261023157610100136102315761012435610184356001600160401b0381116102315761027261027c913690600401612ad2565b9061016435612fed565b939461028e610289612e97565b61307f565b93610298856130d0565b925f9260a4358514610ce7575b506102ae6134bb565b6102b885836136df565b9015610ce0575069ffffffffffffffffffff8060e435168015918215610cd4575b505015610cc25764ffffffffff8060e43560501c168015159081610cb8575b50610ca65760e435600160fa1b16610c38575b5084610be7575b61016435600160ff1b1615610b2e578361014435108461014435180284189661033e87868a89876138af565b98610164356001600160b81b031680610ad6575b505b60e435600160ff1b16151580610aca575b610ab85789890215610aa65761037c60e435612e53565b15610a7c576024356001600160a01b03165f90815260046020908152604080832060e435608081901c63ffffffff168552928190529220549190600160789190911c60ff161b80831614610a6a5763ffffffff60e43560801c165f52602052600160ff60e43560781c161b1760405f20555b60e435600160fc1b166109ac575b6064356001600160a01b039081167f0000000000000000000000000000000000000000000000000000000000000000909116148061099a575b801561099457305b8a60e435600160f81b161561095557506104578987613b6a565b90506108255761047a908b906001600160a01b03602435811690606435166139ae565b610924575b5060138111610896575b50506001600160a01b036084358116907f0000000000000000000000000000000000000000000000000000000000000000168114808061088d575b156107a65750508634106107945786341161076b575b60e435600160f71b161561066457818080808a6104f5613a77565b5af16104ff612dc8565b50156106525785935b60e435600160fb1b16610577575b505050604061054a61057394937ffec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e079361327c565b8151908482526020820152a1604051938493846040919493926060820195825260208201520152565b0390f35b90919293506105868183613bcb565b9091906024356001600160a01b0316818460138211610626575b50506001600160a01b031692833b1561062257858995936105e08296948b948b8f6040519b8c9a8b998a986323175ef160e11b8a52339260048b016131b9565b03925af180156106175790859392916105fa575b80610516565b8192935061060790612c7f565b61061457908184926105f4565b80fd5b6040513d84823e3d90fd5b8580fd5b8195508093506106369250612bdf565b60601c9083601411610622576014019260131901908a806105a0565b60405163b12d13eb60e01b8152600490fd5b630d0e30db60e41b825281806004818a7f00000000000000000000000000000000000000000000000000000000000000005af11561075e5760208260446106a9613a77565b60405163a9059cbb60e01b81526004810191909152602481018b9052827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180610716575b15610704578593610508565b60405163fb7f507960e01b8152600490fd5b503d1561072c576001825114601f3d11166106f8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b15156106f8565b50604051903d90823e3d90fd5b818080808a3403335af161077d612dc8565b506104da5760405163b12d13eb60e01b8152600490fd5b604051631841b4e160e01b8152600490fd5b94909434610794578061087c575b801561086f57305b61016435600160fc1b1615610837576107d58385613b9b565b905061082557896107e9918a9833906139ae565b15610508576108206107f9613a77565b897f0000000000000000000000000000000000000000000000000000000000000000613a35565b610508565b6040516301577e8360e51b8152600490fd5b61085191968a6108478587613b9b565b939092339061395b565b1561085d5786946107e9565b60405163478a520560e01b8152600490fd5b610877613a77565b6107bc565b5060e435600160f71b1615156107b4565b503415156104c4565b6108a08183612bdf565b60601c918160141161092057823b1561092057839260148680946108eb8c958f8f8e918e916040519c8d9b8c9a8b9963adf38ba160e01b8b5260131901970195339260048b016131b9565b03925af1801561091557908391156104895761090690612c7f565b610911578188610489565b5080fd5b6040513d85823e3d90fd5b8480fd5b61094f90897f0000000000000000000000000000000000000000000000000000000000000000613a35565b8961047f565b61097d916109638b89613b6a565b9290916001600160a01b036024358116906064351661395b565b61047a575b604051630e1407e960e31b8152600490fd5b8161043d565b5061016435600160fe1b161515610435565b6109b68785613b37565b6001600160a01b036024358116828460138211610a3e575b50508181163b15610231578b5f8f938f96610a0a8f91978f9885998f996040519c8d9b8c9a8b98630986bdd560e01b8a52339260048b016131b9565b0393165af18015610a3357610a20575b506103fc565b610a2b919550612c7f565b5f938a610a1a565b6040513d5f823e3d90fd5b819550809450610a4e9250612bdf565b60601c9183601411610231576014019260131901918e806109ce565b60405163527b154b60e11b8152600490fd5b60018060a01b03602435165f52600560205260405f20885f526020528886031960405f20556103ee565b604051637dd2d13b60e11b8152600490fd5b6040516323bc005f60e21b8152600490fd5b5060a435891415610365565b610144358a03610aff578a11610aed575b8a610352565b60405163fb8ae12960e01b8152600490fd5b610b168a610b10610144358e613133565b92613133565b1015610ae75760405163fb8ae12960e01b8152600490fd5b610144359796610b4187868b89876137f9565b97858911610bb5575b610164356001600160b81b031680610b63575b50610354565b610144358b03610b8c578910610b7a575b8a610b5d565b60405163240f51c960e11b8152600490fd5b610b9d8b610b10610144358d613133565b1115610b745760405163240f51c960e11b8152600490fd5b985096508396610bc887868089876138af565b98610144358a1115610b4a575b604051637f902a9360e01b8152600490fd5b610bf18583613aed565b80610bfe575b5050610312565b610c089130612e73565b81610c2d575b5015610c1b578880610bf7565b604051635b314e0160e11b8152600490fd5b600191501489610c0e565b610c4360e435612e53565b610c945760e43560a081811c8316901b6024356001600160a01b0316175f9081526002602052604090205460789190911c90911603610c82578861030b565b6040516371f4582960e11b8152600490fd5b604051639e744e2560e01b8152600490fd5b6040516362b439dd60e11b8152600490fd5b905042118a6102f8565b604051636a6fed7f60e11b8152600490fd5b331614905089806102d9565b5f5260045ffd5b6001600160a01b03602435811691821591908215610db7575b5050610da55761016435600160fd1b166102a557610d1e8684613bfc565b906014821015610d30575b50506102a5565b610d3a8282612bdf565b60601c82601411610231576014610d5a9360131901920190843091613289565b50610d6660e435612e53565b15610d73575b8080610d29565b5f52600560205260405f20865f5260205260405f2054610d935788610d6c565b60405163c5f2be5160e01b8152600490fd5b604051635cd5d23360e01b8152600490fd5b9091505f906001600160ff1b0381166fa2a8918ca85bafe22016d0b997e4df5f600160ff1b038110610df1575b5050168114158a80610d00565b602092505f91608091604051918d835260ff1c601b0185830152610104356040830152606082015282805260015afa505f518b80610de4565b3461023157602036600319011261023157610e43612abc565b610e4b612fc1565b6001600160a01b03908116908115610e9957600354826001600160601b0360a01b821617600355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b604051631e4fbdf760e01b81525f6004820152602490fd5b34610231576060366003190112610231576020610ef4610ecf612abc565b6001600160a01b031660243560a01b175f908152600260205260409020546044351490565b6040519015158152f35b346102315736600319016101608112610231576101001361023157610104356001600160401b03811161023157610f39903690600401612ad2565b6101243591905f61014435610f4f610289612e97565b91610f59836130d0565b9360a4359586861461152c575b5050610f706134bb565b610f78613779565b9015610ce0575060e4359169ffffffffffffffffffff8084168015918215611520575b505015610cc25764ffffffffff808460501c168015159081611516575b50610ca657600160fa1b84166114d2575b50600160ff1b95818716156114455785881086891802861896610fef8860c43584613cda565b986001600160b81b0384169081611408575b50505b8416151590816113fd575b50610ab85786860215610aa65761102583612e53565b156113d35760018060a01b03602435165f52600460205260405f2063ffffffff8460801c16600160ff8660781c161b91815f528060205260405f2054918380841614610a6a575f526020521760405f20555b600160fc1b91838316611371575b6001600160a01b03927f0000000000000000000000000000000000000000000000000000000000000000808516939092606435861685811480611362575b801561135c57305b600160f81b8a1615611332576110e18480613b6a565b9050610825578c6110f99185948b60243516906139ae565b611322575b61061457509089899286608435168681149384809561131b575b1561129557505050915050610794578790600160f71b85161561121d57505f808093508092611145613a77565b5af161114f612dc8565b50156106525784915b600160fb1b16611194575b50604061054a7ffec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e07926105739561327c565b90506024351691823b15610231575f60405180946323175ef160e11b82528183816111c6878c8c338c60048701613221565b03925af1908115610a335761054a85604092610573967ffec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e079561120e575b509550925050611163565b61121790612c7f565b89611203565b60045f80938193630d0e30db60e41b83525af115610a335760205f6044611242613a77565b6040519063a9059cbb60e01b825260048201528a602482015282855af19081611273575b5015610704578491611158565b90503d1561128d575060015f5114601f3d11165b87611266565b3b1515611287565b9091929380959997509461130b575b84156112fd5730925b16156112e457906112c0929133906139ae565b6112cb575b50611158565b6112de90886112d8613a77565b91613a35565b876112c5565b6112f19397503390613921565b1561085d5786936112c0565b611305613a77565b926112ad565b600160f71b8716151594506112a4565b505f611118565b61132d338c87613a35565b6110fe565b61135091928d6113428680613b6a565b9390928c602435169061395b565b156109825781906110f9565b336110cb565b50600160fe1b831615156110c3565b6024356001600160a01b0316803b15610231575f8988928a838a6113ad60405197889687958694630986bdd560e01b8652339060048701613221565b03925af18015610a33576113c2575b50611085565b6113cc9150612c7f565b5f886113bc565b60018060a01b03602435165f52600560205260405f20845f526020528585031960405f2055611077565b90508614158861100f565b898181036114205750508911610aed575b8980611001565b610b1061142d928d613133565b10156114195760405163fb8ae12960e01b8152600490fd5b60c4359688611455818a85613cb3565b98888a116114b4575b506001600160b81b0384169081611477575b5050611004565b8a81810361148f5750508810610b7a575b8980611470565b610b1061149c928c613133565b11156114885760405163240f51c960e11b8152600490fd5b985098506114c487809984613cda565b98808a11610bd5578a61145e565b6114db84612e53565b610c945760a084811c8216901b6024356001600160a01b0316175f90815260026020526040902054607885901c90911603610c825787610fc9565b9050421189610fb8565b33161490508880610f9b565b60205f80936040519080630b135d3f60e11b958684528a6004850152604060248501528160448501526064840137606401906024356001600160a01b03165afa61157e575b5015610da5578680610f66565b5f51143d60201416905087611571565b346102315760206115ab6115a136612aff565b9092919230612e73565b819291926115c0575b50506040519015158152f35b10905082806115b4565b34610231576020366003190112610231576115e3612aa6565b6001600160601b0360a01b8160a01b1633175f52600260205260405f2060018154018091556001600160601b036040519216825260208201527f099133aefc2c2d1e56f8ef3622ec8e80979a0713fc9c4e1497740efcf809939660403392a2005b34610231576040366003190112610231576001600160a01b03611665612abc565b165f52600560205260405f206024355f52602052602060405f2054604051908152f35b34610231576020610ef461169b36612aff565b91612df7565b34610231576020366003190112610231576004356001600160401b038111610231576116dd6116d66020923690600401612ad2565b9030612e73565b816116ee575b506040519015158152f35b905015826116e3565b346102315761170e61170836612ba0565b91612e73565b901561171f57602090604051908152f35b604051631f1b8f6160e01b8152600490fd5b34610231575f8061174136612ba0565b90816040519283928337810184815203915af461175c612dc8565b6040805163032695f960e31b8152921515600484015260248301528190611787906044830190612b32565b0390fd5b34610231576040366003190112610231576117aa602435600435612cf2565b005b3660031901610180811261023157610100136102315761014435610124355f610164356117da610289612e97565b906117e4826130d0565b9260a43594858514611c28575b506117fa6134bb565b611802613779565b9015610ce0575060e4359169ffffffffffffffffffff8084168015918215611c1c575b505015610cc25764ffffffffff808460501c168015159081611c12575b50610ca657600160fa1b8416611bce575b50600160ff1b9581871615611b4157858810868918028618966118798860c43584613cda565b986001600160b81b0384169081611b04575b50505b841615159081611af9575b50610ab85786860215610aa6576118af83612e53565b15611acf5760018060a01b03602435165f52600460205260405f2063ffffffff8460801c16600160ff8660781c161b91815f528060205260405f2054918380841614610a6a575f526020521760405f20555b600160fc1b91838316611a6d575b6001600160a01b03927f0000000000000000000000000000000000000000000000000000000000000000808516939092606435861685811480611a5e575b8015611a5857305b600160f81b8a1615611a3c5761196b8480613b6a565b9050610825578c6119839185948b60243516906139ae565b611a2c575b6106145750608435851691848314918280611a23575b156119f457505050508734106107945787908134116119d4575b600160f71b85161561121d57505f808093508092611145613a77565b905f808080933403335af16119e7612dc8565b50156106525787906119b8565b909192969450346107945789968b928461130b5784156112fd57309216156112e457906112c0929133906139ae565b5034151561199e565b611a37338c87613a35565b611988565b611a4c91928d6113428680613b6a565b15610982578190611983565b33611955565b50600160fe1b8316151561194d565b6024356001600160a01b0316803b15610231575f8988928a838a611aa960405197889687958694630986bdd560e01b8652339060048701613221565b03925af18015610a3357611abe575b5061190f565b611ac89150612c7f565b5f88611ab8565b60018060a01b03602435165f52600560205260405f20845f526020528585031960405f2055611901565b905086141588611899565b89818103611b1c5750508911610aed575b898061188b565b610b10611b29928d613133565b1015611b155760405163fb8ae12960e01b8152600490fd5b60c4359688611b51818a85613cb3565b98888a11611bb0575b506001600160b81b0384169081611b73575b505061188e565b8a818103611b8b5750508810610b7a575b8980611b6c565b610b10611b98928c613133565b1115611b845760405163240f51c960e11b8152600490fd5b98509850611bc087809984613cda565b98808a11610bd5578a611b5a565b611bd784612e53565b610c945760a084811c8216901b6024356001600160a01b0316175f90815260026020526040902054607885901c90911603610c825787611853565b9050421189611842565b33161490508880611825565b6001600160a01b0360243581168015929091908315611c4f575b505050610da557866117f1565b919250905f906001600160ff1b0381166fa2a8918ca85bafe22016d0b997e4df5f600160ff1b038110611c8a575b5050161415878080611c42565b602092505f91608091604051918a835260ff1c601b0185830152610104356040830152606082015282805260015afa505f518980611c7d565b34610231575f366003190112610231576003546040516001600160a01b039091168152602090f35b34610231576040366003190112610231576001600160401b0360043581811161023157611d1c903690600401612b70565b909160243590811161023157611d36903690600401612b70565b90818303611d73575f5b838110611d4957005b80611d6d611d5a6001938789612cce565b35611d66838787612cce565b3590612cf2565b01611d40565b604051631b2f9b3b60e31b8152600490fd5b34610231575f36600319011261023157611dbe7f00000000000000000000000000000000000000000000000000000000000000006134dc565b611de77f00000000000000000000000000000000000000000000000000000000000000006135fd565b6040516020808201928284106001600160401b03851117611e8b57916020611e408594611e3297966040525f8452604051978897600f60f81b895260e0858a015260e0890190612b32565b908782036040890152612b32565b914660608701523060808701525f60a087015285830360c087015251918281520192915f5b828110611e7457505050500390f35b835185528695509381019392810192600101611e65565b634e487b7160e01b5f52604160045260245ffd5b34610231575f36600319011261023157611eb7612fc1565b611ebf6134bb565b6003805460ff60a01b1916600160a01b1790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a1005b346102315761010080600319360112610231576042602091610120611f23612e97565b91604051907f3af21ec5a20011b88d3b7b4ed7c806cef05a5980cf34974bcd53566a131f7e4c8252600486830137206040519161190160f01b83526002830152602282015220604051908152f35b34610231576020610ef4611f8436612aff565b91612c28565b34610231575f36600319011261023157611fa2612fc1565b600380546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610231576020611ff86115a136612aff565b8192919261200c5750506040519015158152f35b14905082806115b4565b34610231575f36600319011261023157602060ff60035460a01c166040519015158152f35b6040366003190112610231576001600160401b0360043581811161023157612067903690600401612ad2565b9160243590811161023157612080903690600401612ad2565b61208d8484959395612bdf565b60601c9180601411610231575f9384936120b39260131901916014019030903390613289565b508060405194853783305af43d5f833e156120cc573d90f35b3d90fd5b3461023157366003190161018081126102315761010013610231576001600160401b03610104358181116102315761210c903690600401612ad2565b9091610164359081116102315761212a612134913690600401612ad2565b9061014435612fed565b94919261214661028997929597612e97565b94612150866130d0565b935f9360a4358614612749575b50506121676134bb565b61217185836136df565b9015610ce0575069ffffffffffffffffffff8060e43516801591821561273d575b505015610cc25764ffffffffff8060e43560501c168015159081612733575b50610ca65760e435600160fa1b166126e9575b50846126aa575b61014435600160ff1b161561260457836101243510846101243518028418966121f787868a89876138af565b98610144356001600160b81b0316806125c4575b505b60e435600160ff1b161515806125b8575b610ab85789890215610aa65761223560e435612e53565b1561258e576024356001600160a01b03165f90815260046020908152604080832060e435608081901c63ffffffff168552928190529220549190600160789190911c60ff161b80831614610a6a5763ffffffff60e43560801c165f52602052600160ff60e43560781c161b1760405f20555b60e435600160fc1b166124db575b6064356001600160a01b039081167f000000000000000000000000000000000000000000000000000000000000000090911614806124c9575b80156124c357305b8a60e435600160f81b161561249f57506123108987613b6a565b905061082557612333908b906001600160a01b03602435811690606435166139ae565b61246e575b50601381116123f3575b50506001600160a01b036084358116907f000000000000000000000000000000000000000000000000000000000000000016811480806123ec575b156123a4575050866107945760e435600160f71b161561066457818080808a6104f5613a77565b909490806123db575b80156123ce57305b61014435600160fc1b1615610837576107d58385613b9b565b6123d6613a77565b6123b5565b5060e435600160f71b1615156123ad565b505f61237d565b6123fd8183612bdf565b60601c918160141161092057823b1561092057839260148680946124488c958f8f8e918e916040519c8d9b8c9a8b9963adf38ba160e01b8b5260131901970195339260048b016131b9565b03925af1801561091557908391156123425761246390612c7f565b610911578188612342565b61249990897f0000000000000000000000000000000000000000000000000000000000000000613a35565b89612338565b6124ad916109638b89613b6a565b61233357604051630e1407e960e31b8152600490fd5b816122f6565b5061014435600160fe1b1615156122ee565b6124e58785613b37565b6001600160a01b036024358116828460138211612562575b50508181163b15610231578b5f8f938f966125398f91978f9885998f996040519c8d9b8c9a8b98630986bdd560e01b8a52339260048b016131b9565b0393165af18015610a335761254f575b506122b5565b61255a919550612c7f565b5f938a612549565b8195508094506125729250612bdf565b60601c9183601411610231576014019260131901918e806124fd565b60018060a01b03602435165f52600560205260405f20885f526020528886031960405f20556122a7565b5060a43589141561221e565b610124358a036125db578a11610aed575b8a61220b565b6125ec8a610b10610124358e613133565b10156125d55760405163fb8ae12960e01b8152600490fd5b61012435979661261787868b89876137f9565b97858911612679575b610144356001600160b81b031680612639575b5061220d565b610124358b03612650578910610b7a575b8a612633565b6126618b610b10610124358d613133565b111561264a5760405163240f51c960e11b8152600490fd5b98509650839661268c87868089876138af565b98610124358a111561262057604051637f902a9360e01b8152600490fd5b6126b48583613aed565b806126c1575b50506121cb565b6126cb9130612e73565b816126de575b5015610c1b5788806126ba565b6001915014896126d1565b6126f460e435612e53565b610c945760e43560a081811c8316901b6024356001600160a01b0316175f9081526002602052604090205460789190911c90911603610c8257886121c4565b905042118a6121b1565b33161490508980612192565b60205f80936040519080630b135d3f60e11b958684528d6004850152604060248501528160448501526064840137606401906024356001600160a01b03165afa61279b575b5015610da557888061215d565b5f51143d6020141690508961278e565b346102315760206127be6115a136612aff565b819291926127d25750506040519015158152f35b11905082806115b4565b34610231576040366003190112610231576001600160a01b036127fd612abc565b165f52600560205260405f206024355f5260205260405f205480156128285760209060405190198152f35b60405163aa3eef9560e01b8152600490fd5b34610231575f36600319011261023157612852612fc1565b60035460ff8160a01c16156128995760ff60a01b19166003556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a1005b604051638dfc202b60e01b8152600490fd5b34610231575f3660031901126102315760206128c5612e97565b604051908152f35b34610231576020366003190112610231576004356001600160401b038111610231576129026116d66020923690600401612ad2565b8161291257506040519015158152f35b6001915014826116e3565b34610231576040366003190112610231576001600160a01b0361293e612abc565b165f52600460205260405f2060243560081c5f52602052602060405f2054604051908152f35b346102315760403660031901126102315761297d612aa6565b602435801580156129ff575b6129ed576001600160601b0360a01b8260a01b1633175f52600260205260405f20908154018091556001600160601b036040519216825260208201527f099133aefc2c2d1e56f8ef3622ec8e80979a0713fc9c4e1497740efcf809939660403392a2005b60405163555fbbbf60e01b8152600490fd5b5060ff8111612989565b346102315760403660031901126102315760043590612a2782612e53565b15612a975750335f52600460205260405f209063ffffffff8160801c1691825f5260205260405f2090600160ff6024359260781c161b1781541780915560405191825260208201527fcda0f7e73d07bdb14b141f2cf4745926629a1b63e7c6a3dd8a80232cb459a85060403392a2005b63435ffd6560e11b8152600490fd5b600435906001600160601b038216820361023157565b600435906001600160a01b038216820361023157565b9181601f84011215610231578235916001600160401b038311610231576020838186019501011161023157565b9060406003198301126102315760043591602435906001600160401b03821161023157612b2e91600401612ad2565b9091565b91908251928382525f5b848110612b5c575050825f602080949584010152601f8019910116010190565b602081830181015184830182015201612b3c565b9181601f84011215610231578235916001600160401b038311610231576020808501948460051b01011161023157565b906040600319830112610231576004356001600160a01b03811681036102315791602435906001600160401b03821161023157612b2e91600401612ad2565b6bffffffffffffffffffffffff199035818116939260148110612c0157505050565b60140360031b82901b16169150565b90939293848311610231578411610231578101920390565b929091925f5b63ffffffff8216908115612c75576116d682612c4b928888612c10565b81612c6a575b50612c60579060201c90612c2e565b5050915050600190565b60019150145f612c51565b5050509150505f90565b6001600160401b038111611e8b57604052565b604081019081106001600160401b03821117611e8b57604052565b90601f801991011681019081106001600160401b03821117611e8b57604052565b9190811015612cde5760051b0190565b634e487b7160e01b5f52603260045260245ffd5b90612cfc82612e53565b15612d675750335f52600460205260405f209063ffffffff8160801c1691825f52602052600160ff60405f209260781c161b81541780915560405191825260208201527fcda0f7e73d07bdb14b141f2cf4745926629a1b63e7c6a3dd8a80232cb459a85060403392a2565b7f5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d9150602090335f526005825260405f20815f5282525f1960405f2055604051908152a1565b6001600160401b038111611e8b57601f01601f191660200190565b3d15612df2573d90612dd982612dad565b91612de76040519384612cad565b82523d5f602084013e565b606090565b929091925f5b63ffffffff8216908115612e48576116d682612e1a928888612c10565b9015908115612e3c575b50612e33579060201c90612dfd565b50509150505f90565b6001915014155f612e24565b505050915050600190565b600160ff1b81161580159190612e67575090565b600160fe1b1615919050565b915f906020928294826040519283375afa60203d14169182612e9157565b5f519150565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480612f98575b15612ef2577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815260c081018181106001600160401b03821117611e8b5760405251902090565b507f00000000000000000000000000000000000000000000000000000000000000004614612ec9565b6003546001600160a01b03163303612fd557565b60405163118cdaa760e01b8152336004820152602490fd5b90929190600160fb1b811615613076576130078285612bdf565b60601c9382601411610231576014019160131901925b62ffffff60e083901c81169485156130685780861161023157613044908596818197612c10565b919091935b60c81c1692831561305e578311610231579190565b505090505f905f90565b92939094505f945f94613049565b3393919261301d565b6042906101206040517f3af21ec5a20011b88d3b7b4ed7c806cef05a5980cf34974bcd53566a131f7e4c815261010060046020830137206040519161190160f01b8352600283015260228201522090565b6130db60e435612e53565b15613100575060a435905b81156130ee57565b604051637b8fded160e11b8152600490fd5b60018060a01b03602435165f52600560205260405f20905f5260205261312d60405f205460a435906136ce565b906130e6565b8181029291811591840414171561314657565b634e487b7160e01b5f52601160045260245ffd5b6004358152602435602082015260443560408201526064356060820152608435608082015260a43560a082015260c43560c082015260e060e435910152565b908060209392818452848401375f828201840152601f01601f1916010190565b949161321e999794916131e591999794996101e06131d68961315a565b806101008a0152880191613199565b6101208601989098526001600160a01b03166101408501526101608401526101808301526101a08201528084036101c090910152613199565b90565b935f93610220969293856101e06132378961315a565b806101008a01528801526102009461012088015260018060a01b03166101408701526101608601526101808501526101a0840152806101c0840152820152015f815290565b9190820391821161314657565b9190935f94938594613299613a98565b906040519484918260641461345657826048146133e5578260e0146133c357826101001461339f5782606014613311575050610160146132f05750639fd5a6cf60e01b8352849160049181908584013701925af190565b6302b67b5760e41b84526101649450859250906101609060048501375af190565b88955060409250906101649760209495926302b67b5760e41b8952600489015260248801526014826050890137851965ffffffffffff9181601485013560e01c01831660648a0152601884013560e01c60848a015260a4890152601c83013560e01c011660c487015261010060e48701528161010487015282808201610124880137016101448501375af190565b50506323f2ebc360e21b8552506101049486935091610100915060048501375af190565b505063d505accf60e01b85525060e4948693509160e0915060048501375af190565b909150879450610104969392506323f2ebc360e21b86526004860152602485015260206008602883013592803560e01c60448801528519600482013560e01c016064880152600160848801528360ff1c601b0160a48801520160c48601376001600160ff1b031660e48401525af190565b90915087945060e49693925063d505accf60e01b865260048601526024850152602060246044830135928281604489013785198382013560e01c0160648801528360ff1c601b0160848801520160a48601376001600160ff1b031660c48401525af190565b60ff60035460a01c166134ca57565b60405163d93c066560e01b8152600490fd5b60ff811461351a5760ff811690601f821161350857604051916134fe83612c92565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b506040515f8054906001908260011c600184169283156135f3575b60209485831085146135df5782875286949081156135bf5750600114613564575b505061321e92500382612cad565b5f8080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56395935091905b8183106135a757505061321e93508201015f80613556565b8554878401850152948501948694509183019161358f565b91505061321e94925060ff191682840152151560051b8201015f80613556565b634e487b7160e01b5f52602260045260245ffd5b90607f1690613535565b60ff811461361f5760ff811690601f821161350857604051916134fe83612c92565b506040515f60018054918260011c600184169283156136c4575b60209485831085146135df5782875286949081156135bf575060011461366757505061321e92500382612cad565b9093915060015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6935f915b8183106136ac57505061321e93508201015f80613556565b85548784018501529485019486945091830191613694565b90607f1690613639565b9081156136da57501990565b905090565b9060e435600160f91b1615613765578015613756576136fd81612dad565b9061370b6040519283612cad565b8082526020820192368282011161023157815f926020928637830101525190206001600160a01b0390811660043590911603613749575b6001905f90565b5f9063dc11ee6b60e01b90565b505f9163b2d25e4960e01b9150565b905015613742575f906374896a7b60e01b90565b5f60e435600160f91b1615613794579063b2d25e4960e01b90565b506001905f90565b93906137c69061321e9997949896936101c06137b78861315a565b80610100890152870191613199565b6101208501979097526001600160a01b03166101408401526101608301526101808201528084036101a090910152613199565b939190926138078486613c2f565b90928115613899576138198285612bdf565b60601c938260141161023157602096601494613855936040519a8b998a988998631d9671c360e01b8a5260131901960194339260048a0161379c565b03915afa908115610a33575f9161386a575090565b90506020813d602011613891575b8161388560209383612cad565b81010312610231575190565b3d9150613878565b94505050505061321e915060c43560a435613cb3565b939190926138bd8486613c62565b9092811561390b576138cf8285612bdf565b60601c938260141161023157602096601494613855936040519a8b998a9889986301afff1560e71b8a5260131901960194339260048a0161379c565b94505050505061321e915060c43560a435613cda565b905f6064926020958295604051946323b872dd60e01b86526004860152602485015260448401525af160015f5114601f3d11163d15171690565b9294805f9581602098889596604051976323b872dd60e01b89526004890152602488015260448701526139a2575b5050606401925af160015f5114601f3d11163d15171690565b6064850137805f613989565b91929091906001600160a01b038111613a23575f9283926084926139d0613a98565b9660405193631b63c28b60e11b8552600485015260248401526044830152606482015282855af19081613a18575b5015613a0657565b60405163f405907160e01b8152600490fd5b90503b15155f6139fe565b604051638112e11960e01b8152600490fd5b5f602481808094969596632e1a7d4d60e01b8252876004525af115610a3357306001600160a01b03821603613a68575050565b5f80809381935af115610a3357565b6001600160a01b036044358116908115613a8f575090565b90506024351690565b468061014414613ad9578061012c14613ad95761010414613ac6576e22d473030f116ddee9f6b43ac78ba390565b6e225e31d15943971f47ad3022f714fa90565b506e225e31d15943971f47ad3022f714fa90565b91909160208310613b2f5780359063ffffffff808360601c169260801c1693601f19018411613b20578101602001920390565b6309605a0160e41b5f5260045ffd5b505f91508190565b91909160208310613b2f5780359063ffffffff808360a01c169260c01c1693601f19018411613b20578101602001920390565b91909160208310613b2f5780359063ffffffff918060201b8316921693601f19018411613b20578101602001920390565b91909160208310613b2f5780359063ffffffff8083169260201c1693601f19018411613b20578101602001920390565b91909160208310613b2f5780359063ffffffff8260c01c169160e01c93601f19018411613b20578101602001920390565b91909160208310613b2f5780359063ffffffff808360801c169260a01c1693601f19018411613b20578101602001920390565b91909160208310613b2f5780359063ffffffff808360201c169260401c1693601f19018411613b20578101602001920390565b91909160208310613b2f5780359063ffffffff808360401c169260601c1693601f19018411613b20578101602001920390565b8115613c9f570490565b634e487b7160e01b5f52601260045260245ffd5b80831760801c15613cd057613ccb9061321e93613133565b613c95565b61321e9202613c95565b9181811760801c15613d0f5790613cf091613133565b90808201809211613146575f1982019182116131465761321e91613c95565b61321e92910281015f1901613c9556fea26469706673582212209ca41555d33d61555dbb72948bab109e1f9c9869c36c32fb22b832f50d3583ab64736f6c63430008170033",
							"opcodes": "PUSH2 0x1A0 CALLVALUE PUSH3 0x271 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 PUSH1 0x1F PUSH3 0x4358 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP3 SWAP2 SWAP1 DUP5 DUP5 GT DUP4 DUP6 LT OR PUSH3 0x25D JUMPI DUP2 PUSH1 0x20 SWAP3 DUP5 SWAP3 PUSH1 0x40 SWAP7 DUP8 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x271 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND SWAP1 DUP2 DUP4 SUB PUSH3 0x271 JUMPI DUP1 MLOAD SWAP1 PUSH3 0x6D DUP3 PUSH3 0x275 JUMP JUMPDEST PUSH1 0x1A DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 PUSH32 0x31696E6368204C696D6974204F726465722050726F746F636F6C000000000000 DUP3 MSTORE DUP1 MLOAD SWAP7 PUSH3 0xA7 DUP9 PUSH3 0x275 JUMP JUMPDEST PUSH1 0x1 DUP9 MSTORE PUSH1 0x20 DUP9 ADD PUSH1 0xD PUSH1 0xFA SHL DUP2 MSTORE PUSH3 0xC1 DUP6 PUSH3 0x291 JUMP JUMPDEST SWAP4 PUSH2 0x120 SWAP5 DUP6 MSTORE PUSH3 0xD3 DUP11 PUSH3 0x45B JUMP JUMPDEST SWAP6 PUSH2 0x140 SWAP7 DUP8 MSTORE MLOAD SWAP1 KECCAK256 SWAP9 DUP10 PUSH1 0xE0 MSTORE MLOAD SWAP1 KECCAK256 PUSH2 0x100 SWAP9 DUP2 DUP11 MSTORE CHAINID PUSH1 0xA0 MSTORE DUP4 MLOAD SWAP2 PUSH1 0x20 DUP4 ADD SWAP2 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP4 MSTORE DUP6 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE CHAINID PUSH1 0x80 DUP4 ADD MSTORE ADDRESS PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 MSTORE PUSH1 0xC0 DUP3 ADD SWAP3 DUP3 DUP5 LT SWAP1 DUP5 GT OR PUSH3 0x25D JUMPI DUP3 DUP5 MSTORE DUP2 MLOAD SWAP1 KECCAK256 PUSH1 0x80 MSTORE ADDRESS PUSH1 0xC0 MSTORE CALLER ISZERO PUSH3 0x247 JUMPI POP POP PUSH1 0x3 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD SWAP7 SWAP1 SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH0 DUP1 LOG3 PUSH2 0x160 SWAP3 DUP4 MSTORE PUSH2 0x180 SWAP4 DUP5 MSTORE PUSH2 0x3D55 SWAP6 DUP7 PUSH3 0x603 DUP8 CODECOPY PUSH1 0x80 MLOAD DUP7 PUSH2 0x2ED0 ADD MSTORE PUSH1 0xA0 MLOAD DUP7 PUSH2 0x2F9B ADD MSTORE PUSH1 0xC0 MLOAD DUP7 PUSH2 0x2E9A ADD MSTORE PUSH1 0xE0 MLOAD DUP7 PUSH2 0x2F1F ADD MSTORE MLOAD DUP6 PUSH2 0x2F45 ADD MSTORE MLOAD DUP5 PUSH2 0x1D9A ADD MSTORE MLOAD DUP4 PUSH2 0x1DC3 ADD MSTORE MLOAD DUP3 PUSH1 0x1C ADD MSTORE MLOAD DUP2 DUP2 DUP2 PUSH2 0x40C ADD MSTORE DUP2 DUP2 PUSH2 0x49B ADD MSTORE DUP2 DUP2 PUSH2 0x676 ADD MSTORE DUP2 DUP2 PUSH2 0x6C8 ADD MSTORE DUP2 DUP2 PUSH2 0x72E ADD MSTORE DUP2 DUP2 PUSH2 0x7FC ADD MSTORE DUP2 DUP2 PUSH2 0x92B ADD MSTORE DUP2 DUP2 PUSH2 0x1090 ADD MSTORE DUP2 DUP2 PUSH2 0x191A ADD MSTORE DUP2 DUP2 PUSH2 0x22C5 ADD MSTORE DUP2 DUP2 PUSH2 0x2354 ADD MSTORE PUSH2 0x2475 ADD MSTORE RETURN JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH0 PUSH1 0xC4 SWAP1 SWAP2 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH3 0x25D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 DUP2 DUP2 LT ISZERO PUSH3 0x32B JUMPI POP PUSH1 0x1F DUP3 MLOAD GT PUSH3 0x2CC JUMPI DUP1 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 DUP1 DUP4 LT PUSH3 0x2BE JUMPI POP OR SWAP1 JUMP JUMPDEST DUP3 PUSH0 NOT SWAP2 SUB PUSH1 0x3 SHL SHL AND OR SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH3 0x311 JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH3 0x2EE JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH3 0x25D JUMPI PUSH0 SLOAD SWAP3 PUSH1 0x1 SWAP4 DUP5 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x450 JUMPI JUMPDEST DUP4 DUP3 LT EQ PUSH3 0x43C JUMPI PUSH1 0x1F DUP2 GT PUSH3 0x406 JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH3 0x3A0 JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 PUSH0 SWAP5 PUSH3 0x394 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH0 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD SWAP3 POP PUSH0 DUP1 PUSH3 0x37F JUMP JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND PUSH0 DUP1 MSTORE DUP5 PUSH0 KECCAK256 SWAP5 PUSH0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH3 0x3EB JUMPI POP POP POP LT PUSH3 0x3D2 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH0 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD PUSH0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE PUSH0 DUP1 DUP1 PUSH3 0x3C5 JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x3B2 JUMP JUMPDEST PUSH0 DUP1 MSTORE DUP5 PUSH1 0x1F DUP5 PUSH0 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 PUSH1 0x1F DUP7 ADD PUSH1 0x5 SHR ADD JUMPDEST DUP3 DUP2 LT PUSH3 0x430 JUMPI POP POP PUSH3 0x362 JUMP JUMPDEST PUSH0 DUP2 SSTORE ADD DUP6 SWAP1 PUSH3 0x420 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x34F JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 DUP2 DUP2 LT ISZERO PUSH3 0x4E7 JUMPI POP PUSH1 0x1F DUP3 MLOAD GT PUSH3 0x488 JUMPI DUP1 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 DUP1 DUP4 LT PUSH3 0x2BE JUMPI POP OR SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH3 0x4CD JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH3 0x4AA JUMP JUMPDEST SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x25D JUMPI PUSH1 0x1 SWAP2 DUP3 SLOAD DUP4 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x5F7 JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH3 0x43C JUMPI PUSH1 0x1F DUP2 GT PUSH3 0x5C1 JUMPI JUMPDEST POP DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH3 0x55D JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH0 SWAP3 PUSH3 0x551 JUMPI JUMPDEST POP POP PUSH0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP3 SHL OR SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD SWAP1 POP PUSH0 DUP1 PUSH3 0x53A JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 DUP5 PUSH0 MSTORE DUP3 PUSH0 KECCAK256 SWAP3 PUSH0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH3 0x5A9 JUMPI POP POP DUP4 DUP6 SWAP7 SWAP8 LT PUSH3 0x590 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD PUSH0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE PUSH0 DUP1 DUP1 PUSH3 0x583 JUMP JUMPDEST DUP1 DUP8 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH3 0x56E JUMP JUMPDEST DUP4 PUSH0 MSTORE DUP4 PUSH1 0x1F DUP4 PUSH0 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR ADD JUMPDEST DUP3 DUP2 LT PUSH3 0x5EB JUMPI POP POP PUSH3 0x51F JUMP JUMPDEST PUSH0 DUP2 SSTORE ADD DUP5 SWAP1 PUSH3 0x5DB JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x50C JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x5E JUMPI JUMPDEST POP CALLDATASIZE ISZERO PUSH2 0x1A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x4C JUMPI STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1B10B0F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x5B1EA03 EQ PUSH2 0x2A09 JUMPI POP DUP1 PUSH4 0xD2C7C16 EQ PUSH2 0x2964 JUMPI DUP1 PUSH4 0x143E86A7 EQ PUSH2 0x291D JUMPI DUP1 PUSH4 0x15169DEC EQ PUSH2 0x28CD JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x28AB JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x283A JUMPI DUP1 PUSH4 0x435B9789 EQ PUSH2 0x27DC JUMPI DUP1 PUSH4 0x4F38E2B8 EQ PUSH2 0x27AB JUMPI DUP1 PUSH4 0x56A75868 EQ PUSH2 0x20D0 JUMPI DUP1 PUSH4 0x5816D723 EQ PUSH2 0x203B JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x2016 JUMPI DUP1 PUSH4 0x6FE7B0BA EQ PUSH2 0x1FE5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1F8A JUMPI DUP1 PUSH4 0x74261145 EQ PUSH2 0x1F71 JUMPI DUP1 PUSH4 0x802B2EF1 EQ PUSH2 0x1F00 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x1E9F JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x1D85 JUMPI DUP1 PUSH4 0x89E7C650 EQ PUSH2 0x1CEB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1CC3 JUMPI DUP1 PUSH4 0x9FDA64BD EQ PUSH2 0x17AC JUMPI DUP1 PUSH4 0xB68FB020 EQ PUSH2 0x178B JUMPI DUP1 PUSH4 0xBD61951D EQ PUSH2 0x1731 JUMPI DUP1 PUSH4 0xBF15FCD8 EQ PUSH2 0x16F7 JUMPI DUP1 PUSH4 0xBF797959 EQ PUSH2 0x16A1 JUMPI DUP1 PUSH4 0xBFA75143 EQ PUSH2 0x1688 JUMPI DUP1 PUSH4 0xC2A40753 EQ PUSH2 0x1644 JUMPI DUP1 PUSH4 0xC3CF8043 EQ PUSH2 0x15CA JUMPI DUP1 PUSH4 0xCA4ECE22 EQ PUSH2 0x158E JUMPI DUP1 PUSH4 0xCC713A04 EQ PUSH2 0xEFE JUMPI DUP1 PUSH4 0xCE3D710A EQ PUSH2 0xEB1 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE2A JUMPI DUP1 PUSH4 0xF497DF75 EQ PUSH2 0x235 JUMPI PUSH4 0xFCEA9E4E EQ PUSH2 0x1D5 JUMPI PUSH0 PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x1EE PUSH2 0x2ABC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP1 PUSH1 0xA0 SHL AND SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND OR PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH1 0x3 NOT ADD PUSH2 0x1A0 DUP2 SLT PUSH2 0x231 JUMPI PUSH2 0x100 SGT PUSH2 0x231 JUMPI PUSH2 0x124 CALLDATALOAD PUSH2 0x184 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x272 PUSH2 0x27C SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST SWAP1 PUSH2 0x164 CALLDATALOAD PUSH2 0x2FED JUMP JUMPDEST SWAP4 SWAP5 PUSH2 0x28E PUSH2 0x289 PUSH2 0x2E97 JUMP JUMPDEST PUSH2 0x307F JUMP JUMPDEST SWAP4 PUSH2 0x298 DUP6 PUSH2 0x30D0 JUMP JUMPDEST SWAP3 PUSH0 SWAP3 PUSH1 0xA4 CALLDATALOAD DUP6 EQ PUSH2 0xCE7 JUMPI JUMPDEST POP PUSH2 0x2AE PUSH2 0x34BB JUMP JUMPDEST PUSH2 0x2B8 DUP6 DUP4 PUSH2 0x36DF JUMP JUMPDEST SWAP1 ISZERO PUSH2 0xCE0 JUMPI POP PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP1 PUSH1 0xE4 CALLDATALOAD AND DUP1 ISZERO SWAP2 DUP3 ISZERO PUSH2 0xCD4 JUMPI JUMPDEST POP POP ISZERO PUSH2 0xCC2 JUMPI PUSH5 0xFFFFFFFFFF DUP1 PUSH1 0xE4 CALLDATALOAD PUSH1 0x50 SHR AND DUP1 ISZERO ISZERO SWAP1 DUP2 PUSH2 0xCB8 JUMPI JUMPDEST POP PUSH2 0xCA6 JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFA SHL AND PUSH2 0xC38 JUMPI JUMPDEST POP DUP5 PUSH2 0xBE7 JUMPI JUMPDEST PUSH2 0x164 CALLDATALOAD PUSH1 0x1 PUSH1 0xFF SHL AND ISZERO PUSH2 0xB2E JUMPI DUP4 PUSH2 0x144 CALLDATALOAD LT DUP5 PUSH2 0x144 CALLDATALOAD XOR MUL DUP5 XOR SWAP7 PUSH2 0x33E DUP8 DUP7 DUP11 DUP10 DUP8 PUSH2 0x38AF JUMP JUMPDEST SWAP9 PUSH2 0x164 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB AND DUP1 PUSH2 0xAD6 JUMPI JUMPDEST POP JUMPDEST PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFF SHL AND ISZERO ISZERO DUP1 PUSH2 0xACA JUMPI JUMPDEST PUSH2 0xAB8 JUMPI DUP10 DUP10 MUL ISZERO PUSH2 0xAA6 JUMPI PUSH2 0x37C PUSH1 0xE4 CALLDATALOAD PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0xA7C JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xE4 CALLDATALOAD PUSH1 0x80 DUP2 SWAP1 SHR PUSH4 0xFFFFFFFF AND DUP6 MSTORE SWAP3 DUP2 SWAP1 MSTORE SWAP3 KECCAK256 SLOAD SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x78 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND SHL DUP1 DUP4 AND EQ PUSH2 0xA6A JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE4 CALLDATALOAD PUSH1 0x80 SHR AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0xE4 CALLDATALOAD PUSH1 0x78 SHR AND SHL OR PUSH1 0x40 PUSH0 KECCAK256 SSTORE JUMPDEST PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFC SHL AND PUSH2 0x9AC JUMPI JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH32 0x0 SWAP1 SWAP2 AND EQ DUP1 PUSH2 0x99A JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x994 JUMPI ADDRESS JUMPDEST DUP11 PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF8 SHL AND ISZERO PUSH2 0x955 JUMPI POP PUSH2 0x457 DUP10 DUP8 PUSH2 0x3B6A JUMP JUMPDEST SWAP1 POP PUSH2 0x825 JUMPI PUSH2 0x47A SWAP1 DUP12 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x64 CALLDATALOAD AND PUSH2 0x39AE JUMP JUMPDEST PUSH2 0x924 JUMPI JUMPDEST POP PUSH1 0x13 DUP2 GT PUSH2 0x896 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x84 CALLDATALOAD DUP2 AND SWAP1 PUSH32 0x0 AND DUP2 EQ DUP1 DUP1 PUSH2 0x88D JUMPI JUMPDEST ISZERO PUSH2 0x7A6 JUMPI POP POP DUP7 CALLVALUE LT PUSH2 0x794 JUMPI DUP7 CALLVALUE GT PUSH2 0x76B JUMPI JUMPDEST PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF7 SHL AND ISZERO PUSH2 0x664 JUMPI DUP2 DUP1 DUP1 DUP1 DUP11 PUSH2 0x4F5 PUSH2 0x3A77 JUMP JUMPDEST GAS CALL PUSH2 0x4FF PUSH2 0x2DC8 JUMP JUMPDEST POP ISZERO PUSH2 0x652 JUMPI DUP6 SWAP4 JUMPDEST PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFB SHL AND PUSH2 0x577 JUMPI JUMPDEST POP POP POP PUSH1 0x40 PUSH2 0x54A PUSH2 0x573 SWAP5 SWAP4 PUSH32 0xFEC331350FCE78BA658E082A71DA20AC9F8D798A99B3C79681C8440CBFE77E07 SWAP4 PUSH2 0x327C JUMP JUMPDEST DUP2 MLOAD SWAP1 DUP5 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 PUSH1 0x40 SWAP2 SWAP5 SWAP4 SWAP3 PUSH1 0x60 DUP3 ADD SWAP6 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 POP PUSH2 0x586 DUP2 DUP4 PUSH2 0x3BCB JUMP JUMPDEST SWAP1 SWAP2 SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 DUP5 PUSH1 0x13 DUP3 GT PUSH2 0x626 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 EXTCODESIZE ISZERO PUSH2 0x622 JUMPI DUP6 DUP10 SWAP6 SWAP4 PUSH2 0x5E0 DUP3 SWAP7 SWAP5 DUP12 SWAP5 DUP12 DUP16 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP11 DUP12 SWAP10 DUP11 SWAP9 PUSH4 0x23175EF1 PUSH1 0xE1 SHL DUP11 MSTORE CALLER SWAP3 PUSH1 0x4 DUP12 ADD PUSH2 0x31B9 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x617 JUMPI SWAP1 DUP6 SWAP4 SWAP3 SWAP2 PUSH2 0x5FA JUMPI JUMPDEST DUP1 PUSH2 0x516 JUMP JUMPDEST DUP2 SWAP3 SWAP4 POP PUSH2 0x607 SWAP1 PUSH2 0x2C7F JUMP JUMPDEST PUSH2 0x614 JUMPI SWAP1 DUP2 DUP5 SWAP3 PUSH2 0x5F4 JUMP JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP2 SWAP6 POP DUP1 SWAP4 POP PUSH2 0x636 SWAP3 POP PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP1 DUP4 PUSH1 0x14 GT PUSH2 0x622 JUMPI PUSH1 0x14 ADD SWAP3 PUSH1 0x13 NOT ADD SWAP1 DUP11 DUP1 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xB12D13EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH4 0xD0E30DB PUSH1 0xE4 SHL DUP3 MSTORE DUP2 DUP1 PUSH1 0x4 DUP2 DUP11 PUSH32 0x0 GAS CALL ISZERO PUSH2 0x75E JUMPI PUSH1 0x20 DUP3 PUSH1 0x44 PUSH2 0x6A9 PUSH2 0x3A77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP12 SWAP1 MSTORE DUP3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 PUSH2 0x716 JUMPI JUMPDEST ISZERO PUSH2 0x704 JUMPI DUP6 SWAP4 PUSH2 0x508 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFB7F5079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP RETURNDATASIZE ISZERO PUSH2 0x72C JUMPI PUSH1 0x1 DUP3 MLOAD EQ PUSH1 0x1F RETURNDATASIZE GT AND PUSH2 0x6F8 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO PUSH2 0x6F8 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 DUP1 DUP1 DUP1 DUP11 CALLVALUE SUB CALLER GAS CALL PUSH2 0x77D PUSH2 0x2DC8 JUMP JUMPDEST POP PUSH2 0x4DA JUMPI PUSH1 0x40 MLOAD PUSH4 0xB12D13EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1841B4E1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP5 SWAP1 SWAP5 CALLVALUE PUSH2 0x794 JUMPI DUP1 PUSH2 0x87C JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x86F JUMPI ADDRESS JUMPDEST PUSH2 0x164 CALLDATALOAD PUSH1 0x1 PUSH1 0xFC SHL AND ISZERO PUSH2 0x837 JUMPI PUSH2 0x7D5 DUP4 DUP6 PUSH2 0x3B9B JUMP JUMPDEST SWAP1 POP PUSH2 0x825 JUMPI DUP10 PUSH2 0x7E9 SWAP2 DUP11 SWAP9 CALLER SWAP1 PUSH2 0x39AE JUMP JUMPDEST ISZERO PUSH2 0x508 JUMPI PUSH2 0x820 PUSH2 0x7F9 PUSH2 0x3A77 JUMP JUMPDEST DUP10 PUSH32 0x0 PUSH2 0x3A35 JUMP JUMPDEST PUSH2 0x508 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1577E83 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x851 SWAP2 SWAP7 DUP11 PUSH2 0x847 DUP6 DUP8 PUSH2 0x3B9B JUMP JUMPDEST SWAP4 SWAP1 SWAP3 CALLER SWAP1 PUSH2 0x395B JUMP JUMPDEST ISZERO PUSH2 0x85D JUMPI DUP7 SWAP5 PUSH2 0x7E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x478A5205 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x877 PUSH2 0x3A77 JUMP JUMPDEST PUSH2 0x7BC JUMP JUMPDEST POP PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF7 SHL AND ISZERO ISZERO PUSH2 0x7B4 JUMP JUMPDEST POP CALLVALUE ISZERO ISZERO PUSH2 0x4C4 JUMP JUMPDEST PUSH2 0x8A0 DUP2 DUP4 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP2 DUP2 PUSH1 0x14 GT PUSH2 0x920 JUMPI DUP3 EXTCODESIZE ISZERO PUSH2 0x920 JUMPI DUP4 SWAP3 PUSH1 0x14 DUP7 DUP1 SWAP5 PUSH2 0x8EB DUP13 SWAP6 DUP16 DUP16 DUP15 SWAP2 DUP15 SWAP2 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP12 DUP13 SWAP11 DUP12 SWAP10 PUSH4 0xADF38BA1 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x13 NOT ADD SWAP8 ADD SWAP6 CALLER SWAP3 PUSH1 0x4 DUP12 ADD PUSH2 0x31B9 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x915 JUMPI SWAP1 DUP4 SWAP2 ISZERO PUSH2 0x489 JUMPI PUSH2 0x906 SWAP1 PUSH2 0x2C7F JUMP JUMPDEST PUSH2 0x911 JUMPI DUP2 DUP9 PUSH2 0x489 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST PUSH2 0x94F SWAP1 DUP10 PUSH32 0x0 PUSH2 0x3A35 JUMP JUMPDEST DUP10 PUSH2 0x47F JUMP JUMPDEST PUSH2 0x97D SWAP2 PUSH2 0x963 DUP12 DUP10 PUSH2 0x3B6A JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x64 CALLDATALOAD AND PUSH2 0x395B JUMP JUMPDEST PUSH2 0x47A JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE1407E9 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x43D JUMP JUMPDEST POP PUSH2 0x164 CALLDATALOAD PUSH1 0x1 PUSH1 0xFE SHL AND ISZERO ISZERO PUSH2 0x435 JUMP JUMPDEST PUSH2 0x9B6 DUP8 DUP6 PUSH2 0x3B37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND DUP3 DUP5 PUSH1 0x13 DUP3 GT PUSH2 0xA3E JUMPI JUMPDEST POP POP DUP2 DUP2 AND EXTCODESIZE ISZERO PUSH2 0x231 JUMPI DUP12 PUSH0 DUP16 SWAP4 DUP16 SWAP7 PUSH2 0xA0A DUP16 SWAP2 SWAP8 DUP16 SWAP9 DUP6 SWAP10 DUP16 SWAP10 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP12 DUP13 SWAP11 DUP12 SWAP9 PUSH4 0x986BDD5 PUSH1 0xE0 SHL DUP11 MSTORE CALLER SWAP3 PUSH1 0x4 DUP12 ADD PUSH2 0x31B9 JUMP JUMPDEST SUB SWAP4 AND GAS CALL DUP1 ISZERO PUSH2 0xA33 JUMPI PUSH2 0xA20 JUMPI JUMPDEST POP PUSH2 0x3FC JUMP JUMPDEST PUSH2 0xA2B SWAP2 SWAP6 POP PUSH2 0x2C7F JUMP JUMPDEST PUSH0 SWAP4 DUP11 PUSH2 0xA1A JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 SWAP6 POP DUP1 SWAP5 POP PUSH2 0xA4E SWAP3 POP PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP2 DUP4 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH1 0x14 ADD SWAP3 PUSH1 0x13 NOT ADD SWAP2 DUP15 DUP1 PUSH2 0x9CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x527B154B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP9 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP9 DUP7 SUB NOT PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH2 0x3EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7DD2D13B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23BC005F PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0xA4 CALLDATALOAD DUP10 EQ ISZERO PUSH2 0x365 JUMP JUMPDEST PUSH2 0x144 CALLDATALOAD DUP11 SUB PUSH2 0xAFF JUMPI DUP11 GT PUSH2 0xAED JUMPI JUMPDEST DUP11 PUSH2 0x352 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFB8AE129 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0xB16 DUP11 PUSH2 0xB10 PUSH2 0x144 CALLDATALOAD DUP15 PUSH2 0x3133 JUMP JUMPDEST SWAP3 PUSH2 0x3133 JUMP JUMPDEST LT ISZERO PUSH2 0xAE7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFB8AE129 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x144 CALLDATALOAD SWAP8 SWAP7 PUSH2 0xB41 DUP8 DUP7 DUP12 DUP10 DUP8 PUSH2 0x37F9 JUMP JUMPDEST SWAP8 DUP6 DUP10 GT PUSH2 0xBB5 JUMPI JUMPDEST PUSH2 0x164 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB AND DUP1 PUSH2 0xB63 JUMPI JUMPDEST POP PUSH2 0x354 JUMP JUMPDEST PUSH2 0x144 CALLDATALOAD DUP12 SUB PUSH2 0xB8C JUMPI DUP10 LT PUSH2 0xB7A JUMPI JUMPDEST DUP11 PUSH2 0xB5D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x240F51C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0xB9D DUP12 PUSH2 0xB10 PUSH2 0x144 CALLDATALOAD DUP14 PUSH2 0x3133 JUMP JUMPDEST GT ISZERO PUSH2 0xB74 JUMPI PUSH1 0x40 MLOAD PUSH4 0x240F51C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP9 POP SWAP7 POP DUP4 SWAP7 PUSH2 0xBC8 DUP8 DUP7 DUP1 DUP10 DUP8 PUSH2 0x38AF JUMP JUMPDEST SWAP9 PUSH2 0x144 CALLDATALOAD DUP11 GT ISZERO PUSH2 0xB4A JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7F902A93 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0xBF1 DUP6 DUP4 PUSH2 0x3AED JUMP JUMPDEST DUP1 PUSH2 0xBFE JUMPI JUMPDEST POP POP PUSH2 0x312 JUMP JUMPDEST PUSH2 0xC08 SWAP2 ADDRESS PUSH2 0x2E73 JUMP JUMPDEST DUP2 PUSH2 0xC2D JUMPI JUMPDEST POP ISZERO PUSH2 0xC1B JUMPI DUP9 DUP1 PUSH2 0xBF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5B314E01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 POP EQ DUP10 PUSH2 0xC0E JUMP JUMPDEST PUSH2 0xC43 PUSH1 0xE4 CALLDATALOAD PUSH2 0x2E53 JUMP JUMPDEST PUSH2 0xC94 JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0xA0 DUP2 DUP2 SHR DUP4 AND SWAP1 SHL PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND OR PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x78 SWAP2 SWAP1 SWAP2 SHR SWAP1 SWAP2 AND SUB PUSH2 0xC82 JUMPI DUP9 PUSH2 0x30B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x71F45829 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9E744E25 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x62B439DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 POP TIMESTAMP GT DUP11 PUSH2 0x2F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6A6FED7F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLER AND EQ SWAP1 POP DUP10 DUP1 PUSH2 0x2D9 JUMP JUMPDEST PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND SWAP2 DUP3 ISZERO SWAP2 SWAP1 DUP3 ISZERO PUSH2 0xDB7 JUMPI JUMPDEST POP POP PUSH2 0xDA5 JUMPI PUSH2 0x164 CALLDATALOAD PUSH1 0x1 PUSH1 0xFD SHL AND PUSH2 0x2A5 JUMPI PUSH2 0xD1E DUP7 DUP5 PUSH2 0x3BFC JUMP JUMPDEST SWAP1 PUSH1 0x14 DUP3 LT ISZERO PUSH2 0xD30 JUMPI JUMPDEST POP POP PUSH2 0x2A5 JUMP JUMPDEST PUSH2 0xD3A DUP3 DUP3 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR DUP3 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH1 0x14 PUSH2 0xD5A SWAP4 PUSH1 0x13 NOT ADD SWAP3 ADD SWAP1 DUP5 ADDRESS SWAP2 PUSH2 0x3289 JUMP JUMPDEST POP PUSH2 0xD66 PUSH1 0xE4 CALLDATALOAD PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0xD73 JUMPI JUMPDEST DUP1 DUP1 PUSH2 0xD29 JUMP JUMPDEST PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP7 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH2 0xD93 JUMPI DUP9 PUSH2 0xD6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC5F2BE51 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5CD5D233 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP2 AND PUSH16 0xA2A8918CA85BAFE22016D0B997E4DF5F PUSH1 0x1 PUSH1 0xFF SHL SUB DUP2 LT PUSH2 0xDF1 JUMPI JUMPDEST POP POP AND DUP2 EQ ISZERO DUP11 DUP1 PUSH2 0xD00 JUMP JUMPDEST PUSH1 0x20 SWAP3 POP PUSH0 SWAP2 PUSH1 0x80 SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP14 DUP4 MSTORE PUSH1 0xFF SHR PUSH1 0x1B ADD DUP6 DUP4 ADD MSTORE PUSH2 0x104 CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL POP PUSH0 MLOAD DUP12 DUP1 PUSH2 0xDE4 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0xE43 PUSH2 0x2ABC JUMP JUMPDEST PUSH2 0xE4B PUSH2 0x2FC1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0xE99 JUMPI PUSH1 0x3 SLOAD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 AND OR PUSH1 0x3 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH0 DUP1 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0xEF4 PUSH2 0xECF PUSH2 0x2ABC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 CALLDATALOAD PUSH1 0xA0 SHL OR PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x44 CALLDATALOAD EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x231 JUMPI CALLDATASIZE PUSH1 0x3 NOT ADD PUSH2 0x160 DUP2 SLT PUSH2 0x231 JUMPI PUSH2 0x100 SGT PUSH2 0x231 JUMPI PUSH2 0x104 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x231 JUMPI PUSH2 0xF39 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST PUSH2 0x124 CALLDATALOAD SWAP2 SWAP1 PUSH0 PUSH2 0x144 CALLDATALOAD PUSH2 0xF4F PUSH2 0x289 PUSH2 0x2E97 JUMP JUMPDEST SWAP2 PUSH2 0xF59 DUP4 PUSH2 0x30D0 JUMP JUMPDEST SWAP4 PUSH1 0xA4 CALLDATALOAD SWAP6 DUP7 DUP7 EQ PUSH2 0x152C JUMPI JUMPDEST POP POP PUSH2 0xF70 PUSH2 0x34BB JUMP JUMPDEST PUSH2 0xF78 PUSH2 0x3779 JUMP JUMPDEST SWAP1 ISZERO PUSH2 0xCE0 JUMPI POP PUSH1 0xE4 CALLDATALOAD SWAP2 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND DUP1 ISZERO SWAP2 DUP3 ISZERO PUSH2 0x1520 JUMPI JUMPDEST POP POP ISZERO PUSH2 0xCC2 JUMPI PUSH5 0xFFFFFFFFFF DUP1 DUP5 PUSH1 0x50 SHR AND DUP1 ISZERO ISZERO SWAP1 DUP2 PUSH2 0x1516 JUMPI JUMPDEST POP PUSH2 0xCA6 JUMPI PUSH1 0x1 PUSH1 0xFA SHL DUP5 AND PUSH2 0x14D2 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0xFF SHL SWAP6 DUP2 DUP8 AND ISZERO PUSH2 0x1445 JUMPI DUP6 DUP9 LT DUP7 DUP10 XOR MUL DUP7 XOR SWAP7 PUSH2 0xFEF DUP9 PUSH1 0xC4 CALLDATALOAD DUP5 PUSH2 0x3CDA JUMP JUMPDEST SWAP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB DUP5 AND SWAP1 DUP2 PUSH2 0x1408 JUMPI JUMPDEST POP POP JUMPDEST DUP5 AND ISZERO ISZERO SWAP1 DUP2 PUSH2 0x13FD JUMPI JUMPDEST POP PUSH2 0xAB8 JUMPI DUP7 DUP7 MUL ISZERO PUSH2 0xAA6 JUMPI PUSH2 0x1025 DUP4 PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0x13D3 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH4 0xFFFFFFFF DUP5 PUSH1 0x80 SHR AND PUSH1 0x1 PUSH1 0xFF DUP7 PUSH1 0x78 SHR AND SHL SWAP2 DUP2 PUSH0 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP2 DUP4 DUP1 DUP5 AND EQ PUSH2 0xA6A JUMPI PUSH0 MSTORE PUSH1 0x20 MSTORE OR PUSH1 0x40 PUSH0 KECCAK256 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0xFC SHL SWAP2 DUP4 DUP4 AND PUSH2 0x1371 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 PUSH32 0x0 DUP1 DUP6 AND SWAP4 SWAP1 SWAP3 PUSH1 0x64 CALLDATALOAD DUP7 AND DUP6 DUP2 EQ DUP1 PUSH2 0x1362 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x135C JUMPI ADDRESS JUMPDEST PUSH1 0x1 PUSH1 0xF8 SHL DUP11 AND ISZERO PUSH2 0x1332 JUMPI PUSH2 0x10E1 DUP5 DUP1 PUSH2 0x3B6A JUMP JUMPDEST SWAP1 POP PUSH2 0x825 JUMPI DUP13 PUSH2 0x10F9 SWAP2 DUP6 SWAP5 DUP12 PUSH1 0x24 CALLDATALOAD AND SWAP1 PUSH2 0x39AE JUMP JUMPDEST PUSH2 0x1322 JUMPI JUMPDEST PUSH2 0x614 JUMPI POP SWAP1 DUP10 DUP10 SWAP3 DUP7 PUSH1 0x84 CALLDATALOAD AND DUP7 DUP2 EQ SWAP4 DUP5 DUP1 SWAP6 PUSH2 0x131B JUMPI JUMPDEST ISZERO PUSH2 0x1295 JUMPI POP POP POP SWAP2 POP POP PUSH2 0x794 JUMPI DUP8 SWAP1 PUSH1 0x1 PUSH1 0xF7 SHL DUP6 AND ISZERO PUSH2 0x121D JUMPI POP PUSH0 DUP1 DUP1 SWAP4 POP DUP1 SWAP3 PUSH2 0x1145 PUSH2 0x3A77 JUMP JUMPDEST GAS CALL PUSH2 0x114F PUSH2 0x2DC8 JUMP JUMPDEST POP ISZERO PUSH2 0x652 JUMPI DUP5 SWAP2 JUMPDEST PUSH1 0x1 PUSH1 0xFB SHL AND PUSH2 0x1194 JUMPI JUMPDEST POP PUSH1 0x40 PUSH2 0x54A PUSH32 0xFEC331350FCE78BA658E082A71DA20AC9F8D798A99B3C79681C8440CBFE77E07 SWAP3 PUSH2 0x573 SWAP6 PUSH2 0x327C JUMP JUMPDEST SWAP1 POP PUSH1 0x24 CALLDATALOAD AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x231 JUMPI PUSH0 PUSH1 0x40 MLOAD DUP1 SWAP5 PUSH4 0x23175EF1 PUSH1 0xE1 SHL DUP3 MSTORE DUP2 DUP4 DUP2 PUSH2 0x11C6 DUP8 DUP13 DUP13 CALLER DUP13 PUSH1 0x4 DUP8 ADD PUSH2 0x3221 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0xA33 JUMPI PUSH2 0x54A DUP6 PUSH1 0x40 SWAP3 PUSH2 0x573 SWAP7 PUSH32 0xFEC331350FCE78BA658E082A71DA20AC9F8D798A99B3C79681C8440CBFE77E07 SWAP6 PUSH2 0x120E JUMPI JUMPDEST POP SWAP6 POP SWAP3 POP POP PUSH2 0x1163 JUMP JUMPDEST PUSH2 0x1217 SWAP1 PUSH2 0x2C7F JUMP JUMPDEST DUP10 PUSH2 0x1203 JUMP JUMPDEST PUSH1 0x4 PUSH0 DUP1 SWAP4 DUP2 SWAP4 PUSH4 0xD0E30DB PUSH1 0xE4 SHL DUP4 MSTORE GAS CALL ISZERO PUSH2 0xA33 JUMPI PUSH1 0x20 PUSH0 PUSH1 0x44 PUSH2 0x1242 PUSH2 0x3A77 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE DUP11 PUSH1 0x24 DUP3 ADD MSTORE DUP3 DUP6 GAS CALL SWAP1 DUP2 PUSH2 0x1273 JUMPI JUMPDEST POP ISZERO PUSH2 0x704 JUMPI DUP5 SWAP2 PUSH2 0x1158 JUMP JUMPDEST SWAP1 POP RETURNDATASIZE ISZERO PUSH2 0x128D JUMPI POP PUSH1 0x1 PUSH0 MLOAD EQ PUSH1 0x1F RETURNDATASIZE GT AND JUMPDEST DUP8 PUSH2 0x1266 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO PUSH2 0x1287 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 DUP1 SWAP6 SWAP10 SWAP8 POP SWAP5 PUSH2 0x130B JUMPI JUMPDEST DUP5 ISZERO PUSH2 0x12FD JUMPI ADDRESS SWAP3 JUMPDEST AND ISZERO PUSH2 0x12E4 JUMPI SWAP1 PUSH2 0x12C0 SWAP3 SWAP2 CALLER SWAP1 PUSH2 0x39AE JUMP JUMPDEST PUSH2 0x12CB JUMPI JUMPDEST POP PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x12DE SWAP1 DUP9 PUSH2 0x12D8 PUSH2 0x3A77 JUMP JUMPDEST SWAP2 PUSH2 0x3A35 JUMP JUMPDEST DUP8 PUSH2 0x12C5 JUMP JUMPDEST PUSH2 0x12F1 SWAP4 SWAP8 POP CALLER SWAP1 PUSH2 0x3921 JUMP JUMPDEST ISZERO PUSH2 0x85D JUMPI DUP7 SWAP4 PUSH2 0x12C0 JUMP JUMPDEST PUSH2 0x1305 PUSH2 0x3A77 JUMP JUMPDEST SWAP3 PUSH2 0x12AD JUMP JUMPDEST PUSH1 0x1 PUSH1 0xF7 SHL DUP8 AND ISZERO ISZERO SWAP5 POP PUSH2 0x12A4 JUMP JUMPDEST POP PUSH0 PUSH2 0x1118 JUMP JUMPDEST PUSH2 0x132D CALLER DUP13 DUP8 PUSH2 0x3A35 JUMP JUMPDEST PUSH2 0x10FE JUMP JUMPDEST PUSH2 0x1350 SWAP2 SWAP3 DUP14 PUSH2 0x1342 DUP7 DUP1 PUSH2 0x3B6A JUMP JUMPDEST SWAP4 SWAP1 SWAP3 DUP13 PUSH1 0x24 CALLDATALOAD AND SWAP1 PUSH2 0x395B JUMP JUMPDEST ISZERO PUSH2 0x982 JUMPI DUP2 SWAP1 PUSH2 0x10F9 JUMP JUMPDEST CALLER PUSH2 0x10CB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFE SHL DUP4 AND ISZERO ISZERO PUSH2 0x10C3 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x231 JUMPI PUSH0 DUP10 DUP9 SWAP3 DUP11 DUP4 DUP11 PUSH2 0x13AD PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0x986BDD5 PUSH1 0xE0 SHL DUP7 MSTORE CALLER SWAP1 PUSH1 0x4 DUP8 ADD PUSH2 0x3221 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xA33 JUMPI PUSH2 0x13C2 JUMPI JUMPDEST POP PUSH2 0x1085 JUMP JUMPDEST PUSH2 0x13CC SWAP2 POP PUSH2 0x2C7F JUMP JUMPDEST PUSH0 DUP9 PUSH2 0x13BC JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP6 DUP6 SUB NOT PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH2 0x1077 JUMP JUMPDEST SWAP1 POP DUP7 EQ ISZERO DUP9 PUSH2 0x100F JUMP JUMPDEST DUP10 DUP2 DUP2 SUB PUSH2 0x1420 JUMPI POP POP DUP10 GT PUSH2 0xAED JUMPI JUMPDEST DUP10 DUP1 PUSH2 0x1001 JUMP JUMPDEST PUSH2 0xB10 PUSH2 0x142D SWAP3 DUP14 PUSH2 0x3133 JUMP JUMPDEST LT ISZERO PUSH2 0x1419 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFB8AE129 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0xC4 CALLDATALOAD SWAP7 DUP9 PUSH2 0x1455 DUP2 DUP11 DUP6 PUSH2 0x3CB3 JUMP JUMPDEST SWAP9 DUP9 DUP11 GT PUSH2 0x14B4 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB DUP5 AND SWAP1 DUP2 PUSH2 0x1477 JUMPI JUMPDEST POP POP PUSH2 0x1004 JUMP JUMPDEST DUP11 DUP2 DUP2 SUB PUSH2 0x148F JUMPI POP POP DUP9 LT PUSH2 0xB7A JUMPI JUMPDEST DUP10 DUP1 PUSH2 0x1470 JUMP JUMPDEST PUSH2 0xB10 PUSH2 0x149C SWAP3 DUP13 PUSH2 0x3133 JUMP JUMPDEST GT ISZERO PUSH2 0x1488 JUMPI PUSH1 0x40 MLOAD PUSH4 0x240F51C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP9 POP SWAP9 POP PUSH2 0x14C4 DUP8 DUP1 SWAP10 DUP5 PUSH2 0x3CDA JUMP JUMPDEST SWAP9 DUP1 DUP11 GT PUSH2 0xBD5 JUMPI DUP11 PUSH2 0x145E JUMP JUMPDEST PUSH2 0x14DB DUP5 PUSH2 0x2E53 JUMP JUMPDEST PUSH2 0xC94 JUMPI PUSH1 0xA0 DUP5 DUP2 SHR DUP3 AND SWAP1 SHL PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND OR PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x78 DUP6 SWAP1 SHR SWAP1 SWAP2 AND SUB PUSH2 0xC82 JUMPI DUP8 PUSH2 0xFC9 JUMP JUMPDEST SWAP1 POP TIMESTAMP GT DUP10 PUSH2 0xFB8 JUMP JUMPDEST CALLER AND EQ SWAP1 POP DUP9 DUP1 PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 PUSH0 DUP1 SWAP4 PUSH1 0x40 MLOAD SWAP1 DUP1 PUSH4 0xB135D3F PUSH1 0xE1 SHL SWAP6 DUP7 DUP5 MSTORE DUP11 PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP6 ADD MSTORE DUP2 PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x64 DUP5 ADD CALLDATACOPY PUSH1 0x64 ADD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL PUSH2 0x157E JUMPI JUMPDEST POP ISZERO PUSH2 0xDA5 JUMPI DUP7 DUP1 PUSH2 0xF66 JUMP JUMPDEST PUSH0 MLOAD EQ RETURNDATASIZE PUSH1 0x20 EQ AND SWAP1 POP DUP8 PUSH2 0x1571 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0x15AB PUSH2 0x15A1 CALLDATASIZE PUSH2 0x2AFF JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 ADDRESS PUSH2 0x2E73 JUMP JUMPDEST DUP2 SWAP3 SWAP2 SWAP3 PUSH2 0x15C0 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST LT SWAP1 POP DUP3 DUP1 PUSH2 0x15B4 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x15E3 PUSH2 0x2AA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP2 PUSH1 0xA0 SHL AND CALLER OR PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD DUP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x40 MLOAD SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x99133AEFC2C2D1E56F8EF3622EC8E80979A0713FC9C4E1497740EFCF8099396 PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1665 PUSH2 0x2ABC JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0xEF4 PUSH2 0x169B CALLDATASIZE PUSH2 0x2AFF JUMP JUMPDEST SWAP2 PUSH2 0x2DF7 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x16DD PUSH2 0x16D6 PUSH1 0x20 SWAP3 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST SWAP1 ADDRESS PUSH2 0x2E73 JUMP JUMPDEST DUP2 PUSH2 0x16EE JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 POP ISZERO DUP3 PUSH2 0x16E3 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH2 0x170E PUSH2 0x1708 CALLDATASIZE PUSH2 0x2BA0 JUMP JUMPDEST SWAP2 PUSH2 0x2E73 JUMP JUMPDEST SWAP1 ISZERO PUSH2 0x171F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1F1B8F61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 DUP1 PUSH2 0x1741 CALLDATASIZE PUSH2 0x2BA0 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 CALLDATACOPY DUP2 ADD DUP5 DUP2 MSTORE SUB SWAP2 GAS DELEGATECALL PUSH2 0x175C PUSH2 0x2DC8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x32695F9 PUSH1 0xE3 SHL DUP2 MSTORE SWAP3 ISZERO ISZERO PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD MSTORE DUP2 SWAP1 PUSH2 0x1787 SWAP1 PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0x2B32 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x17AA PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x2CF2 JUMP JUMPDEST STOP JUMPDEST CALLDATASIZE PUSH1 0x3 NOT ADD PUSH2 0x180 DUP2 SLT PUSH2 0x231 JUMPI PUSH2 0x100 SGT PUSH2 0x231 JUMPI PUSH2 0x144 CALLDATALOAD PUSH2 0x124 CALLDATALOAD PUSH0 PUSH2 0x164 CALLDATALOAD PUSH2 0x17DA PUSH2 0x289 PUSH2 0x2E97 JUMP JUMPDEST SWAP1 PUSH2 0x17E4 DUP3 PUSH2 0x30D0 JUMP JUMPDEST SWAP3 PUSH1 0xA4 CALLDATALOAD SWAP5 DUP6 DUP6 EQ PUSH2 0x1C28 JUMPI JUMPDEST POP PUSH2 0x17FA PUSH2 0x34BB JUMP JUMPDEST PUSH2 0x1802 PUSH2 0x3779 JUMP JUMPDEST SWAP1 ISZERO PUSH2 0xCE0 JUMPI POP PUSH1 0xE4 CALLDATALOAD SWAP2 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND DUP1 ISZERO SWAP2 DUP3 ISZERO PUSH2 0x1C1C JUMPI JUMPDEST POP POP ISZERO PUSH2 0xCC2 JUMPI PUSH5 0xFFFFFFFFFF DUP1 DUP5 PUSH1 0x50 SHR AND DUP1 ISZERO ISZERO SWAP1 DUP2 PUSH2 0x1C12 JUMPI JUMPDEST POP PUSH2 0xCA6 JUMPI PUSH1 0x1 PUSH1 0xFA SHL DUP5 AND PUSH2 0x1BCE JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0xFF SHL SWAP6 DUP2 DUP8 AND ISZERO PUSH2 0x1B41 JUMPI DUP6 DUP9 LT DUP7 DUP10 XOR MUL DUP7 XOR SWAP7 PUSH2 0x1879 DUP9 PUSH1 0xC4 CALLDATALOAD DUP5 PUSH2 0x3CDA JUMP JUMPDEST SWAP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB DUP5 AND SWAP1 DUP2 PUSH2 0x1B04 JUMPI JUMPDEST POP POP JUMPDEST DUP5 AND ISZERO ISZERO SWAP1 DUP2 PUSH2 0x1AF9 JUMPI JUMPDEST POP PUSH2 0xAB8 JUMPI DUP7 DUP7 MUL ISZERO PUSH2 0xAA6 JUMPI PUSH2 0x18AF DUP4 PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0x1ACF JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH4 0xFFFFFFFF DUP5 PUSH1 0x80 SHR AND PUSH1 0x1 PUSH1 0xFF DUP7 PUSH1 0x78 SHR AND SHL SWAP2 DUP2 PUSH0 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP2 DUP4 DUP1 DUP5 AND EQ PUSH2 0xA6A JUMPI PUSH0 MSTORE PUSH1 0x20 MSTORE OR PUSH1 0x40 PUSH0 KECCAK256 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0xFC SHL SWAP2 DUP4 DUP4 AND PUSH2 0x1A6D JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 PUSH32 0x0 DUP1 DUP6 AND SWAP4 SWAP1 SWAP3 PUSH1 0x64 CALLDATALOAD DUP7 AND DUP6 DUP2 EQ DUP1 PUSH2 0x1A5E JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1A58 JUMPI ADDRESS JUMPDEST PUSH1 0x1 PUSH1 0xF8 SHL DUP11 AND ISZERO PUSH2 0x1A3C JUMPI PUSH2 0x196B DUP5 DUP1 PUSH2 0x3B6A JUMP JUMPDEST SWAP1 POP PUSH2 0x825 JUMPI DUP13 PUSH2 0x1983 SWAP2 DUP6 SWAP5 DUP12 PUSH1 0x24 CALLDATALOAD AND SWAP1 PUSH2 0x39AE JUMP JUMPDEST PUSH2 0x1A2C JUMPI JUMPDEST PUSH2 0x614 JUMPI POP PUSH1 0x84 CALLDATALOAD DUP6 AND SWAP2 DUP5 DUP4 EQ SWAP2 DUP3 DUP1 PUSH2 0x1A23 JUMPI JUMPDEST ISZERO PUSH2 0x19F4 JUMPI POP POP POP POP DUP8 CALLVALUE LT PUSH2 0x794 JUMPI DUP8 SWAP1 DUP2 CALLVALUE GT PUSH2 0x19D4 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0xF7 SHL DUP6 AND ISZERO PUSH2 0x121D JUMPI POP PUSH0 DUP1 DUP1 SWAP4 POP DUP1 SWAP3 PUSH2 0x1145 PUSH2 0x3A77 JUMP JUMPDEST SWAP1 PUSH0 DUP1 DUP1 DUP1 SWAP4 CALLVALUE SUB CALLER GAS CALL PUSH2 0x19E7 PUSH2 0x2DC8 JUMP JUMPDEST POP ISZERO PUSH2 0x652 JUMPI DUP8 SWAP1 PUSH2 0x19B8 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP7 SWAP5 POP CALLVALUE PUSH2 0x794 JUMPI DUP10 SWAP7 DUP12 SWAP3 DUP5 PUSH2 0x130B JUMPI DUP5 ISZERO PUSH2 0x12FD JUMPI ADDRESS SWAP3 AND ISZERO PUSH2 0x12E4 JUMPI SWAP1 PUSH2 0x12C0 SWAP3 SWAP2 CALLER SWAP1 PUSH2 0x39AE JUMP JUMPDEST POP CALLVALUE ISZERO ISZERO PUSH2 0x199E JUMP JUMPDEST PUSH2 0x1A37 CALLER DUP13 DUP8 PUSH2 0x3A35 JUMP JUMPDEST PUSH2 0x1988 JUMP JUMPDEST PUSH2 0x1A4C SWAP2 SWAP3 DUP14 PUSH2 0x1342 DUP7 DUP1 PUSH2 0x3B6A JUMP JUMPDEST ISZERO PUSH2 0x982 JUMPI DUP2 SWAP1 PUSH2 0x1983 JUMP JUMPDEST CALLER PUSH2 0x1955 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFE SHL DUP4 AND ISZERO ISZERO PUSH2 0x194D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x231 JUMPI PUSH0 DUP10 DUP9 SWAP3 DUP11 DUP4 DUP11 PUSH2 0x1AA9 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0x986BDD5 PUSH1 0xE0 SHL DUP7 MSTORE CALLER SWAP1 PUSH1 0x4 DUP8 ADD PUSH2 0x3221 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xA33 JUMPI PUSH2 0x1ABE JUMPI JUMPDEST POP PUSH2 0x190F JUMP JUMPDEST PUSH2 0x1AC8 SWAP2 POP PUSH2 0x2C7F JUMP JUMPDEST PUSH0 DUP9 PUSH2 0x1AB8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP6 DUP6 SUB NOT PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH2 0x1901 JUMP JUMPDEST SWAP1 POP DUP7 EQ ISZERO DUP9 PUSH2 0x1899 JUMP JUMPDEST DUP10 DUP2 DUP2 SUB PUSH2 0x1B1C JUMPI POP POP DUP10 GT PUSH2 0xAED JUMPI JUMPDEST DUP10 DUP1 PUSH2 0x188B JUMP JUMPDEST PUSH2 0xB10 PUSH2 0x1B29 SWAP3 DUP14 PUSH2 0x3133 JUMP JUMPDEST LT ISZERO PUSH2 0x1B15 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFB8AE129 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0xC4 CALLDATALOAD SWAP7 DUP9 PUSH2 0x1B51 DUP2 DUP11 DUP6 PUSH2 0x3CB3 JUMP JUMPDEST SWAP9 DUP9 DUP11 GT PUSH2 0x1BB0 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB DUP5 AND SWAP1 DUP2 PUSH2 0x1B73 JUMPI JUMPDEST POP POP PUSH2 0x188E JUMP JUMPDEST DUP11 DUP2 DUP2 SUB PUSH2 0x1B8B JUMPI POP POP DUP9 LT PUSH2 0xB7A JUMPI JUMPDEST DUP10 DUP1 PUSH2 0x1B6C JUMP JUMPDEST PUSH2 0xB10 PUSH2 0x1B98 SWAP3 DUP13 PUSH2 0x3133 JUMP JUMPDEST GT ISZERO PUSH2 0x1B84 JUMPI PUSH1 0x40 MLOAD PUSH4 0x240F51C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP9 POP SWAP9 POP PUSH2 0x1BC0 DUP8 DUP1 SWAP10 DUP5 PUSH2 0x3CDA JUMP JUMPDEST SWAP9 DUP1 DUP11 GT PUSH2 0xBD5 JUMPI DUP11 PUSH2 0x1B5A JUMP JUMPDEST PUSH2 0x1BD7 DUP5 PUSH2 0x2E53 JUMP JUMPDEST PUSH2 0xC94 JUMPI PUSH1 0xA0 DUP5 DUP2 SHR DUP3 AND SWAP1 SHL PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND OR PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x78 DUP6 SWAP1 SHR SWAP1 SWAP2 AND SUB PUSH2 0xC82 JUMPI DUP8 PUSH2 0x1853 JUMP JUMPDEST SWAP1 POP TIMESTAMP GT DUP10 PUSH2 0x1842 JUMP JUMPDEST CALLER AND EQ SWAP1 POP DUP9 DUP1 PUSH2 0x1825 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND DUP1 ISZERO SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ISZERO PUSH2 0x1C4F JUMPI JUMPDEST POP POP POP PUSH2 0xDA5 JUMPI DUP7 PUSH2 0x17F1 JUMP JUMPDEST SWAP2 SWAP3 POP SWAP1 PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP2 AND PUSH16 0xA2A8918CA85BAFE22016D0B997E4DF5F PUSH1 0x1 PUSH1 0xFF SHL SUB DUP2 LT PUSH2 0x1C8A JUMPI JUMPDEST POP POP AND EQ ISZERO DUP8 DUP1 DUP1 PUSH2 0x1C42 JUMP JUMPDEST PUSH1 0x20 SWAP3 POP PUSH0 SWAP2 PUSH1 0x80 SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP11 DUP4 MSTORE PUSH1 0xFF SHR PUSH1 0x1B ADD DUP6 DUP4 ADD MSTORE PUSH2 0x104 CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL POP PUSH0 MLOAD DUP10 DUP1 PUSH2 0x1C7D JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x1D1C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2B70 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x1D36 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2B70 JUMP JUMPDEST SWAP1 DUP2 DUP4 SUB PUSH2 0x1D73 JUMPI PUSH0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1D49 JUMPI STOP JUMPDEST DUP1 PUSH2 0x1D6D PUSH2 0x1D5A PUSH1 0x1 SWAP4 DUP8 DUP10 PUSH2 0x2CCE JUMP JUMPDEST CALLDATALOAD PUSH2 0x1D66 DUP4 DUP8 DUP8 PUSH2 0x2CCE JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x2CF2 JUMP JUMPDEST ADD PUSH2 0x1D40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1B2F9B3B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x1DBE PUSH32 0x0 PUSH2 0x34DC JUMP JUMPDEST PUSH2 0x1DE7 PUSH32 0x0 PUSH2 0x35FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP3 DUP3 DUP5 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 GT OR PUSH2 0x1E8B JUMPI SWAP2 PUSH1 0x20 PUSH2 0x1E40 DUP6 SWAP5 PUSH2 0x1E32 SWAP8 SWAP7 PUSH1 0x40 MSTORE PUSH0 DUP5 MSTORE PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 PUSH1 0xF PUSH1 0xF8 SHL DUP10 MSTORE PUSH1 0xE0 DUP6 DUP11 ADD MSTORE PUSH1 0xE0 DUP10 ADD SWAP1 PUSH2 0x2B32 JUMP JUMPDEST SWAP1 DUP8 DUP3 SUB PUSH1 0x40 DUP10 ADD MSTORE PUSH2 0x2B32 JUMP JUMPDEST SWAP2 CHAINID PUSH1 0x60 DUP8 ADD MSTORE ADDRESS PUSH1 0x80 DUP8 ADD MSTORE PUSH0 PUSH1 0xA0 DUP8 ADD MSTORE DUP6 DUP4 SUB PUSH1 0xC0 DUP8 ADD MSTORE MLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP3 SWAP2 PUSH0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1E74 JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x1E65 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x1EB7 PUSH2 0x2FC1 JUMP JUMPDEST PUSH2 0x1EBF PUSH2 0x34BB JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 SWAP1 PUSH1 0x20 SWAP1 LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH2 0x100 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x231 JUMPI PUSH1 0x42 PUSH1 0x20 SWAP2 PUSH2 0x120 PUSH2 0x1F23 PUSH2 0x2E97 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x3AF21EC5A20011B88D3B7B4ED7C806CEF05A5980CF34974BCD53566A131F7E4C DUP3 MSTORE PUSH1 0x4 DUP7 DUP4 ADD CALLDATACOPY KECCAK256 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1901 PUSH1 0xF0 SHL DUP4 MSTORE PUSH1 0x2 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE KECCAK256 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0xEF4 PUSH2 0x1F84 CALLDATASIZE PUSH2 0x2AFF JUMP JUMPDEST SWAP2 PUSH2 0x2C28 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x1FA2 PUSH2 0x2FC1 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0x1FF8 PUSH2 0x15A1 CALLDATASIZE PUSH2 0x2AFF JUMP JUMPDEST DUP2 SWAP3 SWAP2 SWAP3 PUSH2 0x200C JUMPI POP POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST EQ SWAP1 POP DUP3 DUP1 PUSH2 0x15B4 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x3 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x2067 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x2080 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST PUSH2 0x208D DUP5 DUP5 SWAP6 SWAP4 SWAP6 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP2 DUP1 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH0 SWAP4 DUP5 SWAP4 PUSH2 0x20B3 SWAP3 PUSH1 0x13 NOT ADD SWAP2 PUSH1 0x14 ADD SWAP1 ADDRESS SWAP1 CALLER SWAP1 PUSH2 0x3289 JUMP JUMPDEST POP DUP1 PUSH1 0x40 MLOAD SWAP5 DUP6 CALLDATACOPY DUP4 ADDRESS GAS DELEGATECALL RETURNDATASIZE PUSH0 DUP4 RETURNDATACOPY ISZERO PUSH2 0x20CC JUMPI RETURNDATASIZE SWAP1 RETURN JUMPDEST RETURNDATASIZE SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI CALLDATASIZE PUSH1 0x3 NOT ADD PUSH2 0x180 DUP2 SLT PUSH2 0x231 JUMPI PUSH2 0x100 SGT PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x104 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x210C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x164 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x212A PUSH2 0x2134 SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST SWAP1 PUSH2 0x144 CALLDATALOAD PUSH2 0x2FED JUMP JUMPDEST SWAP5 SWAP2 SWAP3 PUSH2 0x2146 PUSH2 0x289 SWAP8 SWAP3 SWAP6 SWAP8 PUSH2 0x2E97 JUMP JUMPDEST SWAP5 PUSH2 0x2150 DUP7 PUSH2 0x30D0 JUMP JUMPDEST SWAP4 PUSH0 SWAP4 PUSH1 0xA4 CALLDATALOAD DUP7 EQ PUSH2 0x2749 JUMPI JUMPDEST POP POP PUSH2 0x2167 PUSH2 0x34BB JUMP JUMPDEST PUSH2 0x2171 DUP6 DUP4 PUSH2 0x36DF JUMP JUMPDEST SWAP1 ISZERO PUSH2 0xCE0 JUMPI POP PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP1 PUSH1 0xE4 CALLDATALOAD AND DUP1 ISZERO SWAP2 DUP3 ISZERO PUSH2 0x273D JUMPI JUMPDEST POP POP ISZERO PUSH2 0xCC2 JUMPI PUSH5 0xFFFFFFFFFF DUP1 PUSH1 0xE4 CALLDATALOAD PUSH1 0x50 SHR AND DUP1 ISZERO ISZERO SWAP1 DUP2 PUSH2 0x2733 JUMPI JUMPDEST POP PUSH2 0xCA6 JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFA SHL AND PUSH2 0x26E9 JUMPI JUMPDEST POP DUP5 PUSH2 0x26AA JUMPI JUMPDEST PUSH2 0x144 CALLDATALOAD PUSH1 0x1 PUSH1 0xFF SHL AND ISZERO PUSH2 0x2604 JUMPI DUP4 PUSH2 0x124 CALLDATALOAD LT DUP5 PUSH2 0x124 CALLDATALOAD XOR MUL DUP5 XOR SWAP7 PUSH2 0x21F7 DUP8 DUP7 DUP11 DUP10 DUP8 PUSH2 0x38AF JUMP JUMPDEST SWAP9 PUSH2 0x144 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB AND DUP1 PUSH2 0x25C4 JUMPI JUMPDEST POP JUMPDEST PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFF SHL AND ISZERO ISZERO DUP1 PUSH2 0x25B8 JUMPI JUMPDEST PUSH2 0xAB8 JUMPI DUP10 DUP10 MUL ISZERO PUSH2 0xAA6 JUMPI PUSH2 0x2235 PUSH1 0xE4 CALLDATALOAD PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0x258E JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xE4 CALLDATALOAD PUSH1 0x80 DUP2 SWAP1 SHR PUSH4 0xFFFFFFFF AND DUP6 MSTORE SWAP3 DUP2 SWAP1 MSTORE SWAP3 KECCAK256 SLOAD SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x78 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND SHL DUP1 DUP4 AND EQ PUSH2 0xA6A JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE4 CALLDATALOAD PUSH1 0x80 SHR AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0xE4 CALLDATALOAD PUSH1 0x78 SHR AND SHL OR PUSH1 0x40 PUSH0 KECCAK256 SSTORE JUMPDEST PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFC SHL AND PUSH2 0x24DB JUMPI JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH32 0x0 SWAP1 SWAP2 AND EQ DUP1 PUSH2 0x24C9 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x24C3 JUMPI ADDRESS JUMPDEST DUP11 PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF8 SHL AND ISZERO PUSH2 0x249F JUMPI POP PUSH2 0x2310 DUP10 DUP8 PUSH2 0x3B6A JUMP JUMPDEST SWAP1 POP PUSH2 0x825 JUMPI PUSH2 0x2333 SWAP1 DUP12 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x64 CALLDATALOAD AND PUSH2 0x39AE JUMP JUMPDEST PUSH2 0x246E JUMPI JUMPDEST POP PUSH1 0x13 DUP2 GT PUSH2 0x23F3 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x84 CALLDATALOAD DUP2 AND SWAP1 PUSH32 0x0 AND DUP2 EQ DUP1 DUP1 PUSH2 0x23EC JUMPI JUMPDEST ISZERO PUSH2 0x23A4 JUMPI POP POP DUP7 PUSH2 0x794 JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF7 SHL AND ISZERO PUSH2 0x664 JUMPI DUP2 DUP1 DUP1 DUP1 DUP11 PUSH2 0x4F5 PUSH2 0x3A77 JUMP JUMPDEST SWAP1 SWAP5 SWAP1 DUP1 PUSH2 0x23DB JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x23CE JUMPI ADDRESS JUMPDEST PUSH2 0x144 CALLDATALOAD PUSH1 0x1 PUSH1 0xFC SHL AND ISZERO PUSH2 0x837 JUMPI PUSH2 0x7D5 DUP4 DUP6 PUSH2 0x3B9B JUMP JUMPDEST PUSH2 0x23D6 PUSH2 0x3A77 JUMP JUMPDEST PUSH2 0x23B5 JUMP JUMPDEST POP PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF7 SHL AND ISZERO ISZERO PUSH2 0x23AD JUMP JUMPDEST POP PUSH0 PUSH2 0x237D JUMP JUMPDEST PUSH2 0x23FD DUP2 DUP4 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP2 DUP2 PUSH1 0x14 GT PUSH2 0x920 JUMPI DUP3 EXTCODESIZE ISZERO PUSH2 0x920 JUMPI DUP4 SWAP3 PUSH1 0x14 DUP7 DUP1 SWAP5 PUSH2 0x2448 DUP13 SWAP6 DUP16 DUP16 DUP15 SWAP2 DUP15 SWAP2 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP12 DUP13 SWAP11 DUP12 SWAP10 PUSH4 0xADF38BA1 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x13 NOT ADD SWAP8 ADD SWAP6 CALLER SWAP3 PUSH1 0x4 DUP12 ADD PUSH2 0x31B9 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x915 JUMPI SWAP1 DUP4 SWAP2 ISZERO PUSH2 0x2342 JUMPI PUSH2 0x2463 SWAP1 PUSH2 0x2C7F JUMP JUMPDEST PUSH2 0x911 JUMPI DUP2 DUP9 PUSH2 0x2342 JUMP JUMPDEST PUSH2 0x2499 SWAP1 DUP10 PUSH32 0x0 PUSH2 0x3A35 JUMP JUMPDEST DUP10 PUSH2 0x2338 JUMP JUMPDEST PUSH2 0x24AD SWAP2 PUSH2 0x963 DUP12 DUP10 PUSH2 0x3B6A JUMP JUMPDEST PUSH2 0x2333 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE1407E9 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x22F6 JUMP JUMPDEST POP PUSH2 0x144 CALLDATALOAD PUSH1 0x1 PUSH1 0xFE SHL AND ISZERO ISZERO PUSH2 0x22EE JUMP JUMPDEST PUSH2 0x24E5 DUP8 DUP6 PUSH2 0x3B37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND DUP3 DUP5 PUSH1 0x13 DUP3 GT PUSH2 0x2562 JUMPI JUMPDEST POP POP DUP2 DUP2 AND EXTCODESIZE ISZERO PUSH2 0x231 JUMPI DUP12 PUSH0 DUP16 SWAP4 DUP16 SWAP7 PUSH2 0x2539 DUP16 SWAP2 SWAP8 DUP16 SWAP9 DUP6 SWAP10 DUP16 SWAP10 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP12 DUP13 SWAP11 DUP12 SWAP9 PUSH4 0x986BDD5 PUSH1 0xE0 SHL DUP11 MSTORE CALLER SWAP3 PUSH1 0x4 DUP12 ADD PUSH2 0x31B9 JUMP JUMPDEST SUB SWAP4 AND GAS CALL DUP1 ISZERO PUSH2 0xA33 JUMPI PUSH2 0x254F JUMPI JUMPDEST POP PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x255A SWAP2 SWAP6 POP PUSH2 0x2C7F JUMP JUMPDEST PUSH0 SWAP4 DUP11 PUSH2 0x2549 JUMP JUMPDEST DUP2 SWAP6 POP DUP1 SWAP5 POP PUSH2 0x2572 SWAP3 POP PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP2 DUP4 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH1 0x14 ADD SWAP3 PUSH1 0x13 NOT ADD SWAP2 DUP15 DUP1 PUSH2 0x24FD JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP9 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP9 DUP7 SUB NOT PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH2 0x22A7 JUMP JUMPDEST POP PUSH1 0xA4 CALLDATALOAD DUP10 EQ ISZERO PUSH2 0x221E JUMP JUMPDEST PUSH2 0x124 CALLDATALOAD DUP11 SUB PUSH2 0x25DB JUMPI DUP11 GT PUSH2 0xAED JUMPI JUMPDEST DUP11 PUSH2 0x220B JUMP JUMPDEST PUSH2 0x25EC DUP11 PUSH2 0xB10 PUSH2 0x124 CALLDATALOAD DUP15 PUSH2 0x3133 JUMP JUMPDEST LT ISZERO PUSH2 0x25D5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFB8AE129 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x124 CALLDATALOAD SWAP8 SWAP7 PUSH2 0x2617 DUP8 DUP7 DUP12 DUP10 DUP8 PUSH2 0x37F9 JUMP JUMPDEST SWAP8 DUP6 DUP10 GT PUSH2 0x2679 JUMPI JUMPDEST PUSH2 0x144 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB AND DUP1 PUSH2 0x2639 JUMPI JUMPDEST POP PUSH2 0x220D JUMP JUMPDEST PUSH2 0x124 CALLDATALOAD DUP12 SUB PUSH2 0x2650 JUMPI DUP10 LT PUSH2 0xB7A JUMPI JUMPDEST DUP11 PUSH2 0x2633 JUMP JUMPDEST PUSH2 0x2661 DUP12 PUSH2 0xB10 PUSH2 0x124 CALLDATALOAD DUP14 PUSH2 0x3133 JUMP JUMPDEST GT ISZERO PUSH2 0x264A JUMPI PUSH1 0x40 MLOAD PUSH4 0x240F51C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP9 POP SWAP7 POP DUP4 SWAP7 PUSH2 0x268C DUP8 DUP7 DUP1 DUP10 DUP8 PUSH2 0x38AF JUMP JUMPDEST SWAP9 PUSH2 0x124 CALLDATALOAD DUP11 GT ISZERO PUSH2 0x2620 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7F902A93 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x26B4 DUP6 DUP4 PUSH2 0x3AED JUMP JUMPDEST DUP1 PUSH2 0x26C1 JUMPI JUMPDEST POP POP PUSH2 0x21CB JUMP JUMPDEST PUSH2 0x26CB SWAP2 ADDRESS PUSH2 0x2E73 JUMP JUMPDEST DUP2 PUSH2 0x26DE JUMPI JUMPDEST POP ISZERO PUSH2 0xC1B JUMPI DUP9 DUP1 PUSH2 0x26BA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP EQ DUP10 PUSH2 0x26D1 JUMP JUMPDEST PUSH2 0x26F4 PUSH1 0xE4 CALLDATALOAD PUSH2 0x2E53 JUMP JUMPDEST PUSH2 0xC94 JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0xA0 DUP2 DUP2 SHR DUP4 AND SWAP1 SHL PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND OR PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x78 SWAP2 SWAP1 SWAP2 SHR SWAP1 SWAP2 AND SUB PUSH2 0xC82 JUMPI DUP9 PUSH2 0x21C4 JUMP JUMPDEST SWAP1 POP TIMESTAMP GT DUP11 PUSH2 0x21B1 JUMP JUMPDEST CALLER AND EQ SWAP1 POP DUP10 DUP1 PUSH2 0x2192 JUMP JUMPDEST PUSH1 0x20 PUSH0 DUP1 SWAP4 PUSH1 0x40 MLOAD SWAP1 DUP1 PUSH4 0xB135D3F PUSH1 0xE1 SHL SWAP6 DUP7 DUP5 MSTORE DUP14 PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP6 ADD MSTORE DUP2 PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x64 DUP5 ADD CALLDATACOPY PUSH1 0x64 ADD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL PUSH2 0x279B JUMPI JUMPDEST POP ISZERO PUSH2 0xDA5 JUMPI DUP9 DUP1 PUSH2 0x215D JUMP JUMPDEST PUSH0 MLOAD EQ RETURNDATASIZE PUSH1 0x20 EQ AND SWAP1 POP DUP10 PUSH2 0x278E JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0x27BE PUSH2 0x15A1 CALLDATASIZE PUSH2 0x2AFF JUMP JUMPDEST DUP2 SWAP3 SWAP2 SWAP3 PUSH2 0x27D2 JUMPI POP POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST GT SWAP1 POP DUP3 DUP1 PUSH2 0x15B4 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x27FD PUSH2 0x2ABC JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x2828 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 NOT DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xAA3EEF95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x2852 PUSH2 0x2FC1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND ISZERO PUSH2 0x2899 JUMPI PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x3 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA SWAP1 PUSH1 0x20 SWAP1 LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0x28C5 PUSH2 0x2E97 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x2902 PUSH2 0x16D6 PUSH1 0x20 SWAP3 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST DUP2 PUSH2 0x2912 JUMPI POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x1 SWAP2 POP EQ DUP3 PUSH2 0x16E3 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x293E PUSH2 0x2ABC JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH1 0x8 SHR PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x297D PUSH2 0x2AA6 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP1 ISZERO DUP1 ISZERO PUSH2 0x29FF JUMPI JUMPDEST PUSH2 0x29ED JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 PUSH1 0xA0 SHL AND CALLER OR PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 DUP2 SLOAD ADD DUP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x40 MLOAD SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x99133AEFC2C2D1E56F8EF3622EC8E80979A0713FC9C4E1497740EFCF8099396 PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x555FBBBF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF DUP2 GT PUSH2 0x2989 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x2A27 DUP3 PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0x2A97 JUMPI POP CALLER PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH4 0xFFFFFFFF DUP2 PUSH1 0x80 SHR AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0xFF PUSH1 0x24 CALLDATALOAD SWAP3 PUSH1 0x78 SHR AND SHL OR DUP2 SLOAD OR DUP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xCDA0F7E73D07BDB14B141F2CF4745926629A1B63E7C6A3DD8A80232CB459A850 PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH4 0x435FFD65 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x231 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x231 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x231 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x231 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x231 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x231 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x231 JUMPI PUSH2 0x2B2E SWAP2 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x2B5C JUMPI POP POP DUP3 PUSH0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x2B3C JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x231 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x231 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x231 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x231 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x231 JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x231 JUMPI PUSH2 0x2B2E SWAP2 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 CALLDATALOAD DUP2 DUP2 AND SWAP4 SWAP3 PUSH1 0x14 DUP2 LT PUSH2 0x2C01 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x14 SUB PUSH1 0x3 SHL DUP3 SWAP1 SHL AND AND SWAP2 POP JUMP JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x231 JUMPI DUP5 GT PUSH2 0x231 JUMPI DUP2 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH0 JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x2C75 JUMPI PUSH2 0x16D6 DUP3 PUSH2 0x2C4B SWAP3 DUP9 DUP9 PUSH2 0x2C10 JUMP JUMPDEST DUP2 PUSH2 0x2C6A JUMPI JUMPDEST POP PUSH2 0x2C60 JUMPI SWAP1 PUSH1 0x20 SHR SWAP1 PUSH2 0x2C2E JUMP JUMPDEST POP POP SWAP2 POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP EQ PUSH0 PUSH2 0x2C51 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1E8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1E8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1E8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x2CDE JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH2 0x2CFC DUP3 PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0x2D67 JUMPI POP CALLER PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH4 0xFFFFFFFF DUP2 PUSH1 0x80 SHR AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SWAP3 PUSH1 0x78 SHR AND SHL DUP2 SLOAD OR DUP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xCDA0F7E73D07BDB14B141F2CF4745926629A1B63E7C6A3DD8A80232CB459A850 PUSH1 0x40 CALLER SWAP3 LOG2 JUMP JUMPDEST PUSH32 0x5152ABF959F6564662358C2E52B702259B78BAC5EE7842A0F01937E670EFCC7D SWAP2 POP PUSH1 0x20 SWAP1 CALLER PUSH0 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 PUSH0 MSTORE DUP3 MSTORE PUSH0 NOT PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1E8B JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x2DF2 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x2DD9 DUP3 PUSH2 0x2DAD JUMP JUMPDEST SWAP2 PUSH2 0x2DE7 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x2CAD JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH0 JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x2E48 JUMPI PUSH2 0x16D6 DUP3 PUSH2 0x2E1A SWAP3 DUP9 DUP9 PUSH2 0x2C10 JUMP JUMPDEST SWAP1 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x2E3C JUMPI JUMPDEST POP PUSH2 0x2E33 JUMPI SWAP1 PUSH1 0x20 SHR SWAP1 PUSH2 0x2DFD JUMP JUMPDEST POP POP SWAP2 POP POP PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP EQ ISZERO PUSH0 PUSH2 0x2E24 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF SHL DUP2 AND ISZERO DUP1 ISZERO SWAP2 SWAP1 PUSH2 0x2E67 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFE SHL AND ISZERO SWAP2 SWAP1 POP JUMP JUMPDEST SWAP2 PUSH0 SWAP1 PUSH1 0x20 SWAP3 DUP3 SWAP5 DUP3 PUSH1 0x40 MLOAD SWAP3 DUP4 CALLDATACOPY GAS STATICCALL PUSH1 0x20 RETURNDATASIZE EQ AND SWAP2 DUP3 PUSH2 0x2E91 JUMPI JUMP JUMPDEST PUSH0 MLOAD SWAP2 POP JUMP JUMPDEST ADDRESS PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x2F98 JUMPI JUMPDEST ISZERO PUSH2 0x2EF2 JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP3 MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1E8B JUMPI PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP PUSH32 0x0 CHAINID EQ PUSH2 0x2EC9 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x2FD5 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0xFB SHL DUP2 AND ISZERO PUSH2 0x3076 JUMPI PUSH2 0x3007 DUP3 DUP6 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP4 DUP3 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH1 0x14 ADD SWAP2 PUSH1 0x13 NOT ADD SWAP3 JUMPDEST PUSH3 0xFFFFFF PUSH1 0xE0 DUP4 SWAP1 SHR DUP2 AND SWAP5 DUP6 ISZERO PUSH2 0x3068 JUMPI DUP1 DUP7 GT PUSH2 0x231 JUMPI PUSH2 0x3044 SWAP1 DUP6 SWAP7 DUP2 DUP2 SWAP8 PUSH2 0x2C10 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP4 JUMPDEST PUSH1 0xC8 SHR AND SWAP3 DUP4 ISZERO PUSH2 0x305E JUMPI DUP4 GT PUSH2 0x231 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP POP SWAP1 POP PUSH0 SWAP1 PUSH0 SWAP1 JUMP JUMPDEST SWAP3 SWAP4 SWAP1 SWAP5 POP PUSH0 SWAP5 PUSH0 SWAP5 PUSH2 0x3049 JUMP JUMPDEST CALLER SWAP4 SWAP2 SWAP3 PUSH2 0x301D JUMP JUMPDEST PUSH1 0x42 SWAP1 PUSH2 0x120 PUSH1 0x40 MLOAD PUSH32 0x3AF21EC5A20011B88D3B7B4ED7C806CEF05A5980CF34974BCD53566A131F7E4C DUP2 MSTORE PUSH2 0x100 PUSH1 0x4 PUSH1 0x20 DUP4 ADD CALLDATACOPY KECCAK256 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1901 PUSH1 0xF0 SHL DUP4 MSTORE PUSH1 0x2 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x30DB PUSH1 0xE4 CALLDATALOAD PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0x3100 JUMPI POP PUSH1 0xA4 CALLDATALOAD SWAP1 JUMPDEST DUP2 ISZERO PUSH2 0x30EE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7B8FDED1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x312D PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0xA4 CALLDATALOAD SWAP1 PUSH2 0x36CE JUMP JUMPDEST SWAP1 PUSH2 0x30E6 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x3146 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 PUSH1 0xE4 CALLDATALOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP5 SWAP2 PUSH2 0x321E SWAP10 SWAP8 SWAP5 SWAP2 PUSH2 0x31E5 SWAP2 SWAP10 SWAP8 SWAP5 SWAP10 PUSH2 0x1E0 PUSH2 0x31D6 DUP10 PUSH2 0x315A JUMP JUMPDEST DUP1 PUSH2 0x100 DUP11 ADD MSTORE DUP9 ADD SWAP2 PUSH2 0x3199 JUMP JUMPDEST PUSH2 0x120 DUP7 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x140 DUP6 ADD MSTORE PUSH2 0x160 DUP5 ADD MSTORE PUSH2 0x180 DUP4 ADD MSTORE PUSH2 0x1A0 DUP3 ADD MSTORE DUP1 DUP5 SUB PUSH2 0x1C0 SWAP1 SWAP2 ADD MSTORE PUSH2 0x3199 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 PUSH0 SWAP4 PUSH2 0x220 SWAP7 SWAP3 SWAP4 DUP6 PUSH2 0x1E0 PUSH2 0x3237 DUP10 PUSH2 0x315A JUMP JUMPDEST DUP1 PUSH2 0x100 DUP11 ADD MSTORE DUP9 ADD MSTORE PUSH2 0x200 SWAP5 PUSH2 0x120 DUP9 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH2 0x140 DUP8 ADD MSTORE PUSH2 0x160 DUP7 ADD MSTORE PUSH2 0x180 DUP6 ADD MSTORE PUSH2 0x1A0 DUP5 ADD MSTORE DUP1 PUSH2 0x1C0 DUP5 ADD MSTORE DUP3 ADD MSTORE ADD PUSH0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3146 JUMPI JUMP JUMPDEST SWAP2 SWAP1 SWAP4 PUSH0 SWAP5 SWAP4 DUP6 SWAP5 PUSH2 0x3299 PUSH2 0x3A98 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP5 DUP5 SWAP2 DUP3 PUSH1 0x64 EQ PUSH2 0x3456 JUMPI DUP3 PUSH1 0x48 EQ PUSH2 0x33E5 JUMPI DUP3 PUSH1 0xE0 EQ PUSH2 0x33C3 JUMPI DUP3 PUSH2 0x100 EQ PUSH2 0x339F JUMPI DUP3 PUSH1 0x60 EQ PUSH2 0x3311 JUMPI POP POP PUSH2 0x160 EQ PUSH2 0x32F0 JUMPI POP PUSH4 0x9FD5A6CF PUSH1 0xE0 SHL DUP4 MSTORE DUP5 SWAP2 PUSH1 0x4 SWAP2 DUP2 SWAP1 DUP6 DUP5 ADD CALLDATACOPY ADD SWAP3 GAS CALL SWAP1 JUMP JUMPDEST PUSH4 0x2B67B57 PUSH1 0xE4 SHL DUP5 MSTORE PUSH2 0x164 SWAP5 POP DUP6 SWAP3 POP SWAP1 PUSH2 0x160 SWAP1 PUSH1 0x4 DUP6 ADD CALLDATACOPY GAS CALL SWAP1 JUMP JUMPDEST DUP9 SWAP6 POP PUSH1 0x40 SWAP3 POP SWAP1 PUSH2 0x164 SWAP8 PUSH1 0x20 SWAP5 SWAP6 SWAP3 PUSH4 0x2B67B57 PUSH1 0xE4 SHL DUP10 MSTORE PUSH1 0x4 DUP10 ADD MSTORE PUSH1 0x24 DUP9 ADD MSTORE PUSH1 0x14 DUP3 PUSH1 0x50 DUP10 ADD CALLDATACOPY DUP6 NOT PUSH6 0xFFFFFFFFFFFF SWAP2 DUP2 PUSH1 0x14 DUP6 ADD CALLDATALOAD PUSH1 0xE0 SHR ADD DUP4 AND PUSH1 0x64 DUP11 ADD MSTORE PUSH1 0x18 DUP5 ADD CALLDATALOAD PUSH1 0xE0 SHR PUSH1 0x84 DUP11 ADD MSTORE PUSH1 0xA4 DUP10 ADD MSTORE PUSH1 0x1C DUP4 ADD CALLDATALOAD PUSH1 0xE0 SHR ADD AND PUSH1 0xC4 DUP8 ADD MSTORE PUSH2 0x100 PUSH1 0xE4 DUP8 ADD MSTORE DUP2 PUSH2 0x104 DUP8 ADD MSTORE DUP3 DUP1 DUP3 ADD PUSH2 0x124 DUP9 ADD CALLDATACOPY ADD PUSH2 0x144 DUP6 ADD CALLDATACOPY GAS CALL SWAP1 JUMP JUMPDEST POP POP PUSH4 0x23F2EBC3 PUSH1 0xE2 SHL DUP6 MSTORE POP PUSH2 0x104 SWAP5 DUP7 SWAP4 POP SWAP2 PUSH2 0x100 SWAP2 POP PUSH1 0x4 DUP6 ADD CALLDATACOPY GAS CALL SWAP1 JUMP JUMPDEST POP POP PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP6 MSTORE POP PUSH1 0xE4 SWAP5 DUP7 SWAP4 POP SWAP2 PUSH1 0xE0 SWAP2 POP PUSH1 0x4 DUP6 ADD CALLDATACOPY GAS CALL SWAP1 JUMP JUMPDEST SWAP1 SWAP2 POP DUP8 SWAP5 POP PUSH2 0x104 SWAP7 SWAP4 SWAP3 POP PUSH4 0x23F2EBC3 PUSH1 0xE2 SHL DUP7 MSTORE PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x20 PUSH1 0x8 PUSH1 0x28 DUP4 ADD CALLDATALOAD SWAP3 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH1 0x44 DUP9 ADD MSTORE DUP6 NOT PUSH1 0x4 DUP3 ADD CALLDATALOAD PUSH1 0xE0 SHR ADD PUSH1 0x64 DUP9 ADD MSTORE PUSH1 0x1 PUSH1 0x84 DUP9 ADD MSTORE DUP4 PUSH1 0xFF SHR PUSH1 0x1B ADD PUSH1 0xA4 DUP9 ADD MSTORE ADD PUSH1 0xC4 DUP7 ADD CALLDATACOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB AND PUSH1 0xE4 DUP5 ADD MSTORE GAS CALL SWAP1 JUMP JUMPDEST SWAP1 SWAP2 POP DUP8 SWAP5 POP PUSH1 0xE4 SWAP7 SWAP4 SWAP3 POP PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x20 PUSH1 0x24 PUSH1 0x44 DUP4 ADD CALLDATALOAD SWAP3 DUP3 DUP2 PUSH1 0x44 DUP10 ADD CALLDATACOPY DUP6 NOT DUP4 DUP3 ADD CALLDATALOAD PUSH1 0xE0 SHR ADD PUSH1 0x64 DUP9 ADD MSTORE DUP4 PUSH1 0xFF SHR PUSH1 0x1B ADD PUSH1 0x84 DUP9 ADD MSTORE ADD PUSH1 0xA4 DUP7 ADD CALLDATACOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB AND PUSH1 0xC4 DUP5 ADD MSTORE GAS CALL SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x3 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x34CA JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0x351A JUMPI PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x3508 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x34FE DUP4 PUSH2 0x2C92 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH0 DUP1 SLOAD SWAP1 PUSH1 0x1 SWAP1 DUP3 PUSH1 0x1 SHR PUSH1 0x1 DUP5 AND SWAP3 DUP4 ISZERO PUSH2 0x35F3 JUMPI JUMPDEST PUSH1 0x20 SWAP5 DUP6 DUP4 LT DUP6 EQ PUSH2 0x35DF JUMPI DUP3 DUP8 MSTORE DUP7 SWAP5 SWAP1 DUP2 ISZERO PUSH2 0x35BF JUMPI POP PUSH1 0x1 EQ PUSH2 0x3564 JUMPI JUMPDEST POP POP PUSH2 0x321E SWAP3 POP SUB DUP3 PUSH2 0x2CAD JUMP JUMPDEST PUSH0 DUP1 DUP1 MSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 SWAP6 SWAP4 POP SWAP2 SWAP1 JUMPDEST DUP2 DUP4 LT PUSH2 0x35A7 JUMPI POP POP PUSH2 0x321E SWAP4 POP DUP3 ADD ADD PUSH0 DUP1 PUSH2 0x3556 JUMP JUMPDEST DUP6 SLOAD DUP8 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP7 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x358F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x321E SWAP5 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD PUSH0 DUP1 PUSH2 0x3556 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x3535 JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0x361F JUMPI PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x3508 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x34FE DUP4 PUSH2 0x2C92 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH0 PUSH1 0x1 DUP1 SLOAD SWAP2 DUP3 PUSH1 0x1 SHR PUSH1 0x1 DUP5 AND SWAP3 DUP4 ISZERO PUSH2 0x36C4 JUMPI JUMPDEST PUSH1 0x20 SWAP5 DUP6 DUP4 LT DUP6 EQ PUSH2 0x35DF JUMPI DUP3 DUP8 MSTORE DUP7 SWAP5 SWAP1 DUP2 ISZERO PUSH2 0x35BF JUMPI POP PUSH1 0x1 EQ PUSH2 0x3667 JUMPI POP POP PUSH2 0x321E SWAP3 POP SUB DUP3 PUSH2 0x2CAD JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x1 PUSH0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP4 PUSH0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x36AC JUMPI POP POP PUSH2 0x321E SWAP4 POP DUP3 ADD ADD PUSH0 DUP1 PUSH2 0x3556 JUMP JUMPDEST DUP6 SLOAD DUP8 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP7 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x3694 JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x3639 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x36DA JUMPI POP NOT SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF9 SHL AND ISZERO PUSH2 0x3765 JUMPI DUP1 ISZERO PUSH2 0x3756 JUMPI PUSH2 0x36FD DUP2 PUSH2 0x2DAD JUMP JUMPDEST SWAP1 PUSH2 0x370B PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x2CAD JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 CALLDATASIZE DUP3 DUP3 ADD GT PUSH2 0x231 JUMPI DUP2 PUSH0 SWAP3 PUSH1 0x20 SWAP3 DUP7 CALLDATACOPY DUP4 ADD ADD MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x4 CALLDATALOAD SWAP1 SWAP2 AND SUB PUSH2 0x3749 JUMPI JUMPDEST PUSH1 0x1 SWAP1 PUSH0 SWAP1 JUMP JUMPDEST PUSH0 SWAP1 PUSH4 0xDC11EE6B PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST POP PUSH0 SWAP2 PUSH4 0xB2D25E49 PUSH1 0xE0 SHL SWAP2 POP JUMP JUMPDEST SWAP1 POP ISZERO PUSH2 0x3742 JUMPI PUSH0 SWAP1 PUSH4 0x74896A7B PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF9 SHL AND ISZERO PUSH2 0x3794 JUMPI SWAP1 PUSH4 0xB2D25E49 PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 PUSH0 SWAP1 JUMP JUMPDEST SWAP4 SWAP1 PUSH2 0x37C6 SWAP1 PUSH2 0x321E SWAP10 SWAP8 SWAP5 SWAP9 SWAP7 SWAP4 PUSH2 0x1C0 PUSH2 0x37B7 DUP9 PUSH2 0x315A JUMP JUMPDEST DUP1 PUSH2 0x100 DUP10 ADD MSTORE DUP8 ADD SWAP2 PUSH2 0x3199 JUMP JUMPDEST PUSH2 0x120 DUP6 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD MSTORE PUSH2 0x180 DUP3 ADD MSTORE DUP1 DUP5 SUB PUSH2 0x1A0 SWAP1 SWAP2 ADD MSTORE PUSH2 0x3199 JUMP JUMPDEST SWAP4 SWAP2 SWAP1 SWAP3 PUSH2 0x3807 DUP5 DUP7 PUSH2 0x3C2F JUMP JUMPDEST SWAP1 SWAP3 DUP2 ISZERO PUSH2 0x3899 JUMPI PUSH2 0x3819 DUP3 DUP6 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP4 DUP3 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH1 0x20 SWAP7 PUSH1 0x14 SWAP5 PUSH2 0x3855 SWAP4 PUSH1 0x40 MLOAD SWAP11 DUP12 SWAP10 DUP11 SWAP9 DUP10 SWAP9 PUSH4 0x1D9671C3 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x13 NOT ADD SWAP7 ADD SWAP5 CALLER SWAP3 PUSH1 0x4 DUP11 ADD PUSH2 0x379C JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA33 JUMPI PUSH0 SWAP2 PUSH2 0x386A JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x3891 JUMPI JUMPDEST DUP2 PUSH2 0x3885 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2CAD JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x231 JUMPI MLOAD SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x3878 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x321E SWAP2 POP PUSH1 0xC4 CALLDATALOAD PUSH1 0xA4 CALLDATALOAD PUSH2 0x3CB3 JUMP JUMPDEST SWAP4 SWAP2 SWAP1 SWAP3 PUSH2 0x38BD DUP5 DUP7 PUSH2 0x3C62 JUMP JUMPDEST SWAP1 SWAP3 DUP2 ISZERO PUSH2 0x390B JUMPI PUSH2 0x38CF DUP3 DUP6 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP4 DUP3 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH1 0x20 SWAP7 PUSH1 0x14 SWAP5 PUSH2 0x3855 SWAP4 PUSH1 0x40 MLOAD SWAP11 DUP12 SWAP10 DUP11 SWAP9 DUP10 SWAP9 PUSH4 0x1AFFF15 PUSH1 0xE7 SHL DUP11 MSTORE PUSH1 0x13 NOT ADD SWAP7 ADD SWAP5 CALLER SWAP3 PUSH1 0x4 DUP11 ADD PUSH2 0x379C JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x321E SWAP2 POP PUSH1 0xC4 CALLDATALOAD PUSH1 0xA4 CALLDATALOAD PUSH2 0x3CDA JUMP JUMPDEST SWAP1 PUSH0 PUSH1 0x64 SWAP3 PUSH1 0x20 SWAP6 DUP3 SWAP6 PUSH1 0x40 MLOAD SWAP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD MSTORE GAS CALL PUSH1 0x1 PUSH0 MLOAD EQ PUSH1 0x1F RETURNDATASIZE GT AND RETURNDATASIZE ISZERO OR AND SWAP1 JUMP JUMPDEST SWAP3 SWAP5 DUP1 PUSH0 SWAP6 DUP2 PUSH1 0x20 SWAP9 DUP9 SWAP6 SWAP7 PUSH1 0x40 MLOAD SWAP8 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x4 DUP10 ADD MSTORE PUSH1 0x24 DUP9 ADD MSTORE PUSH1 0x44 DUP8 ADD MSTORE PUSH2 0x39A2 JUMPI JUMPDEST POP POP PUSH1 0x64 ADD SWAP3 GAS CALL PUSH1 0x1 PUSH0 MLOAD EQ PUSH1 0x1F RETURNDATASIZE GT AND RETURNDATASIZE ISZERO OR AND SWAP1 JUMP JUMPDEST PUSH1 0x64 DUP6 ADD CALLDATACOPY DUP1 PUSH0 PUSH2 0x3989 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 GT PUSH2 0x3A23 JUMPI PUSH0 SWAP3 DUP4 SWAP3 PUSH1 0x84 SWAP3 PUSH2 0x39D0 PUSH2 0x3A98 JUMP JUMPDEST SWAP7 PUSH1 0x40 MLOAD SWAP4 PUSH4 0x1B63C28B PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD MSTORE DUP3 DUP6 GAS CALL SWAP1 DUP2 PUSH2 0x3A18 JUMPI JUMPDEST POP ISZERO PUSH2 0x3A06 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF4059071 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 POP EXTCODESIZE ISZERO ISZERO PUSH0 PUSH2 0x39FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8112E119 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0x24 DUP2 DUP1 DUP1 SWAP5 SWAP7 SWAP6 SWAP7 PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP3 MSTORE DUP8 PUSH1 0x4 MSTORE GAS CALL ISZERO PUSH2 0xA33 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x3A68 JUMPI POP POP JUMP JUMPDEST PUSH0 DUP1 DUP1 SWAP4 DUP2 SWAP4 GAS CALL ISZERO PUSH2 0xA33 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x44 CALLDATALOAD DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x3A8F JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x24 CALLDATALOAD AND SWAP1 JUMP JUMPDEST CHAINID DUP1 PUSH2 0x144 EQ PUSH2 0x3AD9 JUMPI DUP1 PUSH2 0x12C EQ PUSH2 0x3AD9 JUMPI PUSH2 0x104 EQ PUSH2 0x3AC6 JUMPI PUSH15 0x22D473030F116DDEE9F6B43AC78BA3 SWAP1 JUMP JUMPDEST PUSH15 0x225E31D15943971F47AD3022F714FA SWAP1 JUMP JUMPDEST POP PUSH15 0x225E31D15943971F47AD3022F714FA SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP4 PUSH1 0x60 SHR AND SWAP3 PUSH1 0x80 SHR AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH4 0x9605A01 PUSH1 0xE4 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST POP PUSH0 SWAP2 POP DUP2 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP4 PUSH1 0xA0 SHR AND SWAP3 PUSH1 0xC0 SHR AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF SWAP2 DUP1 PUSH1 0x20 SHL DUP4 AND SWAP3 AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP4 AND SWAP3 PUSH1 0x20 SHR AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 PUSH1 0xC0 SHR AND SWAP2 PUSH1 0xE0 SHR SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP4 PUSH1 0x80 SHR AND SWAP3 PUSH1 0xA0 SHR AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP4 PUSH1 0x20 SHR AND SWAP3 PUSH1 0x40 SHR AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP4 PUSH1 0x40 SHR AND SWAP3 PUSH1 0x60 SHR AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x3C9F JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP4 OR PUSH1 0x80 SHR ISZERO PUSH2 0x3CD0 JUMPI PUSH2 0x3CCB SWAP1 PUSH2 0x321E SWAP4 PUSH2 0x3133 JUMP JUMPDEST PUSH2 0x3C95 JUMP JUMPDEST PUSH2 0x321E SWAP3 MUL PUSH2 0x3C95 JUMP JUMPDEST SWAP2 DUP2 DUP2 OR PUSH1 0x80 SHR ISZERO PUSH2 0x3D0F JUMPI SWAP1 PUSH2 0x3CF0 SWAP2 PUSH2 0x3133 JUMP JUMPDEST SWAP1 DUP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x3146 JUMPI PUSH0 NOT DUP3 ADD SWAP2 DUP3 GT PUSH2 0x3146 JUMPI PUSH2 0x321E SWAP2 PUSH2 0x3C95 JUMP JUMPDEST PUSH2 0x321E SWAP3 SWAP2 MUL DUP2 ADD PUSH0 NOT ADD PUSH2 0x3C95 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 LOG4 ISZERO SSTORE 0xD3 RETURNDATASIZE PUSH2 0x555D 0xBB PUSH19 0x948BAB109E1F9C9869C36C32FB22B832F50D35 DUP4 0xAB PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "1055:788:22:-:0;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;-1:-1:-1;;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;1055:788:22;;3485:45:5;;;:::i;:::-;3477:53;;;;;3551:51;;;:::i;:::-;3540:62;;;;;1055:788:22;3626:22:5;;3612:36;;;;1055:788:22;3675:25:5;;3658:42;;;;;3728:13;3711:30;;1055:788:22;;4288:80:5;1055:788:22;4288:80:5;;2063:95;;;;;;;;;;;;3728:13;2063:95;;;;4362:4;3711:30;2063:95;;1055:788:22;3711:30:5;4288:80;;2063:95;1055:788:22;;;;;;;;;;;;;;;;;4278:91:5;;2063:95;3751:48;4362:4;2063:95;3809:27;1281:10:22;1266:26:30;1262:95;;-1:-1:-1;;2997:6:30;1055:788:22;;1281:10;-1:-1:-1;;;;;;1055:788:22;;;;;;;;;;1281:10;;1055:788;3045:40:30;-1:-1:-1;;3045:40:30;715:21:27;;;;1475:12:29;;;;1055:788:22;;;;;;2063:95:5;1055:788:22;;;;;3711:30:5;1055:788:22;;;;;2063:95:5;1055:788:22;;;;;3612:36:5;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1262:95:30;-1:-1:-1;;;1315:31:30;;-1:-1:-1;1315:31:30;;;;1055:788:22;;;1315:31:30;1055:788:22;;;;;;;;;;;;;-1:-1:-1;1055:788:22;;;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;:::o;2887:340:40:-;1055:788:22;;3032:2:40;;3010:24;;;3032:2;;;1055:788:22;1854:2:40;1055:788:22;;1840:16:40;1836:72;;1055:788:22;;;;;2063:95:5;1055:788:22;;;;;;1949:36:40;;3050:27;:::o;1055:788:22:-;;;;;;;;;;1949:36:40;3050:27;:::o;1836:72::-;1055:788:22;;;1879:18:40;;;;;;;;;;;1055:788:22;;;;;;;;;3516:13:5;1055:788:22;;;;;;;;;;;;3516:13:5;1055:788:22;;;;;;1854:2:40;1055:788:22;;;;;;;1879:18:40;;;;1055:788:22;;;;;;;;;;;;;;;;;;;-1:-1:-1;1055:788:22;;3006:215:40;1055:788:22;-1:-1:-1;;;;;1055:788:22;;;;3516:13:5;1055:788:22;;;;;;;;;;;;;;3006:215:40;1055:788:22;;;;;;;;;;;3006:215:40;1055:788:22;;;;;;;;;;;;;;;;3516:13:5;1055:788:22;;;;;;;;;;;;;;;;;3516:13:5;1055:788:22;1390:66:40;3168:42;:::o;1055:788:22:-;;;;-1:-1:-1;1055:788:22;;;;;;;;;;;;3516:13:5;1055:788:22;;;3516:13:5;1055:788:22;;3516:13:5;1055:788:22;;;;;;;;;;;;;;;;;;;;;3516:13:5;1055:788:22;1390:66:40;3168:42;:::o;1055:788:22:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1055:788:22;;;;;;;3516:13:5;1055:788:22;;;;;3516:13:5;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;3516:13:5;1055:788:22;;;;;;;;;;;3516:13:5;1055:788:22;;;;;3516:13:5;1055:788:22;;;;;;;;2887:340:40;1055:788:22;;3032:2:40;;3010:24;;;3032:2;;;1055:788:22;1854:2:40;1055:788:22;;1840:16:40;1836:72;;1055:788:22;;;;;2063:95:5;1055:788:22;;;;;;1949:36:40;;3050:27;:::o;1836:72::-;1055:788:22;;;1879:18:40;;;;;;;;;;;1055:788:22;;;;;;;;;-1:-1:-1;1055:788:22;;;;;;;;;;;;-1:-1:-1;1055:788:22;;;;;;1854:2:40;1055:788:22;;;;;;;1879:18:40;;;;1055:788:22;;;;;;;;;;;;;;;;;;;-1:-1:-1;1055:788:22;;3006:215:40;1055:788:22;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;;;;;;;;;3006:215:40;1055:788:22;;;;;;;;;;;3006:215:40;1055:788:22;;;;;;;;;;;;;;-1:-1:-1;1055:788:22;;;;-1:-1:-1;;;;1055:788:22;;;;;;;;;;;;;1390:66:40;;3168:42::o;1055:788:22:-;;;;-1:-1:-1;1055:788:22;;;;;;;;;;;;-1:-1:-1;1055:788:22;;-1:-1:-1;1055:788:22;;-1:-1:-1;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;1390:66:40;3168:42;:::o;1055:788:22:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1055:788:22;;;;-1:-1:-1;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1055:788:22;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 10940,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_addresst_bytes_calldata": {
									"entryPoint": 11168,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 3
								},
								"abi_decode_array_userDefinedValueType_MakerTraits_dyn_calldata": {
									"entryPoint": 11120,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_bytes_calldata": {
									"entryPoint": 10962,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_uint256t_bytes_calldata": {
									"entryPoint": 11007,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 3
								},
								"abi_decode_uint96": {
									"entryPoint": 10918,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_bytes_calldata": {
									"entryPoint": 12697,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 11058,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_struct_Order_calldata": {
									"entryPoint": 12634,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_encode_struct_Order_calldata_bytes_calldata_bytes32_address_uint256_uint256_bytes_calldata_slice": {
									"entryPoint": 14236,
									"id": null,
									"parameterSlots": 9,
									"returnSlots": 1
								},
								"abi_encode_struct_Order_calldata_bytes_calldata_bytes32_address_uint256_uint256_uint256_bytes_calldata": {
									"entryPoint": 12833,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_struct_Order_calldata_bytes_calldata_bytes32_address_uint256_uint256_uint256_bytes_calldata_72302": {
									"entryPoint": 12729,
									"id": null,
									"parameterSlots": 10,
									"returnSlots": 1
								},
								"abi_encode_uint256_uint256_bytes32": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"array_allocation_size_bytes": {
									"entryPoint": 11693,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"calldata_array_index_access_userDefinedValueType_MakerTraits_dyn_calldata": {
									"entryPoint": 11470,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"calldata_array_index_range_access_bytes_calldata": {
									"entryPoint": 11280,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 2
								},
								"checked_mul_uint256": {
									"entryPoint": 12595,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_uint256": {
									"entryPoint": 12924,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"convert_bytes_to_fixedbytes_from_bytes_calldata_to_bytes20": {
									"entryPoint": 11231,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_returndata": {
									"entryPoint": 11720,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 11437,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"finalize_allocation_26995": {
									"entryPoint": 11391,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"finalize_allocation_72416": {
									"entryPoint": 11410,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun__get": {
									"entryPoint": 15407,
									"id": 1185,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_and": {
									"entryPoint": 11767,
									"id": 6522,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_calculateMakingAmount": {
									"entryPoint": 14329,
									"id": 4233,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"fun_calculateTakingAmount": {
									"entryPoint": 14511,
									"id": 4294,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"fun_callTransferFromWithSuffix": {
									"entryPoint": 14683,
									"id": 6046,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"fun_callTransferFromWithSuffix_96435": {
									"entryPoint": 14625,
									"id": 6046,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"fun_cancelOrder": {
									"entryPoint": 11506,
									"id": 4606,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_checkOwner": {
									"entryPoint": 12225,
									"id": 6132,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_checkRemainingMakingAmount": {
									"entryPoint": 12496,
									"id": 6022,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_domainSeparatorV4": {
									"entryPoint": 11927,
									"id": 824,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"fun_epochEquals": {
									"entryPoint": null,
									"id": 9253,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_get": {
									"entryPoint": 15458,
									"id": 1185,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_getMakingAmount": {
									"entryPoint": 15539,
									"id": 142,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_getPermit2Address": {
									"entryPoint": 15000,
									"id": 9109,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"fun_getReceiver": {
									"entryPoint": 14967,
									"id": 4172,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"fun_getTakingAmount": {
									"entryPoint": 15578,
									"id": 188,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_get_26993": {
									"entryPoint": 15085,
									"id": 1185,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_get_26994": {
									"entryPoint": 15159,
									"id": 1185,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_get_26996": {
									"entryPoint": 15210,
									"id": 1185,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_get_26999": {
									"entryPoint": 15259,
									"id": 1185,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_get_27001": {
									"entryPoint": 15307,
									"id": 1185,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_get_27005": {
									"entryPoint": 15356,
									"id": 1185,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_get_27014": {
									"entryPoint": null,
									"id": 1185,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_hash": {
									"entryPoint": 12415,
									"id": 4142,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_isValidExtension": {
									"entryPoint": 14047,
									"id": 4366,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_isValidExtension_72313": {
									"entryPoint": 14201,
									"id": 4366,
									"parameterSlots": 0,
									"returnSlots": 2
								},
								"fun_or": {
									"entryPoint": 11304,
									"id": 6459,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_parseArgs": {
									"entryPoint": 12269,
									"id": 5976,
									"parameterSlots": 3,
									"returnSlots": 5
								},
								"fun_remaining": {
									"entryPoint": 14030,
									"id": 6762,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"fun_requireNotPaused": {
									"entryPoint": 13499,
									"id": 6309,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_safeTransferFromPermit2": {
									"entryPoint": 14766,
									"id": 8747,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"fun_safeWithdrawTo": {
									"entryPoint": 14901,
									"id": 9102,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_staticcallForUint": {
									"entryPoint": 11891,
									"id": 6677,
									"parameterSlots": 3,
									"returnSlots": 2
								},
								"fun_toStringWithFallback": {
									"entryPoint": 13821,
									"id": 9439,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_toStringWithFallback_26937": {
									"entryPoint": 13532,
									"id": 9439,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_tryPermit": {
									"entryPoint": 12937,
									"id": 9025,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"fun_useBitInvalidator": {
									"entryPoint": 11859,
									"id": 2257,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"wrapping_div_uint256": {
									"entryPoint": 15509,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"immutableReferences": {
								"722": [
									{
										"length": 32,
										"start": 11984
									}
								],
								"724": [
									{
										"length": 32,
										"start": 12187
									}
								],
								"726": [
									{
										"length": 32,
										"start": 11930
									}
								],
								"728": [
									{
										"length": 32,
										"start": 12063
									}
								],
								"730": [
									{
										"length": 32,
										"start": 12101
									}
								],
								"733": [
									{
										"length": 32,
										"start": 7578
									}
								],
								"736": [
									{
										"length": 32,
										"start": 7619
									}
								],
								"4046": [
									{
										"length": 32,
										"start": 28
									}
								],
								"4442": [
									{
										"length": 32,
										"start": 1036
									},
									{
										"length": 32,
										"start": 1179
									},
									{
										"length": 32,
										"start": 1654
									},
									{
										"length": 32,
										"start": 1736
									},
									{
										"length": 32,
										"start": 1838
									},
									{
										"length": 32,
										"start": 2044
									},
									{
										"length": 32,
										"start": 2347
									},
									{
										"length": 32,
										"start": 4240
									},
									{
										"length": 32,
										"start": 6426
									},
									{
										"length": 32,
										"start": 8901
									},
									{
										"length": 32,
										"start": 9044
									},
									{
										"length": 32,
										"start": 9333
									}
								]
							},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x5E JUMPI JUMPDEST POP CALLDATASIZE ISZERO PUSH2 0x1A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x4C JUMPI STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1B10B0F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x5B1EA03 EQ PUSH2 0x2A09 JUMPI POP DUP1 PUSH4 0xD2C7C16 EQ PUSH2 0x2964 JUMPI DUP1 PUSH4 0x143E86A7 EQ PUSH2 0x291D JUMPI DUP1 PUSH4 0x15169DEC EQ PUSH2 0x28CD JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x28AB JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x283A JUMPI DUP1 PUSH4 0x435B9789 EQ PUSH2 0x27DC JUMPI DUP1 PUSH4 0x4F38E2B8 EQ PUSH2 0x27AB JUMPI DUP1 PUSH4 0x56A75868 EQ PUSH2 0x20D0 JUMPI DUP1 PUSH4 0x5816D723 EQ PUSH2 0x203B JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x2016 JUMPI DUP1 PUSH4 0x6FE7B0BA EQ PUSH2 0x1FE5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1F8A JUMPI DUP1 PUSH4 0x74261145 EQ PUSH2 0x1F71 JUMPI DUP1 PUSH4 0x802B2EF1 EQ PUSH2 0x1F00 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x1E9F JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x1D85 JUMPI DUP1 PUSH4 0x89E7C650 EQ PUSH2 0x1CEB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1CC3 JUMPI DUP1 PUSH4 0x9FDA64BD EQ PUSH2 0x17AC JUMPI DUP1 PUSH4 0xB68FB020 EQ PUSH2 0x178B JUMPI DUP1 PUSH4 0xBD61951D EQ PUSH2 0x1731 JUMPI DUP1 PUSH4 0xBF15FCD8 EQ PUSH2 0x16F7 JUMPI DUP1 PUSH4 0xBF797959 EQ PUSH2 0x16A1 JUMPI DUP1 PUSH4 0xBFA75143 EQ PUSH2 0x1688 JUMPI DUP1 PUSH4 0xC2A40753 EQ PUSH2 0x1644 JUMPI DUP1 PUSH4 0xC3CF8043 EQ PUSH2 0x15CA JUMPI DUP1 PUSH4 0xCA4ECE22 EQ PUSH2 0x158E JUMPI DUP1 PUSH4 0xCC713A04 EQ PUSH2 0xEFE JUMPI DUP1 PUSH4 0xCE3D710A EQ PUSH2 0xEB1 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE2A JUMPI DUP1 PUSH4 0xF497DF75 EQ PUSH2 0x235 JUMPI PUSH4 0xFCEA9E4E EQ PUSH2 0x1D5 JUMPI PUSH0 PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x1EE PUSH2 0x2ABC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP1 PUSH1 0xA0 SHL AND SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND OR PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH1 0x3 NOT ADD PUSH2 0x1A0 DUP2 SLT PUSH2 0x231 JUMPI PUSH2 0x100 SGT PUSH2 0x231 JUMPI PUSH2 0x124 CALLDATALOAD PUSH2 0x184 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x272 PUSH2 0x27C SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST SWAP1 PUSH2 0x164 CALLDATALOAD PUSH2 0x2FED JUMP JUMPDEST SWAP4 SWAP5 PUSH2 0x28E PUSH2 0x289 PUSH2 0x2E97 JUMP JUMPDEST PUSH2 0x307F JUMP JUMPDEST SWAP4 PUSH2 0x298 DUP6 PUSH2 0x30D0 JUMP JUMPDEST SWAP3 PUSH0 SWAP3 PUSH1 0xA4 CALLDATALOAD DUP6 EQ PUSH2 0xCE7 JUMPI JUMPDEST POP PUSH2 0x2AE PUSH2 0x34BB JUMP JUMPDEST PUSH2 0x2B8 DUP6 DUP4 PUSH2 0x36DF JUMP JUMPDEST SWAP1 ISZERO PUSH2 0xCE0 JUMPI POP PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP1 PUSH1 0xE4 CALLDATALOAD AND DUP1 ISZERO SWAP2 DUP3 ISZERO PUSH2 0xCD4 JUMPI JUMPDEST POP POP ISZERO PUSH2 0xCC2 JUMPI PUSH5 0xFFFFFFFFFF DUP1 PUSH1 0xE4 CALLDATALOAD PUSH1 0x50 SHR AND DUP1 ISZERO ISZERO SWAP1 DUP2 PUSH2 0xCB8 JUMPI JUMPDEST POP PUSH2 0xCA6 JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFA SHL AND PUSH2 0xC38 JUMPI JUMPDEST POP DUP5 PUSH2 0xBE7 JUMPI JUMPDEST PUSH2 0x164 CALLDATALOAD PUSH1 0x1 PUSH1 0xFF SHL AND ISZERO PUSH2 0xB2E JUMPI DUP4 PUSH2 0x144 CALLDATALOAD LT DUP5 PUSH2 0x144 CALLDATALOAD XOR MUL DUP5 XOR SWAP7 PUSH2 0x33E DUP8 DUP7 DUP11 DUP10 DUP8 PUSH2 0x38AF JUMP JUMPDEST SWAP9 PUSH2 0x164 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB AND DUP1 PUSH2 0xAD6 JUMPI JUMPDEST POP JUMPDEST PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFF SHL AND ISZERO ISZERO DUP1 PUSH2 0xACA JUMPI JUMPDEST PUSH2 0xAB8 JUMPI DUP10 DUP10 MUL ISZERO PUSH2 0xAA6 JUMPI PUSH2 0x37C PUSH1 0xE4 CALLDATALOAD PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0xA7C JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xE4 CALLDATALOAD PUSH1 0x80 DUP2 SWAP1 SHR PUSH4 0xFFFFFFFF AND DUP6 MSTORE SWAP3 DUP2 SWAP1 MSTORE SWAP3 KECCAK256 SLOAD SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x78 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND SHL DUP1 DUP4 AND EQ PUSH2 0xA6A JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE4 CALLDATALOAD PUSH1 0x80 SHR AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0xE4 CALLDATALOAD PUSH1 0x78 SHR AND SHL OR PUSH1 0x40 PUSH0 KECCAK256 SSTORE JUMPDEST PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFC SHL AND PUSH2 0x9AC JUMPI JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH32 0x0 SWAP1 SWAP2 AND EQ DUP1 PUSH2 0x99A JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x994 JUMPI ADDRESS JUMPDEST DUP11 PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF8 SHL AND ISZERO PUSH2 0x955 JUMPI POP PUSH2 0x457 DUP10 DUP8 PUSH2 0x3B6A JUMP JUMPDEST SWAP1 POP PUSH2 0x825 JUMPI PUSH2 0x47A SWAP1 DUP12 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x64 CALLDATALOAD AND PUSH2 0x39AE JUMP JUMPDEST PUSH2 0x924 JUMPI JUMPDEST POP PUSH1 0x13 DUP2 GT PUSH2 0x896 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x84 CALLDATALOAD DUP2 AND SWAP1 PUSH32 0x0 AND DUP2 EQ DUP1 DUP1 PUSH2 0x88D JUMPI JUMPDEST ISZERO PUSH2 0x7A6 JUMPI POP POP DUP7 CALLVALUE LT PUSH2 0x794 JUMPI DUP7 CALLVALUE GT PUSH2 0x76B JUMPI JUMPDEST PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF7 SHL AND ISZERO PUSH2 0x664 JUMPI DUP2 DUP1 DUP1 DUP1 DUP11 PUSH2 0x4F5 PUSH2 0x3A77 JUMP JUMPDEST GAS CALL PUSH2 0x4FF PUSH2 0x2DC8 JUMP JUMPDEST POP ISZERO PUSH2 0x652 JUMPI DUP6 SWAP4 JUMPDEST PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFB SHL AND PUSH2 0x577 JUMPI JUMPDEST POP POP POP PUSH1 0x40 PUSH2 0x54A PUSH2 0x573 SWAP5 SWAP4 PUSH32 0xFEC331350FCE78BA658E082A71DA20AC9F8D798A99B3C79681C8440CBFE77E07 SWAP4 PUSH2 0x327C JUMP JUMPDEST DUP2 MLOAD SWAP1 DUP5 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 PUSH1 0x40 SWAP2 SWAP5 SWAP4 SWAP3 PUSH1 0x60 DUP3 ADD SWAP6 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 POP PUSH2 0x586 DUP2 DUP4 PUSH2 0x3BCB JUMP JUMPDEST SWAP1 SWAP2 SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 DUP5 PUSH1 0x13 DUP3 GT PUSH2 0x626 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 EXTCODESIZE ISZERO PUSH2 0x622 JUMPI DUP6 DUP10 SWAP6 SWAP4 PUSH2 0x5E0 DUP3 SWAP7 SWAP5 DUP12 SWAP5 DUP12 DUP16 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP11 DUP12 SWAP10 DUP11 SWAP9 PUSH4 0x23175EF1 PUSH1 0xE1 SHL DUP11 MSTORE CALLER SWAP3 PUSH1 0x4 DUP12 ADD PUSH2 0x31B9 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x617 JUMPI SWAP1 DUP6 SWAP4 SWAP3 SWAP2 PUSH2 0x5FA JUMPI JUMPDEST DUP1 PUSH2 0x516 JUMP JUMPDEST DUP2 SWAP3 SWAP4 POP PUSH2 0x607 SWAP1 PUSH2 0x2C7F JUMP JUMPDEST PUSH2 0x614 JUMPI SWAP1 DUP2 DUP5 SWAP3 PUSH2 0x5F4 JUMP JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP2 SWAP6 POP DUP1 SWAP4 POP PUSH2 0x636 SWAP3 POP PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP1 DUP4 PUSH1 0x14 GT PUSH2 0x622 JUMPI PUSH1 0x14 ADD SWAP3 PUSH1 0x13 NOT ADD SWAP1 DUP11 DUP1 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xB12D13EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH4 0xD0E30DB PUSH1 0xE4 SHL DUP3 MSTORE DUP2 DUP1 PUSH1 0x4 DUP2 DUP11 PUSH32 0x0 GAS CALL ISZERO PUSH2 0x75E JUMPI PUSH1 0x20 DUP3 PUSH1 0x44 PUSH2 0x6A9 PUSH2 0x3A77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP12 SWAP1 MSTORE DUP3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 PUSH2 0x716 JUMPI JUMPDEST ISZERO PUSH2 0x704 JUMPI DUP6 SWAP4 PUSH2 0x508 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFB7F5079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP RETURNDATASIZE ISZERO PUSH2 0x72C JUMPI PUSH1 0x1 DUP3 MLOAD EQ PUSH1 0x1F RETURNDATASIZE GT AND PUSH2 0x6F8 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO PUSH2 0x6F8 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 DUP1 DUP1 DUP1 DUP11 CALLVALUE SUB CALLER GAS CALL PUSH2 0x77D PUSH2 0x2DC8 JUMP JUMPDEST POP PUSH2 0x4DA JUMPI PUSH1 0x40 MLOAD PUSH4 0xB12D13EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1841B4E1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP5 SWAP1 SWAP5 CALLVALUE PUSH2 0x794 JUMPI DUP1 PUSH2 0x87C JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x86F JUMPI ADDRESS JUMPDEST PUSH2 0x164 CALLDATALOAD PUSH1 0x1 PUSH1 0xFC SHL AND ISZERO PUSH2 0x837 JUMPI PUSH2 0x7D5 DUP4 DUP6 PUSH2 0x3B9B JUMP JUMPDEST SWAP1 POP PUSH2 0x825 JUMPI DUP10 PUSH2 0x7E9 SWAP2 DUP11 SWAP9 CALLER SWAP1 PUSH2 0x39AE JUMP JUMPDEST ISZERO PUSH2 0x508 JUMPI PUSH2 0x820 PUSH2 0x7F9 PUSH2 0x3A77 JUMP JUMPDEST DUP10 PUSH32 0x0 PUSH2 0x3A35 JUMP JUMPDEST PUSH2 0x508 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1577E83 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x851 SWAP2 SWAP7 DUP11 PUSH2 0x847 DUP6 DUP8 PUSH2 0x3B9B JUMP JUMPDEST SWAP4 SWAP1 SWAP3 CALLER SWAP1 PUSH2 0x395B JUMP JUMPDEST ISZERO PUSH2 0x85D JUMPI DUP7 SWAP5 PUSH2 0x7E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x478A5205 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x877 PUSH2 0x3A77 JUMP JUMPDEST PUSH2 0x7BC JUMP JUMPDEST POP PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF7 SHL AND ISZERO ISZERO PUSH2 0x7B4 JUMP JUMPDEST POP CALLVALUE ISZERO ISZERO PUSH2 0x4C4 JUMP JUMPDEST PUSH2 0x8A0 DUP2 DUP4 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP2 DUP2 PUSH1 0x14 GT PUSH2 0x920 JUMPI DUP3 EXTCODESIZE ISZERO PUSH2 0x920 JUMPI DUP4 SWAP3 PUSH1 0x14 DUP7 DUP1 SWAP5 PUSH2 0x8EB DUP13 SWAP6 DUP16 DUP16 DUP15 SWAP2 DUP15 SWAP2 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP12 DUP13 SWAP11 DUP12 SWAP10 PUSH4 0xADF38BA1 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x13 NOT ADD SWAP8 ADD SWAP6 CALLER SWAP3 PUSH1 0x4 DUP12 ADD PUSH2 0x31B9 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x915 JUMPI SWAP1 DUP4 SWAP2 ISZERO PUSH2 0x489 JUMPI PUSH2 0x906 SWAP1 PUSH2 0x2C7F JUMP JUMPDEST PUSH2 0x911 JUMPI DUP2 DUP9 PUSH2 0x489 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST PUSH2 0x94F SWAP1 DUP10 PUSH32 0x0 PUSH2 0x3A35 JUMP JUMPDEST DUP10 PUSH2 0x47F JUMP JUMPDEST PUSH2 0x97D SWAP2 PUSH2 0x963 DUP12 DUP10 PUSH2 0x3B6A JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x64 CALLDATALOAD AND PUSH2 0x395B JUMP JUMPDEST PUSH2 0x47A JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE1407E9 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x43D JUMP JUMPDEST POP PUSH2 0x164 CALLDATALOAD PUSH1 0x1 PUSH1 0xFE SHL AND ISZERO ISZERO PUSH2 0x435 JUMP JUMPDEST PUSH2 0x9B6 DUP8 DUP6 PUSH2 0x3B37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND DUP3 DUP5 PUSH1 0x13 DUP3 GT PUSH2 0xA3E JUMPI JUMPDEST POP POP DUP2 DUP2 AND EXTCODESIZE ISZERO PUSH2 0x231 JUMPI DUP12 PUSH0 DUP16 SWAP4 DUP16 SWAP7 PUSH2 0xA0A DUP16 SWAP2 SWAP8 DUP16 SWAP9 DUP6 SWAP10 DUP16 SWAP10 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP12 DUP13 SWAP11 DUP12 SWAP9 PUSH4 0x986BDD5 PUSH1 0xE0 SHL DUP11 MSTORE CALLER SWAP3 PUSH1 0x4 DUP12 ADD PUSH2 0x31B9 JUMP JUMPDEST SUB SWAP4 AND GAS CALL DUP1 ISZERO PUSH2 0xA33 JUMPI PUSH2 0xA20 JUMPI JUMPDEST POP PUSH2 0x3FC JUMP JUMPDEST PUSH2 0xA2B SWAP2 SWAP6 POP PUSH2 0x2C7F JUMP JUMPDEST PUSH0 SWAP4 DUP11 PUSH2 0xA1A JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 SWAP6 POP DUP1 SWAP5 POP PUSH2 0xA4E SWAP3 POP PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP2 DUP4 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH1 0x14 ADD SWAP3 PUSH1 0x13 NOT ADD SWAP2 DUP15 DUP1 PUSH2 0x9CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x527B154B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP9 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP9 DUP7 SUB NOT PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH2 0x3EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7DD2D13B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23BC005F PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0xA4 CALLDATALOAD DUP10 EQ ISZERO PUSH2 0x365 JUMP JUMPDEST PUSH2 0x144 CALLDATALOAD DUP11 SUB PUSH2 0xAFF JUMPI DUP11 GT PUSH2 0xAED JUMPI JUMPDEST DUP11 PUSH2 0x352 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFB8AE129 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0xB16 DUP11 PUSH2 0xB10 PUSH2 0x144 CALLDATALOAD DUP15 PUSH2 0x3133 JUMP JUMPDEST SWAP3 PUSH2 0x3133 JUMP JUMPDEST LT ISZERO PUSH2 0xAE7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFB8AE129 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x144 CALLDATALOAD SWAP8 SWAP7 PUSH2 0xB41 DUP8 DUP7 DUP12 DUP10 DUP8 PUSH2 0x37F9 JUMP JUMPDEST SWAP8 DUP6 DUP10 GT PUSH2 0xBB5 JUMPI JUMPDEST PUSH2 0x164 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB AND DUP1 PUSH2 0xB63 JUMPI JUMPDEST POP PUSH2 0x354 JUMP JUMPDEST PUSH2 0x144 CALLDATALOAD DUP12 SUB PUSH2 0xB8C JUMPI DUP10 LT PUSH2 0xB7A JUMPI JUMPDEST DUP11 PUSH2 0xB5D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x240F51C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0xB9D DUP12 PUSH2 0xB10 PUSH2 0x144 CALLDATALOAD DUP14 PUSH2 0x3133 JUMP JUMPDEST GT ISZERO PUSH2 0xB74 JUMPI PUSH1 0x40 MLOAD PUSH4 0x240F51C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP9 POP SWAP7 POP DUP4 SWAP7 PUSH2 0xBC8 DUP8 DUP7 DUP1 DUP10 DUP8 PUSH2 0x38AF JUMP JUMPDEST SWAP9 PUSH2 0x144 CALLDATALOAD DUP11 GT ISZERO PUSH2 0xB4A JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7F902A93 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0xBF1 DUP6 DUP4 PUSH2 0x3AED JUMP JUMPDEST DUP1 PUSH2 0xBFE JUMPI JUMPDEST POP POP PUSH2 0x312 JUMP JUMPDEST PUSH2 0xC08 SWAP2 ADDRESS PUSH2 0x2E73 JUMP JUMPDEST DUP2 PUSH2 0xC2D JUMPI JUMPDEST POP ISZERO PUSH2 0xC1B JUMPI DUP9 DUP1 PUSH2 0xBF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5B314E01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 POP EQ DUP10 PUSH2 0xC0E JUMP JUMPDEST PUSH2 0xC43 PUSH1 0xE4 CALLDATALOAD PUSH2 0x2E53 JUMP JUMPDEST PUSH2 0xC94 JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0xA0 DUP2 DUP2 SHR DUP4 AND SWAP1 SHL PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND OR PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x78 SWAP2 SWAP1 SWAP2 SHR SWAP1 SWAP2 AND SUB PUSH2 0xC82 JUMPI DUP9 PUSH2 0x30B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x71F45829 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9E744E25 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x62B439DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 POP TIMESTAMP GT DUP11 PUSH2 0x2F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6A6FED7F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLER AND EQ SWAP1 POP DUP10 DUP1 PUSH2 0x2D9 JUMP JUMPDEST PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND SWAP2 DUP3 ISZERO SWAP2 SWAP1 DUP3 ISZERO PUSH2 0xDB7 JUMPI JUMPDEST POP POP PUSH2 0xDA5 JUMPI PUSH2 0x164 CALLDATALOAD PUSH1 0x1 PUSH1 0xFD SHL AND PUSH2 0x2A5 JUMPI PUSH2 0xD1E DUP7 DUP5 PUSH2 0x3BFC JUMP JUMPDEST SWAP1 PUSH1 0x14 DUP3 LT ISZERO PUSH2 0xD30 JUMPI JUMPDEST POP POP PUSH2 0x2A5 JUMP JUMPDEST PUSH2 0xD3A DUP3 DUP3 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR DUP3 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH1 0x14 PUSH2 0xD5A SWAP4 PUSH1 0x13 NOT ADD SWAP3 ADD SWAP1 DUP5 ADDRESS SWAP2 PUSH2 0x3289 JUMP JUMPDEST POP PUSH2 0xD66 PUSH1 0xE4 CALLDATALOAD PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0xD73 JUMPI JUMPDEST DUP1 DUP1 PUSH2 0xD29 JUMP JUMPDEST PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP7 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH2 0xD93 JUMPI DUP9 PUSH2 0xD6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC5F2BE51 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5CD5D233 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP2 AND PUSH16 0xA2A8918CA85BAFE22016D0B997E4DF5F PUSH1 0x1 PUSH1 0xFF SHL SUB DUP2 LT PUSH2 0xDF1 JUMPI JUMPDEST POP POP AND DUP2 EQ ISZERO DUP11 DUP1 PUSH2 0xD00 JUMP JUMPDEST PUSH1 0x20 SWAP3 POP PUSH0 SWAP2 PUSH1 0x80 SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP14 DUP4 MSTORE PUSH1 0xFF SHR PUSH1 0x1B ADD DUP6 DUP4 ADD MSTORE PUSH2 0x104 CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL POP PUSH0 MLOAD DUP12 DUP1 PUSH2 0xDE4 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0xE43 PUSH2 0x2ABC JUMP JUMPDEST PUSH2 0xE4B PUSH2 0x2FC1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0xE99 JUMPI PUSH1 0x3 SLOAD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 AND OR PUSH1 0x3 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH0 DUP1 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0xEF4 PUSH2 0xECF PUSH2 0x2ABC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 CALLDATALOAD PUSH1 0xA0 SHL OR PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x44 CALLDATALOAD EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x231 JUMPI CALLDATASIZE PUSH1 0x3 NOT ADD PUSH2 0x160 DUP2 SLT PUSH2 0x231 JUMPI PUSH2 0x100 SGT PUSH2 0x231 JUMPI PUSH2 0x104 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x231 JUMPI PUSH2 0xF39 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST PUSH2 0x124 CALLDATALOAD SWAP2 SWAP1 PUSH0 PUSH2 0x144 CALLDATALOAD PUSH2 0xF4F PUSH2 0x289 PUSH2 0x2E97 JUMP JUMPDEST SWAP2 PUSH2 0xF59 DUP4 PUSH2 0x30D0 JUMP JUMPDEST SWAP4 PUSH1 0xA4 CALLDATALOAD SWAP6 DUP7 DUP7 EQ PUSH2 0x152C JUMPI JUMPDEST POP POP PUSH2 0xF70 PUSH2 0x34BB JUMP JUMPDEST PUSH2 0xF78 PUSH2 0x3779 JUMP JUMPDEST SWAP1 ISZERO PUSH2 0xCE0 JUMPI POP PUSH1 0xE4 CALLDATALOAD SWAP2 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND DUP1 ISZERO SWAP2 DUP3 ISZERO PUSH2 0x1520 JUMPI JUMPDEST POP POP ISZERO PUSH2 0xCC2 JUMPI PUSH5 0xFFFFFFFFFF DUP1 DUP5 PUSH1 0x50 SHR AND DUP1 ISZERO ISZERO SWAP1 DUP2 PUSH2 0x1516 JUMPI JUMPDEST POP PUSH2 0xCA6 JUMPI PUSH1 0x1 PUSH1 0xFA SHL DUP5 AND PUSH2 0x14D2 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0xFF SHL SWAP6 DUP2 DUP8 AND ISZERO PUSH2 0x1445 JUMPI DUP6 DUP9 LT DUP7 DUP10 XOR MUL DUP7 XOR SWAP7 PUSH2 0xFEF DUP9 PUSH1 0xC4 CALLDATALOAD DUP5 PUSH2 0x3CDA JUMP JUMPDEST SWAP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB DUP5 AND SWAP1 DUP2 PUSH2 0x1408 JUMPI JUMPDEST POP POP JUMPDEST DUP5 AND ISZERO ISZERO SWAP1 DUP2 PUSH2 0x13FD JUMPI JUMPDEST POP PUSH2 0xAB8 JUMPI DUP7 DUP7 MUL ISZERO PUSH2 0xAA6 JUMPI PUSH2 0x1025 DUP4 PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0x13D3 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH4 0xFFFFFFFF DUP5 PUSH1 0x80 SHR AND PUSH1 0x1 PUSH1 0xFF DUP7 PUSH1 0x78 SHR AND SHL SWAP2 DUP2 PUSH0 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP2 DUP4 DUP1 DUP5 AND EQ PUSH2 0xA6A JUMPI PUSH0 MSTORE PUSH1 0x20 MSTORE OR PUSH1 0x40 PUSH0 KECCAK256 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0xFC SHL SWAP2 DUP4 DUP4 AND PUSH2 0x1371 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 PUSH32 0x0 DUP1 DUP6 AND SWAP4 SWAP1 SWAP3 PUSH1 0x64 CALLDATALOAD DUP7 AND DUP6 DUP2 EQ DUP1 PUSH2 0x1362 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x135C JUMPI ADDRESS JUMPDEST PUSH1 0x1 PUSH1 0xF8 SHL DUP11 AND ISZERO PUSH2 0x1332 JUMPI PUSH2 0x10E1 DUP5 DUP1 PUSH2 0x3B6A JUMP JUMPDEST SWAP1 POP PUSH2 0x825 JUMPI DUP13 PUSH2 0x10F9 SWAP2 DUP6 SWAP5 DUP12 PUSH1 0x24 CALLDATALOAD AND SWAP1 PUSH2 0x39AE JUMP JUMPDEST PUSH2 0x1322 JUMPI JUMPDEST PUSH2 0x614 JUMPI POP SWAP1 DUP10 DUP10 SWAP3 DUP7 PUSH1 0x84 CALLDATALOAD AND DUP7 DUP2 EQ SWAP4 DUP5 DUP1 SWAP6 PUSH2 0x131B JUMPI JUMPDEST ISZERO PUSH2 0x1295 JUMPI POP POP POP SWAP2 POP POP PUSH2 0x794 JUMPI DUP8 SWAP1 PUSH1 0x1 PUSH1 0xF7 SHL DUP6 AND ISZERO PUSH2 0x121D JUMPI POP PUSH0 DUP1 DUP1 SWAP4 POP DUP1 SWAP3 PUSH2 0x1145 PUSH2 0x3A77 JUMP JUMPDEST GAS CALL PUSH2 0x114F PUSH2 0x2DC8 JUMP JUMPDEST POP ISZERO PUSH2 0x652 JUMPI DUP5 SWAP2 JUMPDEST PUSH1 0x1 PUSH1 0xFB SHL AND PUSH2 0x1194 JUMPI JUMPDEST POP PUSH1 0x40 PUSH2 0x54A PUSH32 0xFEC331350FCE78BA658E082A71DA20AC9F8D798A99B3C79681C8440CBFE77E07 SWAP3 PUSH2 0x573 SWAP6 PUSH2 0x327C JUMP JUMPDEST SWAP1 POP PUSH1 0x24 CALLDATALOAD AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x231 JUMPI PUSH0 PUSH1 0x40 MLOAD DUP1 SWAP5 PUSH4 0x23175EF1 PUSH1 0xE1 SHL DUP3 MSTORE DUP2 DUP4 DUP2 PUSH2 0x11C6 DUP8 DUP13 DUP13 CALLER DUP13 PUSH1 0x4 DUP8 ADD PUSH2 0x3221 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0xA33 JUMPI PUSH2 0x54A DUP6 PUSH1 0x40 SWAP3 PUSH2 0x573 SWAP7 PUSH32 0xFEC331350FCE78BA658E082A71DA20AC9F8D798A99B3C79681C8440CBFE77E07 SWAP6 PUSH2 0x120E JUMPI JUMPDEST POP SWAP6 POP SWAP3 POP POP PUSH2 0x1163 JUMP JUMPDEST PUSH2 0x1217 SWAP1 PUSH2 0x2C7F JUMP JUMPDEST DUP10 PUSH2 0x1203 JUMP JUMPDEST PUSH1 0x4 PUSH0 DUP1 SWAP4 DUP2 SWAP4 PUSH4 0xD0E30DB PUSH1 0xE4 SHL DUP4 MSTORE GAS CALL ISZERO PUSH2 0xA33 JUMPI PUSH1 0x20 PUSH0 PUSH1 0x44 PUSH2 0x1242 PUSH2 0x3A77 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE DUP11 PUSH1 0x24 DUP3 ADD MSTORE DUP3 DUP6 GAS CALL SWAP1 DUP2 PUSH2 0x1273 JUMPI JUMPDEST POP ISZERO PUSH2 0x704 JUMPI DUP5 SWAP2 PUSH2 0x1158 JUMP JUMPDEST SWAP1 POP RETURNDATASIZE ISZERO PUSH2 0x128D JUMPI POP PUSH1 0x1 PUSH0 MLOAD EQ PUSH1 0x1F RETURNDATASIZE GT AND JUMPDEST DUP8 PUSH2 0x1266 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO PUSH2 0x1287 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 DUP1 SWAP6 SWAP10 SWAP8 POP SWAP5 PUSH2 0x130B JUMPI JUMPDEST DUP5 ISZERO PUSH2 0x12FD JUMPI ADDRESS SWAP3 JUMPDEST AND ISZERO PUSH2 0x12E4 JUMPI SWAP1 PUSH2 0x12C0 SWAP3 SWAP2 CALLER SWAP1 PUSH2 0x39AE JUMP JUMPDEST PUSH2 0x12CB JUMPI JUMPDEST POP PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x12DE SWAP1 DUP9 PUSH2 0x12D8 PUSH2 0x3A77 JUMP JUMPDEST SWAP2 PUSH2 0x3A35 JUMP JUMPDEST DUP8 PUSH2 0x12C5 JUMP JUMPDEST PUSH2 0x12F1 SWAP4 SWAP8 POP CALLER SWAP1 PUSH2 0x3921 JUMP JUMPDEST ISZERO PUSH2 0x85D JUMPI DUP7 SWAP4 PUSH2 0x12C0 JUMP JUMPDEST PUSH2 0x1305 PUSH2 0x3A77 JUMP JUMPDEST SWAP3 PUSH2 0x12AD JUMP JUMPDEST PUSH1 0x1 PUSH1 0xF7 SHL DUP8 AND ISZERO ISZERO SWAP5 POP PUSH2 0x12A4 JUMP JUMPDEST POP PUSH0 PUSH2 0x1118 JUMP JUMPDEST PUSH2 0x132D CALLER DUP13 DUP8 PUSH2 0x3A35 JUMP JUMPDEST PUSH2 0x10FE JUMP JUMPDEST PUSH2 0x1350 SWAP2 SWAP3 DUP14 PUSH2 0x1342 DUP7 DUP1 PUSH2 0x3B6A JUMP JUMPDEST SWAP4 SWAP1 SWAP3 DUP13 PUSH1 0x24 CALLDATALOAD AND SWAP1 PUSH2 0x395B JUMP JUMPDEST ISZERO PUSH2 0x982 JUMPI DUP2 SWAP1 PUSH2 0x10F9 JUMP JUMPDEST CALLER PUSH2 0x10CB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFE SHL DUP4 AND ISZERO ISZERO PUSH2 0x10C3 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x231 JUMPI PUSH0 DUP10 DUP9 SWAP3 DUP11 DUP4 DUP11 PUSH2 0x13AD PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0x986BDD5 PUSH1 0xE0 SHL DUP7 MSTORE CALLER SWAP1 PUSH1 0x4 DUP8 ADD PUSH2 0x3221 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xA33 JUMPI PUSH2 0x13C2 JUMPI JUMPDEST POP PUSH2 0x1085 JUMP JUMPDEST PUSH2 0x13CC SWAP2 POP PUSH2 0x2C7F JUMP JUMPDEST PUSH0 DUP9 PUSH2 0x13BC JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP6 DUP6 SUB NOT PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH2 0x1077 JUMP JUMPDEST SWAP1 POP DUP7 EQ ISZERO DUP9 PUSH2 0x100F JUMP JUMPDEST DUP10 DUP2 DUP2 SUB PUSH2 0x1420 JUMPI POP POP DUP10 GT PUSH2 0xAED JUMPI JUMPDEST DUP10 DUP1 PUSH2 0x1001 JUMP JUMPDEST PUSH2 0xB10 PUSH2 0x142D SWAP3 DUP14 PUSH2 0x3133 JUMP JUMPDEST LT ISZERO PUSH2 0x1419 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFB8AE129 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0xC4 CALLDATALOAD SWAP7 DUP9 PUSH2 0x1455 DUP2 DUP11 DUP6 PUSH2 0x3CB3 JUMP JUMPDEST SWAP9 DUP9 DUP11 GT PUSH2 0x14B4 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB DUP5 AND SWAP1 DUP2 PUSH2 0x1477 JUMPI JUMPDEST POP POP PUSH2 0x1004 JUMP JUMPDEST DUP11 DUP2 DUP2 SUB PUSH2 0x148F JUMPI POP POP DUP9 LT PUSH2 0xB7A JUMPI JUMPDEST DUP10 DUP1 PUSH2 0x1470 JUMP JUMPDEST PUSH2 0xB10 PUSH2 0x149C SWAP3 DUP13 PUSH2 0x3133 JUMP JUMPDEST GT ISZERO PUSH2 0x1488 JUMPI PUSH1 0x40 MLOAD PUSH4 0x240F51C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP9 POP SWAP9 POP PUSH2 0x14C4 DUP8 DUP1 SWAP10 DUP5 PUSH2 0x3CDA JUMP JUMPDEST SWAP9 DUP1 DUP11 GT PUSH2 0xBD5 JUMPI DUP11 PUSH2 0x145E JUMP JUMPDEST PUSH2 0x14DB DUP5 PUSH2 0x2E53 JUMP JUMPDEST PUSH2 0xC94 JUMPI PUSH1 0xA0 DUP5 DUP2 SHR DUP3 AND SWAP1 SHL PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND OR PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x78 DUP6 SWAP1 SHR SWAP1 SWAP2 AND SUB PUSH2 0xC82 JUMPI DUP8 PUSH2 0xFC9 JUMP JUMPDEST SWAP1 POP TIMESTAMP GT DUP10 PUSH2 0xFB8 JUMP JUMPDEST CALLER AND EQ SWAP1 POP DUP9 DUP1 PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 PUSH0 DUP1 SWAP4 PUSH1 0x40 MLOAD SWAP1 DUP1 PUSH4 0xB135D3F PUSH1 0xE1 SHL SWAP6 DUP7 DUP5 MSTORE DUP11 PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP6 ADD MSTORE DUP2 PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x64 DUP5 ADD CALLDATACOPY PUSH1 0x64 ADD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL PUSH2 0x157E JUMPI JUMPDEST POP ISZERO PUSH2 0xDA5 JUMPI DUP7 DUP1 PUSH2 0xF66 JUMP JUMPDEST PUSH0 MLOAD EQ RETURNDATASIZE PUSH1 0x20 EQ AND SWAP1 POP DUP8 PUSH2 0x1571 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0x15AB PUSH2 0x15A1 CALLDATASIZE PUSH2 0x2AFF JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 ADDRESS PUSH2 0x2E73 JUMP JUMPDEST DUP2 SWAP3 SWAP2 SWAP3 PUSH2 0x15C0 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST LT SWAP1 POP DUP3 DUP1 PUSH2 0x15B4 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x15E3 PUSH2 0x2AA6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP2 PUSH1 0xA0 SHL AND CALLER OR PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD DUP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x40 MLOAD SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x99133AEFC2C2D1E56F8EF3622EC8E80979A0713FC9C4E1497740EFCF8099396 PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1665 PUSH2 0x2ABC JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0xEF4 PUSH2 0x169B CALLDATASIZE PUSH2 0x2AFF JUMP JUMPDEST SWAP2 PUSH2 0x2DF7 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x16DD PUSH2 0x16D6 PUSH1 0x20 SWAP3 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST SWAP1 ADDRESS PUSH2 0x2E73 JUMP JUMPDEST DUP2 PUSH2 0x16EE JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 POP ISZERO DUP3 PUSH2 0x16E3 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH2 0x170E PUSH2 0x1708 CALLDATASIZE PUSH2 0x2BA0 JUMP JUMPDEST SWAP2 PUSH2 0x2E73 JUMP JUMPDEST SWAP1 ISZERO PUSH2 0x171F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1F1B8F61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 DUP1 PUSH2 0x1741 CALLDATASIZE PUSH2 0x2BA0 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 CALLDATACOPY DUP2 ADD DUP5 DUP2 MSTORE SUB SWAP2 GAS DELEGATECALL PUSH2 0x175C PUSH2 0x2DC8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x32695F9 PUSH1 0xE3 SHL DUP2 MSTORE SWAP3 ISZERO ISZERO PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD MSTORE DUP2 SWAP1 PUSH2 0x1787 SWAP1 PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0x2B32 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x17AA PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x2CF2 JUMP JUMPDEST STOP JUMPDEST CALLDATASIZE PUSH1 0x3 NOT ADD PUSH2 0x180 DUP2 SLT PUSH2 0x231 JUMPI PUSH2 0x100 SGT PUSH2 0x231 JUMPI PUSH2 0x144 CALLDATALOAD PUSH2 0x124 CALLDATALOAD PUSH0 PUSH2 0x164 CALLDATALOAD PUSH2 0x17DA PUSH2 0x289 PUSH2 0x2E97 JUMP JUMPDEST SWAP1 PUSH2 0x17E4 DUP3 PUSH2 0x30D0 JUMP JUMPDEST SWAP3 PUSH1 0xA4 CALLDATALOAD SWAP5 DUP6 DUP6 EQ PUSH2 0x1C28 JUMPI JUMPDEST POP PUSH2 0x17FA PUSH2 0x34BB JUMP JUMPDEST PUSH2 0x1802 PUSH2 0x3779 JUMP JUMPDEST SWAP1 ISZERO PUSH2 0xCE0 JUMPI POP PUSH1 0xE4 CALLDATALOAD SWAP2 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND DUP1 ISZERO SWAP2 DUP3 ISZERO PUSH2 0x1C1C JUMPI JUMPDEST POP POP ISZERO PUSH2 0xCC2 JUMPI PUSH5 0xFFFFFFFFFF DUP1 DUP5 PUSH1 0x50 SHR AND DUP1 ISZERO ISZERO SWAP1 DUP2 PUSH2 0x1C12 JUMPI JUMPDEST POP PUSH2 0xCA6 JUMPI PUSH1 0x1 PUSH1 0xFA SHL DUP5 AND PUSH2 0x1BCE JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0xFF SHL SWAP6 DUP2 DUP8 AND ISZERO PUSH2 0x1B41 JUMPI DUP6 DUP9 LT DUP7 DUP10 XOR MUL DUP7 XOR SWAP7 PUSH2 0x1879 DUP9 PUSH1 0xC4 CALLDATALOAD DUP5 PUSH2 0x3CDA JUMP JUMPDEST SWAP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB DUP5 AND SWAP1 DUP2 PUSH2 0x1B04 JUMPI JUMPDEST POP POP JUMPDEST DUP5 AND ISZERO ISZERO SWAP1 DUP2 PUSH2 0x1AF9 JUMPI JUMPDEST POP PUSH2 0xAB8 JUMPI DUP7 DUP7 MUL ISZERO PUSH2 0xAA6 JUMPI PUSH2 0x18AF DUP4 PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0x1ACF JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH4 0xFFFFFFFF DUP5 PUSH1 0x80 SHR AND PUSH1 0x1 PUSH1 0xFF DUP7 PUSH1 0x78 SHR AND SHL SWAP2 DUP2 PUSH0 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP2 DUP4 DUP1 DUP5 AND EQ PUSH2 0xA6A JUMPI PUSH0 MSTORE PUSH1 0x20 MSTORE OR PUSH1 0x40 PUSH0 KECCAK256 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0xFC SHL SWAP2 DUP4 DUP4 AND PUSH2 0x1A6D JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 PUSH32 0x0 DUP1 DUP6 AND SWAP4 SWAP1 SWAP3 PUSH1 0x64 CALLDATALOAD DUP7 AND DUP6 DUP2 EQ DUP1 PUSH2 0x1A5E JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1A58 JUMPI ADDRESS JUMPDEST PUSH1 0x1 PUSH1 0xF8 SHL DUP11 AND ISZERO PUSH2 0x1A3C JUMPI PUSH2 0x196B DUP5 DUP1 PUSH2 0x3B6A JUMP JUMPDEST SWAP1 POP PUSH2 0x825 JUMPI DUP13 PUSH2 0x1983 SWAP2 DUP6 SWAP5 DUP12 PUSH1 0x24 CALLDATALOAD AND SWAP1 PUSH2 0x39AE JUMP JUMPDEST PUSH2 0x1A2C JUMPI JUMPDEST PUSH2 0x614 JUMPI POP PUSH1 0x84 CALLDATALOAD DUP6 AND SWAP2 DUP5 DUP4 EQ SWAP2 DUP3 DUP1 PUSH2 0x1A23 JUMPI JUMPDEST ISZERO PUSH2 0x19F4 JUMPI POP POP POP POP DUP8 CALLVALUE LT PUSH2 0x794 JUMPI DUP8 SWAP1 DUP2 CALLVALUE GT PUSH2 0x19D4 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0xF7 SHL DUP6 AND ISZERO PUSH2 0x121D JUMPI POP PUSH0 DUP1 DUP1 SWAP4 POP DUP1 SWAP3 PUSH2 0x1145 PUSH2 0x3A77 JUMP JUMPDEST SWAP1 PUSH0 DUP1 DUP1 DUP1 SWAP4 CALLVALUE SUB CALLER GAS CALL PUSH2 0x19E7 PUSH2 0x2DC8 JUMP JUMPDEST POP ISZERO PUSH2 0x652 JUMPI DUP8 SWAP1 PUSH2 0x19B8 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP7 SWAP5 POP CALLVALUE PUSH2 0x794 JUMPI DUP10 SWAP7 DUP12 SWAP3 DUP5 PUSH2 0x130B JUMPI DUP5 ISZERO PUSH2 0x12FD JUMPI ADDRESS SWAP3 AND ISZERO PUSH2 0x12E4 JUMPI SWAP1 PUSH2 0x12C0 SWAP3 SWAP2 CALLER SWAP1 PUSH2 0x39AE JUMP JUMPDEST POP CALLVALUE ISZERO ISZERO PUSH2 0x199E JUMP JUMPDEST PUSH2 0x1A37 CALLER DUP13 DUP8 PUSH2 0x3A35 JUMP JUMPDEST PUSH2 0x1988 JUMP JUMPDEST PUSH2 0x1A4C SWAP2 SWAP3 DUP14 PUSH2 0x1342 DUP7 DUP1 PUSH2 0x3B6A JUMP JUMPDEST ISZERO PUSH2 0x982 JUMPI DUP2 SWAP1 PUSH2 0x1983 JUMP JUMPDEST CALLER PUSH2 0x1955 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFE SHL DUP4 AND ISZERO ISZERO PUSH2 0x194D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x231 JUMPI PUSH0 DUP10 DUP9 SWAP3 DUP11 DUP4 DUP11 PUSH2 0x1AA9 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0x986BDD5 PUSH1 0xE0 SHL DUP7 MSTORE CALLER SWAP1 PUSH1 0x4 DUP8 ADD PUSH2 0x3221 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xA33 JUMPI PUSH2 0x1ABE JUMPI JUMPDEST POP PUSH2 0x190F JUMP JUMPDEST PUSH2 0x1AC8 SWAP2 POP PUSH2 0x2C7F JUMP JUMPDEST PUSH0 DUP9 PUSH2 0x1AB8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP6 DUP6 SUB NOT PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH2 0x1901 JUMP JUMPDEST SWAP1 POP DUP7 EQ ISZERO DUP9 PUSH2 0x1899 JUMP JUMPDEST DUP10 DUP2 DUP2 SUB PUSH2 0x1B1C JUMPI POP POP DUP10 GT PUSH2 0xAED JUMPI JUMPDEST DUP10 DUP1 PUSH2 0x188B JUMP JUMPDEST PUSH2 0xB10 PUSH2 0x1B29 SWAP3 DUP14 PUSH2 0x3133 JUMP JUMPDEST LT ISZERO PUSH2 0x1B15 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFB8AE129 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0xC4 CALLDATALOAD SWAP7 DUP9 PUSH2 0x1B51 DUP2 DUP11 DUP6 PUSH2 0x3CB3 JUMP JUMPDEST SWAP9 DUP9 DUP11 GT PUSH2 0x1BB0 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB DUP5 AND SWAP1 DUP2 PUSH2 0x1B73 JUMPI JUMPDEST POP POP PUSH2 0x188E JUMP JUMPDEST DUP11 DUP2 DUP2 SUB PUSH2 0x1B8B JUMPI POP POP DUP9 LT PUSH2 0xB7A JUMPI JUMPDEST DUP10 DUP1 PUSH2 0x1B6C JUMP JUMPDEST PUSH2 0xB10 PUSH2 0x1B98 SWAP3 DUP13 PUSH2 0x3133 JUMP JUMPDEST GT ISZERO PUSH2 0x1B84 JUMPI PUSH1 0x40 MLOAD PUSH4 0x240F51C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP9 POP SWAP9 POP PUSH2 0x1BC0 DUP8 DUP1 SWAP10 DUP5 PUSH2 0x3CDA JUMP JUMPDEST SWAP9 DUP1 DUP11 GT PUSH2 0xBD5 JUMPI DUP11 PUSH2 0x1B5A JUMP JUMPDEST PUSH2 0x1BD7 DUP5 PUSH2 0x2E53 JUMP JUMPDEST PUSH2 0xC94 JUMPI PUSH1 0xA0 DUP5 DUP2 SHR DUP3 AND SWAP1 SHL PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND OR PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x78 DUP6 SWAP1 SHR SWAP1 SWAP2 AND SUB PUSH2 0xC82 JUMPI DUP8 PUSH2 0x1853 JUMP JUMPDEST SWAP1 POP TIMESTAMP GT DUP10 PUSH2 0x1842 JUMP JUMPDEST CALLER AND EQ SWAP1 POP DUP9 DUP1 PUSH2 0x1825 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND DUP1 ISZERO SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ISZERO PUSH2 0x1C4F JUMPI JUMPDEST POP POP POP PUSH2 0xDA5 JUMPI DUP7 PUSH2 0x17F1 JUMP JUMPDEST SWAP2 SWAP3 POP SWAP1 PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP2 AND PUSH16 0xA2A8918CA85BAFE22016D0B997E4DF5F PUSH1 0x1 PUSH1 0xFF SHL SUB DUP2 LT PUSH2 0x1C8A JUMPI JUMPDEST POP POP AND EQ ISZERO DUP8 DUP1 DUP1 PUSH2 0x1C42 JUMP JUMPDEST PUSH1 0x20 SWAP3 POP PUSH0 SWAP2 PUSH1 0x80 SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP11 DUP4 MSTORE PUSH1 0xFF SHR PUSH1 0x1B ADD DUP6 DUP4 ADD MSTORE PUSH2 0x104 CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL POP PUSH0 MLOAD DUP10 DUP1 PUSH2 0x1C7D JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x1D1C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2B70 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x1D36 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2B70 JUMP JUMPDEST SWAP1 DUP2 DUP4 SUB PUSH2 0x1D73 JUMPI PUSH0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1D49 JUMPI STOP JUMPDEST DUP1 PUSH2 0x1D6D PUSH2 0x1D5A PUSH1 0x1 SWAP4 DUP8 DUP10 PUSH2 0x2CCE JUMP JUMPDEST CALLDATALOAD PUSH2 0x1D66 DUP4 DUP8 DUP8 PUSH2 0x2CCE JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x2CF2 JUMP JUMPDEST ADD PUSH2 0x1D40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1B2F9B3B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x1DBE PUSH32 0x0 PUSH2 0x34DC JUMP JUMPDEST PUSH2 0x1DE7 PUSH32 0x0 PUSH2 0x35FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP3 DUP3 DUP5 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 GT OR PUSH2 0x1E8B JUMPI SWAP2 PUSH1 0x20 PUSH2 0x1E40 DUP6 SWAP5 PUSH2 0x1E32 SWAP8 SWAP7 PUSH1 0x40 MSTORE PUSH0 DUP5 MSTORE PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 PUSH1 0xF PUSH1 0xF8 SHL DUP10 MSTORE PUSH1 0xE0 DUP6 DUP11 ADD MSTORE PUSH1 0xE0 DUP10 ADD SWAP1 PUSH2 0x2B32 JUMP JUMPDEST SWAP1 DUP8 DUP3 SUB PUSH1 0x40 DUP10 ADD MSTORE PUSH2 0x2B32 JUMP JUMPDEST SWAP2 CHAINID PUSH1 0x60 DUP8 ADD MSTORE ADDRESS PUSH1 0x80 DUP8 ADD MSTORE PUSH0 PUSH1 0xA0 DUP8 ADD MSTORE DUP6 DUP4 SUB PUSH1 0xC0 DUP8 ADD MSTORE MLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP3 SWAP2 PUSH0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1E74 JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x1E65 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x1EB7 PUSH2 0x2FC1 JUMP JUMPDEST PUSH2 0x1EBF PUSH2 0x34BB JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 SWAP1 PUSH1 0x20 SWAP1 LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH2 0x100 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x231 JUMPI PUSH1 0x42 PUSH1 0x20 SWAP2 PUSH2 0x120 PUSH2 0x1F23 PUSH2 0x2E97 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x3AF21EC5A20011B88D3B7B4ED7C806CEF05A5980CF34974BCD53566A131F7E4C DUP3 MSTORE PUSH1 0x4 DUP7 DUP4 ADD CALLDATACOPY KECCAK256 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1901 PUSH1 0xF0 SHL DUP4 MSTORE PUSH1 0x2 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE KECCAK256 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0xEF4 PUSH2 0x1F84 CALLDATASIZE PUSH2 0x2AFF JUMP JUMPDEST SWAP2 PUSH2 0x2C28 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x1FA2 PUSH2 0x2FC1 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0x1FF8 PUSH2 0x15A1 CALLDATASIZE PUSH2 0x2AFF JUMP JUMPDEST DUP2 SWAP3 SWAP2 SWAP3 PUSH2 0x200C JUMPI POP POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST EQ SWAP1 POP DUP3 DUP1 PUSH2 0x15B4 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x3 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x2067 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x2080 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST PUSH2 0x208D DUP5 DUP5 SWAP6 SWAP4 SWAP6 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP2 DUP1 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH0 SWAP4 DUP5 SWAP4 PUSH2 0x20B3 SWAP3 PUSH1 0x13 NOT ADD SWAP2 PUSH1 0x14 ADD SWAP1 ADDRESS SWAP1 CALLER SWAP1 PUSH2 0x3289 JUMP JUMPDEST POP DUP1 PUSH1 0x40 MLOAD SWAP5 DUP6 CALLDATACOPY DUP4 ADDRESS GAS DELEGATECALL RETURNDATASIZE PUSH0 DUP4 RETURNDATACOPY ISZERO PUSH2 0x20CC JUMPI RETURNDATASIZE SWAP1 RETURN JUMPDEST RETURNDATASIZE SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI CALLDATASIZE PUSH1 0x3 NOT ADD PUSH2 0x180 DUP2 SLT PUSH2 0x231 JUMPI PUSH2 0x100 SGT PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x104 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x210C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x164 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x212A PUSH2 0x2134 SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST SWAP1 PUSH2 0x144 CALLDATALOAD PUSH2 0x2FED JUMP JUMPDEST SWAP5 SWAP2 SWAP3 PUSH2 0x2146 PUSH2 0x289 SWAP8 SWAP3 SWAP6 SWAP8 PUSH2 0x2E97 JUMP JUMPDEST SWAP5 PUSH2 0x2150 DUP7 PUSH2 0x30D0 JUMP JUMPDEST SWAP4 PUSH0 SWAP4 PUSH1 0xA4 CALLDATALOAD DUP7 EQ PUSH2 0x2749 JUMPI JUMPDEST POP POP PUSH2 0x2167 PUSH2 0x34BB JUMP JUMPDEST PUSH2 0x2171 DUP6 DUP4 PUSH2 0x36DF JUMP JUMPDEST SWAP1 ISZERO PUSH2 0xCE0 JUMPI POP PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP1 PUSH1 0xE4 CALLDATALOAD AND DUP1 ISZERO SWAP2 DUP3 ISZERO PUSH2 0x273D JUMPI JUMPDEST POP POP ISZERO PUSH2 0xCC2 JUMPI PUSH5 0xFFFFFFFFFF DUP1 PUSH1 0xE4 CALLDATALOAD PUSH1 0x50 SHR AND DUP1 ISZERO ISZERO SWAP1 DUP2 PUSH2 0x2733 JUMPI JUMPDEST POP PUSH2 0xCA6 JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFA SHL AND PUSH2 0x26E9 JUMPI JUMPDEST POP DUP5 PUSH2 0x26AA JUMPI JUMPDEST PUSH2 0x144 CALLDATALOAD PUSH1 0x1 PUSH1 0xFF SHL AND ISZERO PUSH2 0x2604 JUMPI DUP4 PUSH2 0x124 CALLDATALOAD LT DUP5 PUSH2 0x124 CALLDATALOAD XOR MUL DUP5 XOR SWAP7 PUSH2 0x21F7 DUP8 DUP7 DUP11 DUP10 DUP8 PUSH2 0x38AF JUMP JUMPDEST SWAP9 PUSH2 0x144 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB AND DUP1 PUSH2 0x25C4 JUMPI JUMPDEST POP JUMPDEST PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFF SHL AND ISZERO ISZERO DUP1 PUSH2 0x25B8 JUMPI JUMPDEST PUSH2 0xAB8 JUMPI DUP10 DUP10 MUL ISZERO PUSH2 0xAA6 JUMPI PUSH2 0x2235 PUSH1 0xE4 CALLDATALOAD PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0x258E JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xE4 CALLDATALOAD PUSH1 0x80 DUP2 SWAP1 SHR PUSH4 0xFFFFFFFF AND DUP6 MSTORE SWAP3 DUP2 SWAP1 MSTORE SWAP3 KECCAK256 SLOAD SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x78 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND SHL DUP1 DUP4 AND EQ PUSH2 0xA6A JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE4 CALLDATALOAD PUSH1 0x80 SHR AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0xE4 CALLDATALOAD PUSH1 0x78 SHR AND SHL OR PUSH1 0x40 PUSH0 KECCAK256 SSTORE JUMPDEST PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xFC SHL AND PUSH2 0x24DB JUMPI JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH32 0x0 SWAP1 SWAP2 AND EQ DUP1 PUSH2 0x24C9 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x24C3 JUMPI ADDRESS JUMPDEST DUP11 PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF8 SHL AND ISZERO PUSH2 0x249F JUMPI POP PUSH2 0x2310 DUP10 DUP8 PUSH2 0x3B6A JUMP JUMPDEST SWAP1 POP PUSH2 0x825 JUMPI PUSH2 0x2333 SWAP1 DUP12 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x64 CALLDATALOAD AND PUSH2 0x39AE JUMP JUMPDEST PUSH2 0x246E JUMPI JUMPDEST POP PUSH1 0x13 DUP2 GT PUSH2 0x23F3 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x84 CALLDATALOAD DUP2 AND SWAP1 PUSH32 0x0 AND DUP2 EQ DUP1 DUP1 PUSH2 0x23EC JUMPI JUMPDEST ISZERO PUSH2 0x23A4 JUMPI POP POP DUP7 PUSH2 0x794 JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF7 SHL AND ISZERO PUSH2 0x664 JUMPI DUP2 DUP1 DUP1 DUP1 DUP11 PUSH2 0x4F5 PUSH2 0x3A77 JUMP JUMPDEST SWAP1 SWAP5 SWAP1 DUP1 PUSH2 0x23DB JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x23CE JUMPI ADDRESS JUMPDEST PUSH2 0x144 CALLDATALOAD PUSH1 0x1 PUSH1 0xFC SHL AND ISZERO PUSH2 0x837 JUMPI PUSH2 0x7D5 DUP4 DUP6 PUSH2 0x3B9B JUMP JUMPDEST PUSH2 0x23D6 PUSH2 0x3A77 JUMP JUMPDEST PUSH2 0x23B5 JUMP JUMPDEST POP PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF7 SHL AND ISZERO ISZERO PUSH2 0x23AD JUMP JUMPDEST POP PUSH0 PUSH2 0x237D JUMP JUMPDEST PUSH2 0x23FD DUP2 DUP4 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP2 DUP2 PUSH1 0x14 GT PUSH2 0x920 JUMPI DUP3 EXTCODESIZE ISZERO PUSH2 0x920 JUMPI DUP4 SWAP3 PUSH1 0x14 DUP7 DUP1 SWAP5 PUSH2 0x2448 DUP13 SWAP6 DUP16 DUP16 DUP15 SWAP2 DUP15 SWAP2 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP12 DUP13 SWAP11 DUP12 SWAP10 PUSH4 0xADF38BA1 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x13 NOT ADD SWAP8 ADD SWAP6 CALLER SWAP3 PUSH1 0x4 DUP12 ADD PUSH2 0x31B9 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x915 JUMPI SWAP1 DUP4 SWAP2 ISZERO PUSH2 0x2342 JUMPI PUSH2 0x2463 SWAP1 PUSH2 0x2C7F JUMP JUMPDEST PUSH2 0x911 JUMPI DUP2 DUP9 PUSH2 0x2342 JUMP JUMPDEST PUSH2 0x2499 SWAP1 DUP10 PUSH32 0x0 PUSH2 0x3A35 JUMP JUMPDEST DUP10 PUSH2 0x2338 JUMP JUMPDEST PUSH2 0x24AD SWAP2 PUSH2 0x963 DUP12 DUP10 PUSH2 0x3B6A JUMP JUMPDEST PUSH2 0x2333 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE1407E9 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x22F6 JUMP JUMPDEST POP PUSH2 0x144 CALLDATALOAD PUSH1 0x1 PUSH1 0xFE SHL AND ISZERO ISZERO PUSH2 0x22EE JUMP JUMPDEST PUSH2 0x24E5 DUP8 DUP6 PUSH2 0x3B37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 AND DUP3 DUP5 PUSH1 0x13 DUP3 GT PUSH2 0x2562 JUMPI JUMPDEST POP POP DUP2 DUP2 AND EXTCODESIZE ISZERO PUSH2 0x231 JUMPI DUP12 PUSH0 DUP16 SWAP4 DUP16 SWAP7 PUSH2 0x2539 DUP16 SWAP2 SWAP8 DUP16 SWAP9 DUP6 SWAP10 DUP16 SWAP10 PUSH1 0x40 MLOAD SWAP13 DUP14 SWAP12 DUP13 SWAP11 DUP12 SWAP9 PUSH4 0x986BDD5 PUSH1 0xE0 SHL DUP11 MSTORE CALLER SWAP3 PUSH1 0x4 DUP12 ADD PUSH2 0x31B9 JUMP JUMPDEST SUB SWAP4 AND GAS CALL DUP1 ISZERO PUSH2 0xA33 JUMPI PUSH2 0x254F JUMPI JUMPDEST POP PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x255A SWAP2 SWAP6 POP PUSH2 0x2C7F JUMP JUMPDEST PUSH0 SWAP4 DUP11 PUSH2 0x2549 JUMP JUMPDEST DUP2 SWAP6 POP DUP1 SWAP5 POP PUSH2 0x2572 SWAP3 POP PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP2 DUP4 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH1 0x14 ADD SWAP3 PUSH1 0x13 NOT ADD SWAP2 DUP15 DUP1 PUSH2 0x24FD JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP9 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP9 DUP7 SUB NOT PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH2 0x22A7 JUMP JUMPDEST POP PUSH1 0xA4 CALLDATALOAD DUP10 EQ ISZERO PUSH2 0x221E JUMP JUMPDEST PUSH2 0x124 CALLDATALOAD DUP11 SUB PUSH2 0x25DB JUMPI DUP11 GT PUSH2 0xAED JUMPI JUMPDEST DUP11 PUSH2 0x220B JUMP JUMPDEST PUSH2 0x25EC DUP11 PUSH2 0xB10 PUSH2 0x124 CALLDATALOAD DUP15 PUSH2 0x3133 JUMP JUMPDEST LT ISZERO PUSH2 0x25D5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFB8AE129 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x124 CALLDATALOAD SWAP8 SWAP7 PUSH2 0x2617 DUP8 DUP7 DUP12 DUP10 DUP8 PUSH2 0x37F9 JUMP JUMPDEST SWAP8 DUP6 DUP10 GT PUSH2 0x2679 JUMPI JUMPDEST PUSH2 0x144 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB AND DUP1 PUSH2 0x2639 JUMPI JUMPDEST POP PUSH2 0x220D JUMP JUMPDEST PUSH2 0x124 CALLDATALOAD DUP12 SUB PUSH2 0x2650 JUMPI DUP10 LT PUSH2 0xB7A JUMPI JUMPDEST DUP11 PUSH2 0x2633 JUMP JUMPDEST PUSH2 0x2661 DUP12 PUSH2 0xB10 PUSH2 0x124 CALLDATALOAD DUP14 PUSH2 0x3133 JUMP JUMPDEST GT ISZERO PUSH2 0x264A JUMPI PUSH1 0x40 MLOAD PUSH4 0x240F51C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP9 POP SWAP7 POP DUP4 SWAP7 PUSH2 0x268C DUP8 DUP7 DUP1 DUP10 DUP8 PUSH2 0x38AF JUMP JUMPDEST SWAP9 PUSH2 0x124 CALLDATALOAD DUP11 GT ISZERO PUSH2 0x2620 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7F902A93 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x26B4 DUP6 DUP4 PUSH2 0x3AED JUMP JUMPDEST DUP1 PUSH2 0x26C1 JUMPI JUMPDEST POP POP PUSH2 0x21CB JUMP JUMPDEST PUSH2 0x26CB SWAP2 ADDRESS PUSH2 0x2E73 JUMP JUMPDEST DUP2 PUSH2 0x26DE JUMPI JUMPDEST POP ISZERO PUSH2 0xC1B JUMPI DUP9 DUP1 PUSH2 0x26BA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP EQ DUP10 PUSH2 0x26D1 JUMP JUMPDEST PUSH2 0x26F4 PUSH1 0xE4 CALLDATALOAD PUSH2 0x2E53 JUMP JUMPDEST PUSH2 0xC94 JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0xA0 DUP2 DUP2 SHR DUP4 AND SWAP1 SHL PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND OR PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x78 SWAP2 SWAP1 SWAP2 SHR SWAP1 SWAP2 AND SUB PUSH2 0xC82 JUMPI DUP9 PUSH2 0x21C4 JUMP JUMPDEST SWAP1 POP TIMESTAMP GT DUP11 PUSH2 0x21B1 JUMP JUMPDEST CALLER AND EQ SWAP1 POP DUP10 DUP1 PUSH2 0x2192 JUMP JUMPDEST PUSH1 0x20 PUSH0 DUP1 SWAP4 PUSH1 0x40 MLOAD SWAP1 DUP1 PUSH4 0xB135D3F PUSH1 0xE1 SHL SWAP6 DUP7 DUP5 MSTORE DUP14 PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP6 ADD MSTORE DUP2 PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x64 DUP5 ADD CALLDATACOPY PUSH1 0x64 ADD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL PUSH2 0x279B JUMPI JUMPDEST POP ISZERO PUSH2 0xDA5 JUMPI DUP9 DUP1 PUSH2 0x215D JUMP JUMPDEST PUSH0 MLOAD EQ RETURNDATASIZE PUSH1 0x20 EQ AND SWAP1 POP DUP10 PUSH2 0x278E JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0x27BE PUSH2 0x15A1 CALLDATASIZE PUSH2 0x2AFF JUMP JUMPDEST DUP2 SWAP3 SWAP2 SWAP3 PUSH2 0x27D2 JUMPI POP POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST GT SWAP1 POP DUP3 DUP1 PUSH2 0x15B4 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x27FD PUSH2 0x2ABC JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x2828 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 NOT DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xAA3EEF95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x2852 PUSH2 0x2FC1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND ISZERO PUSH2 0x2899 JUMPI PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x3 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA SWAP1 PUSH1 0x20 SWAP1 LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x20 PUSH2 0x28C5 PUSH2 0x2E97 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x231 JUMPI PUSH2 0x2902 PUSH2 0x16D6 PUSH1 0x20 SWAP3 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST DUP2 PUSH2 0x2912 JUMPI POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x1 SWAP2 POP EQ DUP3 PUSH2 0x16E3 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x293E PUSH2 0x2ABC JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH1 0x8 SHR PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH2 0x297D PUSH2 0x2AA6 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP1 ISZERO DUP1 ISZERO PUSH2 0x29FF JUMPI JUMPDEST PUSH2 0x29ED JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 PUSH1 0xA0 SHL AND CALLER OR PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 DUP2 SLOAD ADD DUP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x40 MLOAD SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x99133AEFC2C2D1E56F8EF3622EC8E80979A0713FC9C4E1497740EFCF8099396 PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x555FBBBF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF DUP2 GT PUSH2 0x2989 JUMP JUMPDEST CALLVALUE PUSH2 0x231 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x231 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x2A27 DUP3 PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0x2A97 JUMPI POP CALLER PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH4 0xFFFFFFFF DUP2 PUSH1 0x80 SHR AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0xFF PUSH1 0x24 CALLDATALOAD SWAP3 PUSH1 0x78 SHR AND SHL OR DUP2 SLOAD OR DUP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xCDA0F7E73D07BDB14B141F2CF4745926629A1B63E7C6A3DD8A80232CB459A850 PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH4 0x435FFD65 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x231 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x231 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x231 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x231 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x231 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x231 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x231 JUMPI PUSH2 0x2B2E SWAP2 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x2B5C JUMPI POP POP DUP3 PUSH0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x2B3C JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x231 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x231 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x231 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x231 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x231 JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x231 JUMPI PUSH2 0x2B2E SWAP2 PUSH1 0x4 ADD PUSH2 0x2AD2 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 CALLDATALOAD DUP2 DUP2 AND SWAP4 SWAP3 PUSH1 0x14 DUP2 LT PUSH2 0x2C01 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x14 SUB PUSH1 0x3 SHL DUP3 SWAP1 SHL AND AND SWAP2 POP JUMP JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x231 JUMPI DUP5 GT PUSH2 0x231 JUMPI DUP2 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH0 JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x2C75 JUMPI PUSH2 0x16D6 DUP3 PUSH2 0x2C4B SWAP3 DUP9 DUP9 PUSH2 0x2C10 JUMP JUMPDEST DUP2 PUSH2 0x2C6A JUMPI JUMPDEST POP PUSH2 0x2C60 JUMPI SWAP1 PUSH1 0x20 SHR SWAP1 PUSH2 0x2C2E JUMP JUMPDEST POP POP SWAP2 POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP EQ PUSH0 PUSH2 0x2C51 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1E8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1E8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1E8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x2CDE JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH2 0x2CFC DUP3 PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0x2D67 JUMPI POP CALLER PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH4 0xFFFFFFFF DUP2 PUSH1 0x80 SHR AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SWAP3 PUSH1 0x78 SHR AND SHL DUP2 SLOAD OR DUP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xCDA0F7E73D07BDB14B141F2CF4745926629A1B63E7C6A3DD8A80232CB459A850 PUSH1 0x40 CALLER SWAP3 LOG2 JUMP JUMPDEST PUSH32 0x5152ABF959F6564662358C2E52B702259B78BAC5EE7842A0F01937E670EFCC7D SWAP2 POP PUSH1 0x20 SWAP1 CALLER PUSH0 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 PUSH0 MSTORE DUP3 MSTORE PUSH0 NOT PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1E8B JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x2DF2 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x2DD9 DUP3 PUSH2 0x2DAD JUMP JUMPDEST SWAP2 PUSH2 0x2DE7 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x2CAD JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH0 JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x2E48 JUMPI PUSH2 0x16D6 DUP3 PUSH2 0x2E1A SWAP3 DUP9 DUP9 PUSH2 0x2C10 JUMP JUMPDEST SWAP1 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x2E3C JUMPI JUMPDEST POP PUSH2 0x2E33 JUMPI SWAP1 PUSH1 0x20 SHR SWAP1 PUSH2 0x2DFD JUMP JUMPDEST POP POP SWAP2 POP POP PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP EQ ISZERO PUSH0 PUSH2 0x2E24 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF SHL DUP2 AND ISZERO DUP1 ISZERO SWAP2 SWAP1 PUSH2 0x2E67 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFE SHL AND ISZERO SWAP2 SWAP1 POP JUMP JUMPDEST SWAP2 PUSH0 SWAP1 PUSH1 0x20 SWAP3 DUP3 SWAP5 DUP3 PUSH1 0x40 MLOAD SWAP3 DUP4 CALLDATACOPY GAS STATICCALL PUSH1 0x20 RETURNDATASIZE EQ AND SWAP2 DUP3 PUSH2 0x2E91 JUMPI JUMP JUMPDEST PUSH0 MLOAD SWAP2 POP JUMP JUMPDEST ADDRESS PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x2F98 JUMPI JUMPDEST ISZERO PUSH2 0x2EF2 JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP3 MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1E8B JUMPI PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP PUSH32 0x0 CHAINID EQ PUSH2 0x2EC9 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x2FD5 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0xFB SHL DUP2 AND ISZERO PUSH2 0x3076 JUMPI PUSH2 0x3007 DUP3 DUP6 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP4 DUP3 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH1 0x14 ADD SWAP2 PUSH1 0x13 NOT ADD SWAP3 JUMPDEST PUSH3 0xFFFFFF PUSH1 0xE0 DUP4 SWAP1 SHR DUP2 AND SWAP5 DUP6 ISZERO PUSH2 0x3068 JUMPI DUP1 DUP7 GT PUSH2 0x231 JUMPI PUSH2 0x3044 SWAP1 DUP6 SWAP7 DUP2 DUP2 SWAP8 PUSH2 0x2C10 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP4 JUMPDEST PUSH1 0xC8 SHR AND SWAP3 DUP4 ISZERO PUSH2 0x305E JUMPI DUP4 GT PUSH2 0x231 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP POP SWAP1 POP PUSH0 SWAP1 PUSH0 SWAP1 JUMP JUMPDEST SWAP3 SWAP4 SWAP1 SWAP5 POP PUSH0 SWAP5 PUSH0 SWAP5 PUSH2 0x3049 JUMP JUMPDEST CALLER SWAP4 SWAP2 SWAP3 PUSH2 0x301D JUMP JUMPDEST PUSH1 0x42 SWAP1 PUSH2 0x120 PUSH1 0x40 MLOAD PUSH32 0x3AF21EC5A20011B88D3B7B4ED7C806CEF05A5980CF34974BCD53566A131F7E4C DUP2 MSTORE PUSH2 0x100 PUSH1 0x4 PUSH1 0x20 DUP4 ADD CALLDATACOPY KECCAK256 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1901 PUSH1 0xF0 SHL DUP4 MSTORE PUSH1 0x2 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x30DB PUSH1 0xE4 CALLDATALOAD PUSH2 0x2E53 JUMP JUMPDEST ISZERO PUSH2 0x3100 JUMPI POP PUSH1 0xA4 CALLDATALOAD SWAP1 JUMPDEST DUP2 ISZERO PUSH2 0x30EE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7B8FDED1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x312D PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0xA4 CALLDATALOAD SWAP1 PUSH2 0x36CE JUMP JUMPDEST SWAP1 PUSH2 0x30E6 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x3146 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 PUSH1 0xE4 CALLDATALOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP5 SWAP2 PUSH2 0x321E SWAP10 SWAP8 SWAP5 SWAP2 PUSH2 0x31E5 SWAP2 SWAP10 SWAP8 SWAP5 SWAP10 PUSH2 0x1E0 PUSH2 0x31D6 DUP10 PUSH2 0x315A JUMP JUMPDEST DUP1 PUSH2 0x100 DUP11 ADD MSTORE DUP9 ADD SWAP2 PUSH2 0x3199 JUMP JUMPDEST PUSH2 0x120 DUP7 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x140 DUP6 ADD MSTORE PUSH2 0x160 DUP5 ADD MSTORE PUSH2 0x180 DUP4 ADD MSTORE PUSH2 0x1A0 DUP3 ADD MSTORE DUP1 DUP5 SUB PUSH2 0x1C0 SWAP1 SWAP2 ADD MSTORE PUSH2 0x3199 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 PUSH0 SWAP4 PUSH2 0x220 SWAP7 SWAP3 SWAP4 DUP6 PUSH2 0x1E0 PUSH2 0x3237 DUP10 PUSH2 0x315A JUMP JUMPDEST DUP1 PUSH2 0x100 DUP11 ADD MSTORE DUP9 ADD MSTORE PUSH2 0x200 SWAP5 PUSH2 0x120 DUP9 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH2 0x140 DUP8 ADD MSTORE PUSH2 0x160 DUP7 ADD MSTORE PUSH2 0x180 DUP6 ADD MSTORE PUSH2 0x1A0 DUP5 ADD MSTORE DUP1 PUSH2 0x1C0 DUP5 ADD MSTORE DUP3 ADD MSTORE ADD PUSH0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3146 JUMPI JUMP JUMPDEST SWAP2 SWAP1 SWAP4 PUSH0 SWAP5 SWAP4 DUP6 SWAP5 PUSH2 0x3299 PUSH2 0x3A98 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP5 DUP5 SWAP2 DUP3 PUSH1 0x64 EQ PUSH2 0x3456 JUMPI DUP3 PUSH1 0x48 EQ PUSH2 0x33E5 JUMPI DUP3 PUSH1 0xE0 EQ PUSH2 0x33C3 JUMPI DUP3 PUSH2 0x100 EQ PUSH2 0x339F JUMPI DUP3 PUSH1 0x60 EQ PUSH2 0x3311 JUMPI POP POP PUSH2 0x160 EQ PUSH2 0x32F0 JUMPI POP PUSH4 0x9FD5A6CF PUSH1 0xE0 SHL DUP4 MSTORE DUP5 SWAP2 PUSH1 0x4 SWAP2 DUP2 SWAP1 DUP6 DUP5 ADD CALLDATACOPY ADD SWAP3 GAS CALL SWAP1 JUMP JUMPDEST PUSH4 0x2B67B57 PUSH1 0xE4 SHL DUP5 MSTORE PUSH2 0x164 SWAP5 POP DUP6 SWAP3 POP SWAP1 PUSH2 0x160 SWAP1 PUSH1 0x4 DUP6 ADD CALLDATACOPY GAS CALL SWAP1 JUMP JUMPDEST DUP9 SWAP6 POP PUSH1 0x40 SWAP3 POP SWAP1 PUSH2 0x164 SWAP8 PUSH1 0x20 SWAP5 SWAP6 SWAP3 PUSH4 0x2B67B57 PUSH1 0xE4 SHL DUP10 MSTORE PUSH1 0x4 DUP10 ADD MSTORE PUSH1 0x24 DUP9 ADD MSTORE PUSH1 0x14 DUP3 PUSH1 0x50 DUP10 ADD CALLDATACOPY DUP6 NOT PUSH6 0xFFFFFFFFFFFF SWAP2 DUP2 PUSH1 0x14 DUP6 ADD CALLDATALOAD PUSH1 0xE0 SHR ADD DUP4 AND PUSH1 0x64 DUP11 ADD MSTORE PUSH1 0x18 DUP5 ADD CALLDATALOAD PUSH1 0xE0 SHR PUSH1 0x84 DUP11 ADD MSTORE PUSH1 0xA4 DUP10 ADD MSTORE PUSH1 0x1C DUP4 ADD CALLDATALOAD PUSH1 0xE0 SHR ADD AND PUSH1 0xC4 DUP8 ADD MSTORE PUSH2 0x100 PUSH1 0xE4 DUP8 ADD MSTORE DUP2 PUSH2 0x104 DUP8 ADD MSTORE DUP3 DUP1 DUP3 ADD PUSH2 0x124 DUP9 ADD CALLDATACOPY ADD PUSH2 0x144 DUP6 ADD CALLDATACOPY GAS CALL SWAP1 JUMP JUMPDEST POP POP PUSH4 0x23F2EBC3 PUSH1 0xE2 SHL DUP6 MSTORE POP PUSH2 0x104 SWAP5 DUP7 SWAP4 POP SWAP2 PUSH2 0x100 SWAP2 POP PUSH1 0x4 DUP6 ADD CALLDATACOPY GAS CALL SWAP1 JUMP JUMPDEST POP POP PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP6 MSTORE POP PUSH1 0xE4 SWAP5 DUP7 SWAP4 POP SWAP2 PUSH1 0xE0 SWAP2 POP PUSH1 0x4 DUP6 ADD CALLDATACOPY GAS CALL SWAP1 JUMP JUMPDEST SWAP1 SWAP2 POP DUP8 SWAP5 POP PUSH2 0x104 SWAP7 SWAP4 SWAP3 POP PUSH4 0x23F2EBC3 PUSH1 0xE2 SHL DUP7 MSTORE PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x20 PUSH1 0x8 PUSH1 0x28 DUP4 ADD CALLDATALOAD SWAP3 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH1 0x44 DUP9 ADD MSTORE DUP6 NOT PUSH1 0x4 DUP3 ADD CALLDATALOAD PUSH1 0xE0 SHR ADD PUSH1 0x64 DUP9 ADD MSTORE PUSH1 0x1 PUSH1 0x84 DUP9 ADD MSTORE DUP4 PUSH1 0xFF SHR PUSH1 0x1B ADD PUSH1 0xA4 DUP9 ADD MSTORE ADD PUSH1 0xC4 DUP7 ADD CALLDATACOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB AND PUSH1 0xE4 DUP5 ADD MSTORE GAS CALL SWAP1 JUMP JUMPDEST SWAP1 SWAP2 POP DUP8 SWAP5 POP PUSH1 0xE4 SWAP7 SWAP4 SWAP3 POP PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x20 PUSH1 0x24 PUSH1 0x44 DUP4 ADD CALLDATALOAD SWAP3 DUP3 DUP2 PUSH1 0x44 DUP10 ADD CALLDATACOPY DUP6 NOT DUP4 DUP3 ADD CALLDATALOAD PUSH1 0xE0 SHR ADD PUSH1 0x64 DUP9 ADD MSTORE DUP4 PUSH1 0xFF SHR PUSH1 0x1B ADD PUSH1 0x84 DUP9 ADD MSTORE ADD PUSH1 0xA4 DUP7 ADD CALLDATACOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB AND PUSH1 0xC4 DUP5 ADD MSTORE GAS CALL SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x3 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x34CA JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0x351A JUMPI PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x3508 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x34FE DUP4 PUSH2 0x2C92 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH0 DUP1 SLOAD SWAP1 PUSH1 0x1 SWAP1 DUP3 PUSH1 0x1 SHR PUSH1 0x1 DUP5 AND SWAP3 DUP4 ISZERO PUSH2 0x35F3 JUMPI JUMPDEST PUSH1 0x20 SWAP5 DUP6 DUP4 LT DUP6 EQ PUSH2 0x35DF JUMPI DUP3 DUP8 MSTORE DUP7 SWAP5 SWAP1 DUP2 ISZERO PUSH2 0x35BF JUMPI POP PUSH1 0x1 EQ PUSH2 0x3564 JUMPI JUMPDEST POP POP PUSH2 0x321E SWAP3 POP SUB DUP3 PUSH2 0x2CAD JUMP JUMPDEST PUSH0 DUP1 DUP1 MSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 SWAP6 SWAP4 POP SWAP2 SWAP1 JUMPDEST DUP2 DUP4 LT PUSH2 0x35A7 JUMPI POP POP PUSH2 0x321E SWAP4 POP DUP3 ADD ADD PUSH0 DUP1 PUSH2 0x3556 JUMP JUMPDEST DUP6 SLOAD DUP8 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP7 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x358F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x321E SWAP5 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD PUSH0 DUP1 PUSH2 0x3556 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x3535 JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0x361F JUMPI PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x3508 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x34FE DUP4 PUSH2 0x2C92 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH0 PUSH1 0x1 DUP1 SLOAD SWAP2 DUP3 PUSH1 0x1 SHR PUSH1 0x1 DUP5 AND SWAP3 DUP4 ISZERO PUSH2 0x36C4 JUMPI JUMPDEST PUSH1 0x20 SWAP5 DUP6 DUP4 LT DUP6 EQ PUSH2 0x35DF JUMPI DUP3 DUP8 MSTORE DUP7 SWAP5 SWAP1 DUP2 ISZERO PUSH2 0x35BF JUMPI POP PUSH1 0x1 EQ PUSH2 0x3667 JUMPI POP POP PUSH2 0x321E SWAP3 POP SUB DUP3 PUSH2 0x2CAD JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x1 PUSH0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP4 PUSH0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x36AC JUMPI POP POP PUSH2 0x321E SWAP4 POP DUP3 ADD ADD PUSH0 DUP1 PUSH2 0x3556 JUMP JUMPDEST DUP6 SLOAD DUP8 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP7 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x3694 JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x3639 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x36DA JUMPI POP NOT SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF9 SHL AND ISZERO PUSH2 0x3765 JUMPI DUP1 ISZERO PUSH2 0x3756 JUMPI PUSH2 0x36FD DUP2 PUSH2 0x2DAD JUMP JUMPDEST SWAP1 PUSH2 0x370B PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x2CAD JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 CALLDATASIZE DUP3 DUP3 ADD GT PUSH2 0x231 JUMPI DUP2 PUSH0 SWAP3 PUSH1 0x20 SWAP3 DUP7 CALLDATACOPY DUP4 ADD ADD MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x4 CALLDATALOAD SWAP1 SWAP2 AND SUB PUSH2 0x3749 JUMPI JUMPDEST PUSH1 0x1 SWAP1 PUSH0 SWAP1 JUMP JUMPDEST PUSH0 SWAP1 PUSH4 0xDC11EE6B PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST POP PUSH0 SWAP2 PUSH4 0xB2D25E49 PUSH1 0xE0 SHL SWAP2 POP JUMP JUMPDEST SWAP1 POP ISZERO PUSH2 0x3742 JUMPI PUSH0 SWAP1 PUSH4 0x74896A7B PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0xF9 SHL AND ISZERO PUSH2 0x3794 JUMPI SWAP1 PUSH4 0xB2D25E49 PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 PUSH0 SWAP1 JUMP JUMPDEST SWAP4 SWAP1 PUSH2 0x37C6 SWAP1 PUSH2 0x321E SWAP10 SWAP8 SWAP5 SWAP9 SWAP7 SWAP4 PUSH2 0x1C0 PUSH2 0x37B7 DUP9 PUSH2 0x315A JUMP JUMPDEST DUP1 PUSH2 0x100 DUP10 ADD MSTORE DUP8 ADD SWAP2 PUSH2 0x3199 JUMP JUMPDEST PUSH2 0x120 DUP6 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD MSTORE PUSH2 0x180 DUP3 ADD MSTORE DUP1 DUP5 SUB PUSH2 0x1A0 SWAP1 SWAP2 ADD MSTORE PUSH2 0x3199 JUMP JUMPDEST SWAP4 SWAP2 SWAP1 SWAP3 PUSH2 0x3807 DUP5 DUP7 PUSH2 0x3C2F JUMP JUMPDEST SWAP1 SWAP3 DUP2 ISZERO PUSH2 0x3899 JUMPI PUSH2 0x3819 DUP3 DUP6 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP4 DUP3 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH1 0x20 SWAP7 PUSH1 0x14 SWAP5 PUSH2 0x3855 SWAP4 PUSH1 0x40 MLOAD SWAP11 DUP12 SWAP10 DUP11 SWAP9 DUP10 SWAP9 PUSH4 0x1D9671C3 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x13 NOT ADD SWAP7 ADD SWAP5 CALLER SWAP3 PUSH1 0x4 DUP11 ADD PUSH2 0x379C JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA33 JUMPI PUSH0 SWAP2 PUSH2 0x386A JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x3891 JUMPI JUMPDEST DUP2 PUSH2 0x3885 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2CAD JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x231 JUMPI MLOAD SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x3878 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x321E SWAP2 POP PUSH1 0xC4 CALLDATALOAD PUSH1 0xA4 CALLDATALOAD PUSH2 0x3CB3 JUMP JUMPDEST SWAP4 SWAP2 SWAP1 SWAP3 PUSH2 0x38BD DUP5 DUP7 PUSH2 0x3C62 JUMP JUMPDEST SWAP1 SWAP3 DUP2 ISZERO PUSH2 0x390B JUMPI PUSH2 0x38CF DUP3 DUP6 PUSH2 0x2BDF JUMP JUMPDEST PUSH1 0x60 SHR SWAP4 DUP3 PUSH1 0x14 GT PUSH2 0x231 JUMPI PUSH1 0x20 SWAP7 PUSH1 0x14 SWAP5 PUSH2 0x3855 SWAP4 PUSH1 0x40 MLOAD SWAP11 DUP12 SWAP10 DUP11 SWAP9 DUP10 SWAP9 PUSH4 0x1AFFF15 PUSH1 0xE7 SHL DUP11 MSTORE PUSH1 0x13 NOT ADD SWAP7 ADD SWAP5 CALLER SWAP3 PUSH1 0x4 DUP11 ADD PUSH2 0x379C JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x321E SWAP2 POP PUSH1 0xC4 CALLDATALOAD PUSH1 0xA4 CALLDATALOAD PUSH2 0x3CDA JUMP JUMPDEST SWAP1 PUSH0 PUSH1 0x64 SWAP3 PUSH1 0x20 SWAP6 DUP3 SWAP6 PUSH1 0x40 MLOAD SWAP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD MSTORE GAS CALL PUSH1 0x1 PUSH0 MLOAD EQ PUSH1 0x1F RETURNDATASIZE GT AND RETURNDATASIZE ISZERO OR AND SWAP1 JUMP JUMPDEST SWAP3 SWAP5 DUP1 PUSH0 SWAP6 DUP2 PUSH1 0x20 SWAP9 DUP9 SWAP6 SWAP7 PUSH1 0x40 MLOAD SWAP8 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x4 DUP10 ADD MSTORE PUSH1 0x24 DUP9 ADD MSTORE PUSH1 0x44 DUP8 ADD MSTORE PUSH2 0x39A2 JUMPI JUMPDEST POP POP PUSH1 0x64 ADD SWAP3 GAS CALL PUSH1 0x1 PUSH0 MLOAD EQ PUSH1 0x1F RETURNDATASIZE GT AND RETURNDATASIZE ISZERO OR AND SWAP1 JUMP JUMPDEST PUSH1 0x64 DUP6 ADD CALLDATACOPY DUP1 PUSH0 PUSH2 0x3989 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 GT PUSH2 0x3A23 JUMPI PUSH0 SWAP3 DUP4 SWAP3 PUSH1 0x84 SWAP3 PUSH2 0x39D0 PUSH2 0x3A98 JUMP JUMPDEST SWAP7 PUSH1 0x40 MLOAD SWAP4 PUSH4 0x1B63C28B PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD MSTORE DUP3 DUP6 GAS CALL SWAP1 DUP2 PUSH2 0x3A18 JUMPI JUMPDEST POP ISZERO PUSH2 0x3A06 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF4059071 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 POP EXTCODESIZE ISZERO ISZERO PUSH0 PUSH2 0x39FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8112E119 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0x24 DUP2 DUP1 DUP1 SWAP5 SWAP7 SWAP6 SWAP7 PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP3 MSTORE DUP8 PUSH1 0x4 MSTORE GAS CALL ISZERO PUSH2 0xA33 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x3A68 JUMPI POP POP JUMP JUMPDEST PUSH0 DUP1 DUP1 SWAP4 DUP2 SWAP4 GAS CALL ISZERO PUSH2 0xA33 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x44 CALLDATALOAD DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x3A8F JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x24 CALLDATALOAD AND SWAP1 JUMP JUMPDEST CHAINID DUP1 PUSH2 0x144 EQ PUSH2 0x3AD9 JUMPI DUP1 PUSH2 0x12C EQ PUSH2 0x3AD9 JUMPI PUSH2 0x104 EQ PUSH2 0x3AC6 JUMPI PUSH15 0x22D473030F116DDEE9F6B43AC78BA3 SWAP1 JUMP JUMPDEST PUSH15 0x225E31D15943971F47AD3022F714FA SWAP1 JUMP JUMPDEST POP PUSH15 0x225E31D15943971F47AD3022F714FA SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP4 PUSH1 0x60 SHR AND SWAP3 PUSH1 0x80 SHR AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH4 0x9605A01 PUSH1 0xE4 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST POP PUSH0 SWAP2 POP DUP2 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP4 PUSH1 0xA0 SHR AND SWAP3 PUSH1 0xC0 SHR AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF SWAP2 DUP1 PUSH1 0x20 SHL DUP4 AND SWAP3 AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP4 AND SWAP3 PUSH1 0x20 SHR AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 PUSH1 0xC0 SHR AND SWAP2 PUSH1 0xE0 SHR SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP4 PUSH1 0x80 SHR AND SWAP3 PUSH1 0xA0 SHR AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP4 PUSH1 0x20 SHR AND SWAP3 PUSH1 0x40 SHR AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x20 DUP4 LT PUSH2 0x3B2F JUMPI DUP1 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP4 PUSH1 0x40 SHR AND SWAP3 PUSH1 0x60 SHR AND SWAP4 PUSH1 0x1F NOT ADD DUP5 GT PUSH2 0x3B20 JUMPI DUP2 ADD PUSH1 0x20 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x3C9F JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP4 OR PUSH1 0x80 SHR ISZERO PUSH2 0x3CD0 JUMPI PUSH2 0x3CCB SWAP1 PUSH2 0x321E SWAP4 PUSH2 0x3133 JUMP JUMPDEST PUSH2 0x3C95 JUMP JUMPDEST PUSH2 0x321E SWAP3 MUL PUSH2 0x3C95 JUMP JUMPDEST SWAP2 DUP2 DUP2 OR PUSH1 0x80 SHR ISZERO PUSH2 0x3D0F JUMPI SWAP1 PUSH2 0x3CF0 SWAP2 PUSH2 0x3133 JUMP JUMPDEST SWAP1 DUP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x3146 JUMPI PUSH0 NOT DUP3 ADD SWAP2 DUP3 GT PUSH2 0x3146 JUMPI PUSH2 0x321E SWAP2 PUSH2 0x3C95 JUMP JUMPDEST PUSH2 0x321E SWAP3 SWAP2 MUL DUP2 ADD PUSH0 NOT ADD PUSH2 0x3C95 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 LOG4 ISZERO SSTORE 0xD3 RETURNDATASIZE PUSH2 0x555D 0xBB PUSH19 0x948BAB109E1F9C9869C36C32FB22B832F50D35 DUP4 0xAB PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "1055:788:22:-:0;;;;;;;;;;-1:-1:-1;1055:788:22;;;;;;;;;1003:5:27;-1:-1:-1;;;;;1055:788:22;989:10:27;:19;985:52;;1055:788:22;985:52:27;1055:788:22;;-1:-1:-1;;;1017:20:27;;1055:788:22;;1017:20:27;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1094:458:33;1055:788:22;1094:458:33;;;1055:788:22;;;;;;;;;;;;;;;;;;;;2065:339:28;1055:788:22;2065:339:28;;;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2602:34:29;1055:788:22;2602:34:29;;;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1055:788:22;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1055:788:22;;;;;;-1:-1:-1;;;;;1055:788:22;;;776:3:39;1055:788:22;;;;;;;;;739:41:39;1055:788:22;;731:7:39;1055:788:22;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1055:788:22;;;;;;;-1:-1:-1;1055:788:22;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;5550:29:29;1055:788:22;;;;;;:::i;:::-;;;;5550:29:29;:::i;:::-;6136:20;;6125:32;6136:20;;:::i;:::-;6125:32;:::i;:::-;6199:45;;;;:::i;:::-;6283:18;1055:788:22;;6283:18:29;1055:788:22;6258:43:29;;6254:984;;1055:788:22;1308:72:32;;;:::i;:::-;10856:33:29;;;;:::i;:::-;10907:6;;10903:233;;1055:788:22;;;11160:17:29;1055:788:22;3378:54:23;3450:18;;:77;;;;;1055:788:22;11159:46:29;;;11155:73;;1758:3:23;1055:788:22;11160:17:29;1055:788:22;1634:2:23;1055:788:22;3826:74:23;4253:15;;;:47;;;;1055:788:22;11238:56:29;;;11160:17;1055:788:22;-1:-1:-1;;;7939:64:23;11304:307:29;;1055:788:22;11677:20:29;;11673:230;;1055:788:22;;;-1:-1:-1;;;3681:52:44;3680:59;1055:788:22;;;;;3462:5:24;1055:788:22;;;3065:5:24;1055:788:22;3059:42:24;;12093:86:29;;;;;;;;:::i;:::-;1946:66:44;1055:788:22;;-1:-1:-1;;;;;5293:46:44;;12251:428:29;;11962:1820;;;11160:17;1055:788:22;-1:-1:-1;;;5525:56:23;5524:63;13795:38:29;;:76;;11962:1820;13791:112;;1055:788:22;;;13929:32:29;13925:65;;14060:37;11160:17;1055:788:22;14060:37:29;:::i;:::-;11160:17;;;14129:11;1055:788:22;-1:-1:-1;;;;;618:37:0;1055:788:22;;;;;14129:11:29;1055:788:22;;;;;;;11160:17:29;1055:788:22;;;;;;;;;;;;;;;;;;;1758:3:23;1055:788:22;;;;;1911:12:2;1055:788:22;1996:28:2;;;:46;1992:80;;1055:788:22;11160:17:29;1055:788:22;;;;;;14129:11:29;1055:788:22;;;11160:17:29;1055:788:22;1758:3:23;1055:788:22;1911:12:2;1055:788:22;2111:28:2;1055:788:22;;;;14056:308:29;11160:17;1055:788:22;-1:-1:-1;;;5925:60:23;14446:501:29;;14056:308;15015:16;1055:788:22;-1:-1:-1;;;;;618:37:0;;;15049:5:29;1055:788:22;;;15015:40:29;;:68;;14056:308;15116:35;;;;15137:4;15116:35;2398:8:23;11160:17:29;1055:788:22;-1:-1:-1;;;8304:51:23;:56;1055:788:22;;939:46:8;;;;;:::i;:::-;15223:39:29;;15219:76;;15397:12;;1055:788:22;;-1:-1:-1;;;;;15368:11:29;1055:788:22;618:37:0;;;15015:16:29;1055:788:22;618:37:0;15397:12:29;:::i;:::-;15765:91;;15165:587;15880:23;15901:2;15880:23;;15876:336;;15165:587;-1:-1:-1;;;;;;;16252:16:29;1055:788:22;618:37:0;;;15049:5:29;1055:788:22;16252:40:29;;;;:57;;15165:587;16248:1878;;;16329:9;;;;:24;16325:61;;16329:9;;16404:24;16400:324;;16248:1878;11160:17;1055:788:22;-1:-1:-1;;;8672:51:23;:56;1055:788:22;;16878:19:29;;;;;;;:::i;:::-;:49;;;;:::i;:::-;;16949:8;16945:47;;16738:410;;;11160:17;1055:788:22;-1:-1:-1;;;2337:50:44;18208:505:29;;16248:1878;18751:36;;;1055:788:22;18751:36:29;1055:788:22;18751:36:29;;18728:60;18751:36;;:::i;:::-;1055:788:22;;;;;;;;;;18728:60:29;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;18208:505:29;3845:49:8;;;;;;;;;:::i;:::-;18271:62:29;;;18366:11;1055:788:22;-1:-1:-1;;;;;618:37:0;18271:62:29;;15901:2;18401:16;;18397:122;;18208:505;-1:-1:-1;;;;;;;1055:788:22;;18532:170:29;;;;;1055:788:22;;;;18532:170:29;1055:788:22;;;;;;;;;;;;;;;;;;;18532:170:29;;11194:10;18532:170;1055:788:22;18532:170:29;;;:::i;:::-;;;;;;;;;;;;;;;;18208:505;;;;18532:170;;;;;;;;:::i;:::-;1055:788:22;;18532:170:29;;;;;;1055:788:22;;;18532:170:29;1055:788:22;;;;;;;;;18532:170:29;1055:788:22;;;18397:122:29;18456:13;;;;;;;;;;:::i;:::-;15015:16;1055:788:22;;;18500:2:29;1055:788:22;;;18500:2:29;1055:788:22;;-1:-1:-1;;1055:788:22;;18397:122:29;;;;16945:47;1055:788:22;;-1:-1:-1;;;16966:26:29;;1055:788:22;;16966:26:29;16738:410;-1:-1:-1;;;24203:330:38;;;;1055:788:22;24203:330:38;15049:5:29;;24203:330:38;;;;;23199:604;17099:19:29;23199:604:38;17099:19:29;;:::i;:::-;1055:788:22;23199:604:38;-1:-1:-1;;;23199:604:38;;1055:788:22;23199:604:38;;;;;;;;;;;;1055:788:22;15049:5:29;-1:-1:-1;;;;;1055:788:22;23199:604:38;;;;;16738:410:29;7789:54:38;7785:112;;16738:410:29;;;;7785:112:38;1055:788:22;;-1:-1:-1;;;7866:20:38;;1055:788:22;;7866:20:38;23199:604;-1:-1:-1;23199:604:38;;;;1055:788:22;23199:604:38;;;;;;;;;;15049:5:29;-1:-1:-1;;;;;1055:788:22;23199:604:38;;;;;24203:330;;1055:788:22;24203:330:38;;;;;;;;;16400:324:29;16329:9;;;;;;1055:788:22;11194:10:29;16570:52;;;;:::i;:::-;;16400:324;16644:47;1055:788:22;;-1:-1:-1;;;16665:26:29;;1055:788:22;;16665:26:29;16325:61;1055:788:22;;-1:-1:-1;;;16362:24:29;;1055:788:22;;16362:24:29;16248:1878;17182:9;;;;17178:51;;17262:74;;;16248:1878;17369:48;;;;17390:4;17369:48;1055:788:22;;-1:-1:-1;;;5925:60:23;5924:67;1055:788:22;;1357:46:8;;;;:::i;:::-;17483:39:29;;17479:76;;11194:10;17650:12;11194:10;;;;17650:12;;:::i;:::-;18012:104;16248:1878;18012:104;18081:19;;;:::i;:::-;15049:5;;18081:19;:::i;:::-;16248:1878;;17479:76;1055:788:22;;-1:-1:-1;;;17531:24:29;;1055:788:22;;17531:24:29;17431:567;17707:235;1357:46:8;;;;;;;:::i;:::-;11194:10:29;;;;17707:235;;:::i;:::-;17706:236;17702:281;;17431:567;;;;17702:281;1055:788:22;;-1:-1:-1;;;17951:32:29;;1055:788:22;;17951:32:29;17369:48;17398:19;;:::i;:::-;17369:48;;17262:74;-1:-1:-1;11160:17:29;1055:788:22;-1:-1:-1;;;8672:51:23;:56;;17262:74:29;;16252:57;16296:9;;:13;;16252:57;;15876:336;16022:20;;;;:::i;:::-;15015:16;1055:788:22;;;16183:2:29;1055:788:22;;;15996:205:29;;;;;1055:788:22;;16183:2:29;1055:788:22;;;15996:205:29;1055:788:22;;;;;;;;;;;;;;;;;;;;15996:205:29;;1055:788:22;;;;;11194:10:29;;15996:205;1055:788:22;15996:205:29;;;:::i;:::-;;;;;;;;;;;;;15876:336;15996:205;;;;:::i;:::-;1055:788:22;;15996:205:29;;15876:336;;1055:788:22;;;;15996:205:29;1055:788:22;;;;;;;;;15996:205:29;1055:788:22;;;15765:91:29;15834:6;15049:5;;;15834:6;:::i;:::-;15765:91;;;15165:587;15454:242;939:46:8;;;;;:::i;:::-;1055:788:22;;;-1:-1:-1;;;;;15547:11:29;1055:788:22;618:37:0;;;15015:16:29;1055:788:22;618:37:0;15454:242:29;:::i;:::-;15165:587;15449:288;;1055:788:22;;-1:-1:-1;;;15705:32:29;;1055:788:22;;15705:32:29;15116:35;;;;15015:68;-1:-1:-1;1055:788:22;;-1:-1:-1;;;6886:60:23;6885:67;;15015:68:29;;14446:501;3413:48:8;;;;:::i;:::-;-1:-1:-1;;;;;14602:11:29;1055:788:22;618:37:0;;14508:61:29;;14651:2;14637:16;;14633:122;;14446:501;1055:788:22;;;;;14768:168:29;;;;1055:788:22;;;;;;14768:168:29;1055:788:22;;;;;;;;;;;;;;;;;;;;;14768:168:29;;11194:10;14768:168;1055:788:22;14768:168:29;;;:::i;:::-;;1055:788:22;;14768:168:29;;;;;;;;14446:501;;;;14768:168;;;;;;:::i;:::-;1055:788:22;14768:168:29;;;;;1055:788:22;;;;;;;;;14633:122:29;14692:13;;;;;;;;;;:::i;:::-;1055:788:22;;;;14736:2:29;1055:788:22;;;14736:2:29;1055:788:22;;-1:-1:-1;;1055:788:22;;14633:122:29;;;;1992:80:2;1055:788:22;;-1:-1:-1;;;2051:21:2;;1055:788:22;;2051:21:2;14056:308:29;1055:788:22;;;;;14253:11:29;1055:788:22;618:37:0;1055:788:22;;14231:21:29;14253:11;1055:788:22;;;;;;;14253:11:29;1055:788:22;;;;2734:39:35;1055:788:22;;;;14056:308:29;;13925:65;1055:788:22;;-1:-1:-1;;;13970:20:29;;1055:788:22;;13970:20:29;13791:112;1055:788:22;;-1:-1:-1;;;13880:23:29;;1055:788:22;;13880:23:29;13795:76;1055:788:22;6283:18:29;1055:788:22;13837:34:29;;;13795:76;;12251:428;1055:788:22;;12373:22:29;;;;12463:24;;12459:58;;12369:296;12251:428;;;12459:58;1055:788:22;;-1:-1:-1;;;12496:21:29;;1055:788:22;;12496:21:29;12369:296;12592:24;1055:788:22;12568:21:29;1055:788:22;;;12568:21:29;:::i;:::-;12592:24;;:::i;:::-;-1:-1:-1;12564:82:29;12369:296;12564:82;1055:788:22;;-1:-1:-1;;;12625:21:29;;1055:788:22;;12625:21:29;11962:1820;1055:788:22;;;;12767:86:29;1055:788:22;;;12767:86:29;;;:::i;:::-;12871:36;;;;12867:409;;11962:1820;1055:788:22;;-1:-1:-1;;;;;5293:46:44;;13347:425:29;;11962:1820;;;;13347:425;1055:788:22;;13469:22:29;;;;13558:24;;13554:57;;13465:293;13347:425;;;13554:57;1055:788:22;;-1:-1:-1;;;13591:20:29;;1055:788:22;;13591:20:29;13465:293;13686:24;1055:788:22;13662:21:29;1055:788:22;;13662:21:29;;:::i;13686:24::-;-1:-1:-1;13658:81:29;13465:293;13658:81;1055:788:22;;-1:-1:-1;;;13719:20:29;;1055:788:22;;13719:20:29;12867:409;13032:36;;;;;13101:86;;;;;;;;:::i;:::-;1055:788:22;;;13209:21:29;;13205:56;12867:409;13205:56;;1055:788:22;;-1:-1:-1;;;13239:22:29;;1055:788:22;;13239:22:29;11673:230;2591:39:8;;;;:::i;:::-;11779:20:29;11775:118;;11673:230;;;;;11775:118;4518:44;4545:4;;4518:44;:::i;:::-;4579:19;;;11775:118;11823:26;;11819:59;;11775:118;;;;11819:59;1055:788:22;;-1:-1:-1;;;11858:20:29;;1055:788:22;;11858:20:29;4579:19;4597:1;4590:8;;;4579:19;;;11304:307;11369:37;11160:17;1055:788:22;11369:37:29;:::i;:::-;11365:97;;11160:17;1055:788:22;6283:18:29;1055:788:22;;;4976:66:23;;1055:788:22;;11493:11:29;1055:788:22;-1:-1:-1;;;;;618:37:0;1651:41:39;-1:-1:-1;1055:788:22;;;1643:7:39;1055:788:22;;;;;;1758:3:23;1055:788:22;;;;4629:82:23;;;1643:64:39;11476:124:29;;11304:307;;;11476:124;1055:788:22;;-1:-1:-1;;;11582:18:29;;1055:788:22;;11582:18:29;11365:97;1055:788:22;;-1:-1:-1;;;11415:47:29;;1055:788:22;;11415:47:29;11238:56;1055:788:22;;-1:-1:-1;;;11280:14:29;;1055:788:22;;11280:14:29;4253:47:23;4285:15;;;-1:-1:-1;4253:47:23;;;11155:73:29;1055:788:22;;-1:-1:-1;;;11214:14:29;;1055:788:22;;11214:14:29;3450:77:23;11194:10:29;3489:38:23;3472:55;;-1:-1:-1;3450:77:23;;;;10903:233:29;1055:788:22;10997:125:29;1055:788:22;;10997:125:29;6254:984;-1:-1:-1;;;;;6333:11:29;1055:788:22;618:37:0;;;6368:19:29;;;1055:788:22;6368:63:29;;;;6254:984;6364:90;;;;1055:788:22;;-1:-1:-1;;;4457:57:44;6254:984:29;6468:760;2991:41:8;;;;:::i;:::-;6596:24:29;6618:2;6596:24;;;6592:622;;6468:760;;;6254:984;;6592:622;6775:20;;;;:::i;:::-;1055:788:22;;;6618:2:29;1055:788:22;;;6618:2:29;6760:87;1055:788:22;;;;;;6823:4:29;;;6760:87;;:::i;:::-;;6874:37;:17;1055:788:22;6874:37:29;:::i;:::-;6873:38;6869:327;;6592:622;;;;;6869:327;1055:788:22;;3007:24:8;6333:11:29;1055:788:22;;;;;;;6333:11:29;1055:788:22;;;;;7075:98:29;;6869:327;;;7075:98;1055:788:22;;-1:-1:-1;;;7153:20:29;;1055:788:22;;7153:20:29;6364:90;1055:788:22;;-1:-1:-1;;;6440:14:29;;1055:788:22;;6440:14:29;6368:63;6400:31;;-1:-1:-1;1055:788:22;;-1:-1:-1;;;;;3047:536:4;;-1:-1:-1;;;;;3047:536:4;;;;6368:63:29;1055:788:22;;;6391:40:29;;;6368:63;;;;3047:536:4;6333:11:29;3047:536:4;;1055:788:22;3047:536:4;;;1055:788:22;3047:536:4;;;;;;;;;;;;;1055:788:22;;;3047:536:4;;;;;;;;;;1055:788:22;3047:536:4;;;1055:788:22;3047:536:4;;;;;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;;;:::i;:::-;1493:62:30;;:::i;:::-;-1:-1:-1;;;;;1055:788:22;;;;2620:22:30;;2616:91;;2997:6;1055:788:22;;-1:-1:-1;;;;;1055:788:22;;;;;2997:6:30;1055:788:22;;3045:40:30;1055:788:22;3045:40:30;;1055:788:22;2616:91:30;1055:788:22;;-1:-1:-1;;;2665:31:30;;1055:788:22;;2665:31:30;;1055:788:22;;;2665:31:30;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1055:788:22;;;1688:3:39;1055:788:22;1651:41:39;-1:-1:-1;1055:788:22;;;1643:7:39;1055:788:22;;;;;;;;1643:64:39;;1528:186;1055:788:22;;;;;;;;;;;;;;-1:-1:-1;;1055:788:22;;;;;;;-1:-1:-1;1055:788:22;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;;:::i;:::-;;;;;;;;8909:32:29;8920:20;;:::i;8909:32::-;8983:45;;;;:::i;:::-;1055:788:22;9067:18:29;1055:788:22;9042:43:29;;;;9038:165;;1055:788:22;1308:72:32;;;;:::i;:::-;10856:33:29;;:::i;:::-;10907:6;;10903:233;;1055:788:22;11160:17:29;1055:788:22;;;3378:54:23;;;3450:18;;:77;;;;;1055:788:22;11159:46:29;;;11155:73;;1758:3:23;1055:788:22;;1634:2:23;1055:788:22;3826:74:23;4253:15;;;:47;;;;1055:788:22;11238:56:29;;;-1:-1:-1;;;7939:64:23;;11304:307:29;;1055:788:22;-1:-1:-1;;;;2001:8:23;3681:52:44;;;3680:59;2001:8:23;;3462:5:24;;;3065;;;1055:788:22;3059:42:24;;1055:788:22;5440:98:28;1055:788:22;5496:18:28;1055:788:22;5440:98:28;;:::i;:::-;1946:66:44;-1:-1:-1;;;;;5293:46:44;;;;12251:428:29;;11962:1820;;;;5525:56:23;;5524:63;13795:38:29;:76;;;;11962:1820;13791:112;;;1055:788:22;;;13929:32:29;13925:65;;14060:37;;;:::i;:::-;:17;;;1055:788:22;;;;;14129:11:29;1055:788:22;618:37:0;1055:788:22;;;14129:11:29;1055:788:22;;;;;;;;;;;;1758:3:23;1055:788:22;1911:12:2;1055:788:22;;;;;;14129:11:29;1055:788:22;;;;;1996:28:2;;;;;:46;1992:80;;1055:788:22;;14129:11:29;1055:788:22;2111:28:2;1055:788:22;;;;14056:308:29;-1:-1:-1;;;2137:8:23;5925:60;;;14446:501:29;;14056:308;-1:-1:-1;;;;;1055:788:22;15049:5:29;1055:788:22;;;;15049:5:29;;15015:16;1055:788:22;618:37:0;;15015:40:29;;;;:68;;14056:308;15116:35;;;;15137:4;15116:35;-1:-1:-1;;;8304:51:23;;:56;1055:788:22;;939:46:8;;;;:::i;:::-;15223:39:29;;15219:76;;1055:788:22;15397:12:29;1055:788:22;;;;15368:11:29;1055:788:22;618:37:0;15397:12:29;;:::i;:::-;15765:91;;15165:587;15876:336;;1055:788:22;;;;;;16252:16:29;1055:788:22;618:37:0;16252:40:29;;;:57;;;;;;15165:587;16248:1878;;;16329:24;;;;;;16325:61;;2457:8:23;;-1:-1:-1;;;8672:51:23;;:56;1055:788:22;;16878:19:29;1055:788:22;16878:19:29;;;;;;;;:::i;:::-;:49;;;;:::i;:::-;;16949:8;16945:47;;16738:410;;;-1:-1:-1;;;2337:50:44;18208:505:29;;16248:1878;18751:36;1055:788:22;18751:36:29;18728:60;18751:36;1055:788:22;18751:36:29;;:::i;18208:505::-;1055:788:22;;18366:11:29;1055:788:22;618:37:0;18532:170:29;;;;;;1055:788:22;;;;;;;;18532:170:29;;7798:10;;;18532:170;7798:10;;;;18532:170;1055:788:22;18532:170:29;;;:::i;:::-;;;;;;;;;;18751:36;18532:170;1055:788:22;18532:170:29;1055:788:22;18532:170:29;18728:60;18532:170;;;18208:505;;;;;;;;;18532:170;;;;:::i;:::-;;;;16738:410;1055:788:22;;24171:22:38;;;;;;;24203:330;;;;;;;23199:604;1055:788:22;23199:604:38;17099:19:29;;:::i;:::-;1055:788:22;23199:604:38;1055:788:22;;;;23199:604:38;;1055:788:22;23199:604:38;;;;;;;;;;;;;;;;16738:410:29;7789:54:38;;7785:112;;16738:410:29;;;;23199:604:38;;-1:-1:-1;23199:604:38;;;;;1055:788:22;;23199:604:38;;;;;;;;;;;;;;;;16248:1878:29;17262:74;;;;;;;;;;;;16248:1878;17369:48;;;;17390:4;17369:48;;5925:60:23;5924:67;2137:8;;7798:10:29;17650:12;7798:10;;;17650:12;;:::i;:::-;18012:104;;17431:567;16248:1878;;;18012:104;18081:19;;;;;:::i;:::-;;;:::i;:::-;18012:104;;;17431:567;17707:235;7798:10;;;;17707:235;;:::i;:::-;17706:236;17702:281;;17431:567;;;;17369:48;17398:19;;:::i;:::-;17369:48;;;17262:74;-1:-1:-1;;;8672:51:23;;:56;;;-1:-1:-1;17262:74:29;;16252:57;;1055:788:22;16252:57:29;;15765:91;15834:6;7798:10;15834:6;;;:::i;:::-;15765:91;;15165:587;15454:242;939:46:8;;;;;;;:::i;:::-;1055:788:22;;;;15547:11:29;1055:788:22;618:37:0;15454:242:29;;:::i;:::-;15453:243;15449:288;;15165:587;;;;15116:35;7798:10;15116:35;;15015:68;-1:-1:-1;;;;6886:60:23;;6885:67;;15015:68:29;;14446:501;14602:11;1055:788:22;-1:-1:-1;;;;;618:37:0;14768:168:29;;;;;1055:788:22;;;;;;;14768:168:29;1055:788:22;;;;;;;;;;;;14768:168:29;;7798:10;14768:168;1055:788:22;14768:168:29;;;:::i;:::-;;;;;;;;;;;14446:501;;;;14768:168;;;;;:::i;:::-;1055:788:22;14768:168:29;;;14056:308;1055:788:22;;;;;14253:11:29;1055:788:22;618:37:0;1055:788:22;;14231:21:29;14253:11;1055:788:22;;;;;;;14253:11:29;1055:788:22;;;;2734:39:35;1055:788:22;;;;14056:308:29;;13795:76;13837:34;;;;;13795:76;;;12251:428;12373:22;;;;;;12463:24;;;;12459:58;;12369:296;12251:428;;;;12369:296;12568:21;12592:24;12568:21;;;:::i;12592:24::-;-1:-1:-1;12564:82:29;12369:296;12564:82;1055:788:22;;-1:-1:-1;;;12625:21:29;;1055:788:22;;12625:21:29;11962:1820;4059:18:28;1055:788:22;;12717:21:29;4003:98:28;12717:21:29;1055:788:22;4003:98:28;;:::i;:::-;12871:36:29;;;;12867:409;;11962:1820;-1:-1:-1;;;;;;5293:46:44;;;;13347:425:29;;11962:1820;;;;;13347:425;13469:22;;;;;;13558:24;;;;13554:57;;13465:293;13347:425;;;;13465:293;13662:21;13686:24;13662:21;;;:::i;13686:24::-;-1:-1:-1;13658:81:29;13465:293;13658:81;1055:788:22;;-1:-1:-1;;;13719:20:29;;1055:788:22;;13719:20:29;12867:409;13032:36;;;;5440:98:28;13032:36:29;;5440:98:28;;;:::i;:::-;13209:21:29;;;;13205:56;;12867:409;;;11304:307;11369:37;;;:::i;:::-;11365:97;;9067:18;1055:788:22;;;4976:66:23;;1055:788:22;;11493:11:29;1055:788:22;-1:-1:-1;;;;;618:37:0;1651:41:39;-1:-1:-1;1055:788:22;;;1643:7:39;1055:788:22;;;;;;1758:3:23;1055:788:22;;;4629:82:23;;;1643:64:39;11476:124:29;;11304:307;;;4253:47:23;4285:15;;;-1:-1:-1;4253:47:23;;;3450:77;7798:10:29;3489:38:23;3472:55;;-1:-1:-1;3450:77:23;;;;9038:165:29;9129:11;1055:788:22;10417:12:4;10762:544;1055:788:22;10762:544:4;10718:34;;;;;10762:544;;;;;1055:788:22;10762:544:4;;;1055:788:22;9129:11:29;10762:544:4;;;;;;;;;;;;;;;9129:11:29;1055:788:22;-1:-1:-1;;;;;618:37:0;10762:544:4;;;;9038:165:29;9105:64;;9101:91;;9038:165;;;;10762:544:4;1055:788:22;10762:544:4;;;9129:11:29;10762:544:4;;;-1:-1:-1;10762:544:4;;;1055:788:22;;;;;2501:39:34;1055:788:22;;;:::i;:::-;2528:4:34;;;;;2501:39;:::i;:::-;2557:22;;;;;;1055:788:22;;;;;;;;;;;2557:22:34;2568:11;;-1:-1:-1;2557:22:34;;;;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;;;:::i;:::-;-1:-1:-1;;;;;1055:788:22;;;1196:3:39;1055:788:22;;1162:10:39;1154:46;1055:788:22;;1233:7:39;1055:788:22;;;;;910:1:39;1055:788:22;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;1310:44:39;1055:788:22;1162:10:39;1310:44;;1055:788:22;;;;;;;-1:-1:-1;;1055:788:22;;;;-1:-1:-1;;;;;1055:788:22;;:::i;:::-;;;;2277:21:29;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;-1:-1:-1;;1055:788:22;;;;;;-1:-1:-1;;;;;1055:788:22;;;;1649:39:34;1055:788:22;;;;;;;;:::i;:::-;1676:4:34;;1649:39;:::i;:::-;1705:19;;;1055:788:22;;;;;;;;;;1705:19:34;1716:8;;;1705:19;;;1055:788:22;;;;3273:32:34;1055:788:22;;;:::i;:::-;3273:32:34;;:::i;:::-;3319:8;;3315:48;;1055:788:22;;;;;;;;3315:48:34;1055:788:22;;-1:-1:-1;;;3336:27:34;;1055:788:22;;3336:27:34;1055:788:22;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;2560:25:29;;;;;;:::i;:::-;1055:788:22;;;-1:-1:-1;;;2602:34:29;;1055:788:22;;;;2602:34:29;;1055:788:22;;;;;;;;;;;;;;:::i;:::-;2602:34:29;;;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1055:788:22;;;;;;;-1:-1:-1;1055:788:22;;;;;;;;;6125:32:29;6136:20;;:::i;6125:32::-;6199:45;;;;:::i;:::-;1055:788:22;6283:18:29;1055:788:22;6258:43:29;;;;6254:984;;1055:788:22;1308:72:32;;;:::i;:::-;10856:33:29;;:::i;:::-;10907:6;;10903:233;;1055:788:22;11160:17:29;1055:788:22;;;3378:54:23;;;3450:18;;:77;;;;;1055:788:22;11159:46:29;;;11155:73;;1758:3:23;1055:788:22;;1634:2:23;1055:788:22;3826:74:23;4253:15;;;:47;;;;1055:788:22;11238:56:29;;;-1:-1:-1;;;7939:64:23;;11304:307:29;;1055:788:22;-1:-1:-1;;;;2001:8:23;3681:52:44;;;3680:59;2001:8:23;;3462:5:24;;;3065;;;1055:788:22;3059:42:24;;1055:788:22;5440:98:28;1055:788:22;5496:18:28;1055:788:22;5440:98:28;;:::i;:::-;1946:66:44;-1:-1:-1;;;;;5293:46:44;;;;12251:428:29;;11962:1820;;;;5525:56:23;;5524:63;13795:38:29;:76;;;;11962:1820;13791:112;;;1055:788:22;;;13929:32:29;13925:65;;14060:37;;;:::i;:::-;:17;;;1055:788:22;;;;;14129:11:29;1055:788:22;618:37:0;1055:788:22;;;14129:11:29;1055:788:22;;;;;;;;;;;;1758:3:23;1055:788:22;1911:12:2;1055:788:22;;;;;;14129:11:29;1055:788:22;;;;;1996:28:2;;;;;:46;1992:80;;1055:788:22;;14129:11:29;1055:788:22;2111:28:2;1055:788:22;;;;14056:308:29;-1:-1:-1;;;2137:8:23;5925:60;;;14446:501:29;;14056:308;-1:-1:-1;;;;;1055:788:22;15049:5:29;1055:788:22;;;;15049:5:29;;15015:16;1055:788:22;618:37:0;;15015:40:29;;;;:68;;14056:308;15116:35;;;;15137:4;15116:35;-1:-1:-1;;;8304:51:23;;:56;1055:788:22;;939:46:8;;;;:::i;:::-;15223:39:29;;15219:76;;1055:788:22;15397:12:29;1055:788:22;;;;15368:11:29;1055:788:22;618:37:0;15397:12:29;;:::i;:::-;15765:91;;15165:587;15876:336;;-1:-1:-1;16252:16:29;1055:788:22;618:37:0;;;16252:40:29;;;;;;:57;;15165:587;16248:1878;;;16329:9;;;;;;:24;16325:61;;16329:9;;;;16404:24;16400:324;;16248:1878;-1:-1:-1;;;8672:51:23;;:56;1055:788:22;;16878:19:29;1055:788:22;16878:19:29;;;;;;;;:::i;16400:324::-;16329:9;1055:788:22;16329:9:29;;;;;1055:788:22;5003:10:29;16570:52;;;;:::i;:::-;;16648:8;16644:47;;16400:324;;;;16248:1878;17182:9;;;;;;;17178:51;;17262:74;;;;;;;17369:48;;;;17390:4;17369:48;5925:60:23;5924:67;2137:8;;5003:10:29;17650:12;5003:10;;;17650:12;;:::i;16252:57::-;16296:9;;:13;;16252:57;;15765:91;15834:6;5003:10;15834:6;;;:::i;:::-;15765:91;;15165:587;15454:242;939:46:8;;;;;;;:::i;15454:242:29:-;15453:243;15449:288;;15165:587;;;;15116:35;5003:10;15116:35;;15015:68;-1:-1:-1;;;;6886:60:23;;6885:67;;15015:68:29;;14446:501;14602:11;1055:788:22;-1:-1:-1;;;;;618:37:0;14768:168:29;;;;;1055:788:22;;;;;;;14768:168:29;1055:788:22;;;;;;;;;;;;14768:168:29;;5003:10;14768:168;1055:788:22;14768:168:29;;;:::i;:::-;;;;;;;;;;;14446:501;;;;14768:168;;;;;:::i;:::-;1055:788:22;14768:168:29;;;14056:308;1055:788:22;;;;;14253:11:29;1055:788:22;618:37:0;1055:788:22;;14231:21:29;14253:11;1055:788:22;;;;;;;14253:11:29;1055:788:22;;;;2734:39:35;1055:788:22;;;;14056:308:29;;13795:76;13837:34;;;;;13795:76;;;12251:428;12373:22;;;;;;12463:24;;;;12459:58;;12369:296;12251:428;;;;12369:296;12568:21;12592:24;12568:21;;;:::i;12592:24::-;-1:-1:-1;12564:82:29;12369:296;12564:82;1055:788:22;;-1:-1:-1;;;12625:21:29;;1055:788:22;;12625:21:29;11962:1820;4059:18:28;1055:788:22;;12717:21:29;4003:98:28;12717:21:29;1055:788:22;4003:98:28;;:::i;:::-;12871:36:29;;;;12867:409;;11962:1820;-1:-1:-1;;;;;;5293:46:44;;;;13347:425:29;;11962:1820;;;;;13347:425;13469:22;;;;;;13558:24;;;;13554:57;;13465:293;13347:425;;;;13465:293;13662:21;13686:24;13662:21;;;:::i;13686:24::-;-1:-1:-1;13658:81:29;13465:293;13658:81;1055:788:22;;-1:-1:-1;;;13719:20:29;;1055:788:22;;13719:20:29;12867:409;13032:36;;;;5440:98:28;13032:36:29;;5440:98:28;;;:::i;:::-;13209:21:29;;;;13205:56;;12867:409;;;11304:307;11369:37;;;:::i;:::-;11365:97;;6283:18;1055:788:22;;;4976:66:23;;1055:788:22;;11493:11:29;1055:788:22;-1:-1:-1;;;;;618:37:0;1651:41:39;-1:-1:-1;1055:788:22;;;1643:7:39;1055:788:22;;;;;;1758:3:23;1055:788:22;;;4629:82:23;;;1643:64:39;11476:124:29;;11304:307;;;4253:47:23;4285:15;;;-1:-1:-1;4253:47:23;;;3450:77;5003:10:29;3489:38:23;3472:55;;-1:-1:-1;3450:77:23;;;;6254:984:29;-1:-1:-1;;;;;6333:11:29;1055:788:22;618:37:0;;6368:19:29;;;618:37:0;;1055:788:22;6368:63:29;;;;6254:984;6364:90;;;;;6254:984;;;6368:63;6400:31;;-1:-1:-1;6400:31:29;1055:788:22;;-1:-1:-1;;;;;3047:536:4;;-1:-1:-1;;;;;3047:536:4;;;;6368:63:29;1055:788:22;;;6391:40:29;;6368:63;;;;;3047:536:4;6333:11:29;3047:536:4;;1055:788:22;3047:536:4;;;1055:788:22;3047:536:4;;;;;;;;;;;;;1055:788:22;;;3047:536:4;;;;;;;;;;1055:788:22;3047:536:4;;;1055:788:22;3047:536:4;;;;;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;1703:6:30;1055:788:22;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;;;;;-1:-1:-1;;1055:788:22;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;3395:40:29;;;;3391:76;;1055:788:22;3521:22:29;;;;;;1055:788:22;3545:3:29;3580:14;3596;3580;1055:788:22;3580:14:29;;;;:::i;:::-;1055:788:22;3596:14:29;;;;;:::i;:::-;1055:788:22;3596:14:29;;:::i;:::-;1055:788:22;3506:13:29;;3391:76;1055:788:22;;-1:-1:-1;;;3444:23:29;;1055:788:22;;3444:23:29;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;6167:41:5;:5;:41;:::i;:::-;6622:47;:8;:47;:::i;:::-;1055:788:22;;;;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;5658:13:5;;1055:788:22;;;;5693:4:5;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1055:788:22;;;;;;;;6652:16:5;1055:788:22;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1055:788:22;;;;1493:62:30;;:::i;:::-;1308:72:32;;:::i;:::-;2391:14;1055:788:22;;-1:-1:-1;;;;1055:788:22;-1:-1:-1;;;1055:788:22;;;;;735:10:3;1055:788:22;;2420:20:32;;1055:788:22;;2420:20:32;1055:788:22;;;;;;;;;;;;;;17373:357:4;2065:339:28;4303:20:29;2065:339:28;4303:20:29;;:::i;:::-;2065:339:28;1055:788:22;2065:339:28;;1206:308;2065:339;;1055:788:22;2065:339:28;;;;;1055:788:22;17373:357:4;;;;;;;;;;;;;;;;1055:788:22;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;-1:-1:-1;;1055:788:22;;;;1493:62:30;;:::i;:::-;2997:6;1055:788:22;;-1:-1:-1;;;;;;1055:788:22;;;;;;;-1:-1:-1;;;;;1055:788:22;3045:40:30;1055:788:22;;3045:40:30;1055:788:22;;;;;;2070:39:34;1055:788:22;;;:::i;2070:39:34:-;2126:23;;;;;;1055:788:22;;;;;;;;;;2126:23:34;2137:12;;-1:-1:-1;2126:23:34;;;;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;;;1789:7:32;1055:788:22;;;;;;;;;;;;;;;-1:-1:-1;;1055:788:22;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;988:15:33;;;;;;;:::i;:::-;1055:788:22;;;;1023:2:33;1055:788:22;;;;;;;13256:51:38;;-1:-1:-1;;1055:788:22;;1023:2:33;1055:788:22;;13293:4:38;;13273:10;;13256:51;:::i;:::-;;1094:458:33;1055:788:22;1094:458:33;;;;13293:4:38;;1094:458:33;;;1055:788:22;1094:458:33;;;;;;;;;;;;1055:788:22;;;;;-1:-1:-1;;1055:788:22;;;;;;;-1:-1:-1;1055:788:22;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;8348:29:29;1055:788:22;;;;;;:::i;:::-;;;;8348:29:29;:::i;:::-;8920:20;;;8909:32;8920:20;;;;;;:::i;8909:32::-;8983:45;;;;:::i;:::-;9067:18;1055:788:22;;9067:18:29;1055:788:22;9042:43:29;;9038:165;;1055:788:22;1308:72:32;;;;:::i;:::-;10856:33:29;;;;:::i;:::-;10907:6;;10903:233;;1055:788:22;;;11160:17:29;1055:788:22;3378:54:23;3450:18;;:77;;;;;1055:788:22;11159:46:29;;;11155:73;;1758:3:23;1055:788:22;11160:17:29;1055:788:22;1634:2:23;1055:788:22;3826:74:23;4253:15;;;:47;;;;1055:788:22;11238:56:29;;;11160:17;1055:788:22;-1:-1:-1;;;7939:64:23;11304:307:29;;1055:788:22;11677:20:29;;11673:230;;1055:788:22;;;-1:-1:-1;;;3681:52:44;3680:59;1055:788:22;;;;;3462:5:24;1055:788:22;;;3065:5:24;1055:788:22;3059:42:24;;12093:86:29;;;;;;;;:::i;:::-;1946:66:44;1055:788:22;;-1:-1:-1;;;;;5293:46:44;;12251:428:29;;11962:1820;;;11160:17;1055:788:22;-1:-1:-1;;;5525:56:23;5524:63;13795:38:29;;:76;;11962:1820;13791:112;;1055:788:22;;;13929:32:29;13925:65;;14060:37;11160:17;1055:788:22;14060:37:29;:::i;:::-;11160:17;;;14129:11;1055:788:22;-1:-1:-1;;;;;618:37:0;1055:788:22;;;;;14129:11:29;1055:788:22;;;;;;;11160:17:29;1055:788:22;;;;;;;;;;;;;;;;;;;1758:3:23;1055:788:22;;;;;1911:12:2;1055:788:22;1996:28:2;;;:46;1992:80;;1055:788:22;11160:17:29;1055:788:22;;;;;;14129:11:29;1055:788:22;;;11160:17:29;1055:788:22;1758:3:23;1055:788:22;1911:12:2;1055:788:22;2111:28:2;1055:788:22;;;;14056:308:29;11160:17;1055:788:22;-1:-1:-1;;;5925:60:23;14446:501:29;;14056:308;15015:16;1055:788:22;-1:-1:-1;;;;;618:37:0;;;15049:5:29;1055:788:22;;;15015:40:29;;:68;;14056:308;15116:35;;;;15137:4;15116:35;2398:8:23;11160:17:29;1055:788:22;-1:-1:-1;;;8304:51:23;:56;1055:788:22;;939:46:8;;;;;:::i;:::-;15223:39:29;;15219:76;;15397:12;;1055:788:22;;-1:-1:-1;;;;;15368:11:29;1055:788:22;618:37:0;;;15015:16:29;1055:788:22;618:37:0;15397:12:29;:::i;:::-;15765:91;;15165:587;15880:23;15901:2;15880:23;;15876:336;;15165:587;-1:-1:-1;;;;;;;16252:16:29;1055:788:22;618:37:0;;;15049:5:29;1055:788:22;16252:40:29;;;;:57;;15165:587;16248:1878;;;16329:24;;;16325:61;;11160:17;1055:788:22;-1:-1:-1;;;8672:51:23;:56;1055:788:22;;16878:19:29;;;;;;;:::i;16248:1878::-;17262:74;;;;;;16248:1878;17369:48;;;;17390:4;17369:48;1055:788:22;;-1:-1:-1;;;5925:60:23;5924:67;1055:788:22;;1357:46:8;;;;:::i;17369:48:29:-;17398:19;;:::i;:::-;17369:48;;17262:74;-1:-1:-1;11160:17:29;1055:788:22;-1:-1:-1;;;8672:51:23;:56;;17262:74:29;;16252:57;;1055:788:22;16252:57:29;;15876:336;16022:20;;;;:::i;:::-;15015:16;1055:788:22;;;16183:2:29;1055:788:22;;;15996:205:29;;;;;1055:788:22;;16183:2:29;1055:788:22;;;15996:205:29;1055:788:22;;;;;;;;;;;;;;;;;;;;15996:205:29;;1055:788:22;;;;;11194:10:29;;15996:205;1055:788:22;15996:205:29;;;:::i;:::-;;;;;;;;;;;;;15876:336;15996:205;;;;:::i;:::-;1055:788:22;;15996:205:29;;15876:336;;15765:91;15834:6;15049:5;;;15834:6;:::i;:::-;15765:91;;;15165:587;15454:242;939:46:8;;;;;:::i;15454:242:29:-;15165:587;15449:288;1055:788:22;;-1:-1:-1;;;15705:32:29;;1055:788:22;;15705:32:29;15116:35;;;;15015:68;-1:-1:-1;1055:788:22;;-1:-1:-1;;;6886:60:23;6885:67;;15015:68:29;;14446:501;3413:48:8;;;;:::i;:::-;-1:-1:-1;;;;;14602:11:29;1055:788:22;618:37:0;;14508:61:29;;14651:2;14637:16;;14633:122;;14446:501;1055:788:22;;;;;14768:168:29;;;;1055:788:22;;;;;;14768:168:29;1055:788:22;;;;;;;;;;;;;;;;;;;;;14768:168:29;;11194:10;14768:168;1055:788:22;14768:168:29;;;:::i;:::-;;1055:788:22;;14768:168:29;;;;;;;;14446:501;;;;14768:168;;;;;;:::i;:::-;1055:788:22;14768:168:29;;;;14633:122;14692:13;;;;;;;;;;:::i;:::-;1055:788:22;;;;14736:2:29;1055:788:22;;;14736:2:29;1055:788:22;;-1:-1:-1;;1055:788:22;;14633:122:29;;;;14056:308;1055:788:22;;;;;14253:11:29;1055:788:22;618:37:0;1055:788:22;;14231:21:29;14253:11;1055:788:22;;;;;;;14253:11:29;1055:788:22;;;;2734:39:35;1055:788:22;;;;14056:308:29;;13795:76;1055:788:22;9067:18:29;1055:788:22;13837:34:29;;;13795:76;;12251:428;1055:788:22;;12373:22:29;;;;12463:24;;12459:58;;12369:296;12251:428;;;12369:296;12592:24;1055:788:22;12568:21:29;1055:788:22;;;12568:21:29;:::i;12592:24::-;-1:-1:-1;12564:82:29;12369:296;12564:82;1055:788:22;;-1:-1:-1;;;12625:21:29;;1055:788:22;;12625:21:29;11962:1820;1055:788:22;;;;12767:86:29;1055:788:22;;;12767:86:29;;;:::i;:::-;12871:36;;;;12867:409;;11962:1820;1055:788:22;;-1:-1:-1;;;;;5293:46:44;;13347:425:29;;11962:1820;;;;13347:425;1055:788:22;;13469:22:29;;;;13558:24;;13554:57;;13465:293;13347:425;;;13465:293;13686:24;1055:788:22;13662:21:29;1055:788:22;;13662:21:29;;:::i;13686:24::-;-1:-1:-1;13658:81:29;13465:293;13658:81;1055:788:22;;-1:-1:-1;;;13719:20:29;;1055:788:22;;13719:20:29;12867:409;13032:36;;;;;13101:86;;;;;;;;:::i;:::-;1055:788:22;;;13209:21:29;;13205:56;12867:409;13205:56;1055:788:22;;-1:-1:-1;;;13239:22:29;;1055:788:22;;13239:22:29;11673:230;2591:39:8;;;;:::i;:::-;11779:20:29;11775:118;;11673:230;;;;;11775:118;4518:44;4545:4;;4518:44;:::i;:::-;4579:19;;;11775:118;11823:26;;11819:59;;11775:118;;;;4579:19;4597:1;4590:8;;;4579:19;;;11304:307;11369:37;11160:17;1055:788:22;11369:37:29;:::i;:::-;11365:97;;11160:17;1055:788:22;9067:18:29;1055:788:22;;;4976:66:23;;1055:788:22;;11493:11:29;1055:788:22;-1:-1:-1;;;;;618:37:0;1651:41:39;-1:-1:-1;1055:788:22;;;1643:7:39;1055:788:22;;;;;;1758:3:23;1055:788:22;;;;4629:82:23;;;1643:64:39;11476:124:29;;11304:307;;;4253:47:23;4285:15;;;-1:-1:-1;4253:47:23;;;3450:77;11194:10:29;3489:38:23;3472:55;;-1:-1:-1;3450:77:23;;;;9038:165:29;9129:11;1055:788:22;10417:12:4;10762:544;1055:788:22;10762:544:4;10718:34;;;;;10762:544;;;;;1055:788:22;10762:544:4;;;1055:788:22;9129:11:29;10762:544:4;;;;;;;;;;;;;;;9129:11:29;1055:788:22;-1:-1:-1;;;;;618:37:0;10762:544:4;;;;9038:165:29;9105:64;;9101:91;;9038:165;;;;10762:544:4;1055:788:22;10762:544:4;;;9129:11:29;10762:544:4;;;-1:-1:-1;10762:544:4;;;1055:788:22;;;;;2933:39:34;1055:788:22;;;:::i;2933:39:34:-;2989:22;;;;;;1055:788:22;;;;;;;;;;2989:22:34;3000:11;;-1:-1:-1;2989:22:34;;;;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;-1:-1:-1;;;;;1055:788:22;;:::i;:::-;;;;1961:21:29;1055:788:22;;;;;;;;;;;;;;;1464:10:35;;1460:75;;1055:788:22;;;;1575:6:35;;1055:788:22;;;1460:75:35;1055:788:22;;-1:-1:-1;;;1497:27:35;;1055:788:22;;1497:27:35;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;1493:62:30;;:::i;:::-;1789:7:32;1055:788:22;;;;;;2133:9:32;2129:62;;-1:-1:-1;;;;1055:788:22;1789:7:32;1055:788:22;;;735:10:3;1055:788:22;;2667:22:32;;1055:788:22;;2667:22:32;1055:788:22;2129:62:32;1055:788:22;;-1:-1:-1;;;2165:15:32;;1055:788:22;;2165:15:32;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;;1504:20;;:::i;:::-;1055:788;;;;;;;;;;;;-1:-1:-1;;1055:788:22;;;;;;-1:-1:-1;;;;;1055:788:22;;;;4518:44:29;1055:788:22;;;;;;;;:::i;4518:44:29:-;4579:19;;;1055:788:22;;;;;;;;;4579:19:29;4597:1;4590:8;;;4579:19;;;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;-1:-1:-1;;;;;1055:788:22;;:::i;:::-;;;;;;;;;;;;1417:1:2;1055:788:22;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1055:788:22;;;;;;:::i;:::-;;;1050:11:39;;:27;;;;1055:788:22;1046:60:39;;-1:-1:-1;;;;;1055:788:22;;;1196:3:39;1055:788:22;;1162:10:39;1154:46;1055:788:22;;1233:7:39;1055:788:22;;;;;;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;1310:44:39;1055:788:22;1162:10:39;1310:44;;1055:788:22;1046:60:39;1055:788:22;;-1:-1:-1;;;1086:20:39;;1055:788:22;;1086:20:39;1050:27;1065:12;1074:3;1065:12;;1050:27;;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;;;3826:31:29;;;;:::i;:::-;3825:32;3821:84;;3953:10;;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;2779:1:2;1055:788:22;;;;1758:3:23;1055:788:22;2785:12:2;1055:788:22;2778:38:2;1055:788:22;;2835:44:2;1055:788:22;;;;;;;;;;;;4038:79:29;1055:788:22;3953:10:29;4038:79;;1055:788:22;3821:84:29;-1:-1:-1;;;3866:39:29;;1055:788:22;;3866:39:29;1055:788:22;;;;-1:-1:-1;;;;;1055:788:22;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;1055:788:22;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;1055:788:22;;;;;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;1055:788:22;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;:::i;:::-;-1:-1:-1;;1055:788:22;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;1055:788:22:o;:::-;;;;;;;;;;;;;;;;;;;:::o;364:438:34:-;;;;;1055:788:22;532:14:34;1055:788:22;;;498:32:34;;;;;626:22;;592:57;626:22;;;;:::i;592:57::-;667:19;;;532:14;663:69;;;532:14;544:2;1055:788:22;481:15:34;;;663:69;706:11;;;;;713:4;706:11;:::o;667:19::-;685:1;678:8;;;667:19;;;498:32;;;;;;;1055:788:22;364:438:34;:::o;1055:788:22:-;-1:-1:-1;;;;;1055:788:22;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;2711:502:29;;2797:31;;;:::i;:::-;;;;2882:10;;-1:-1:-1;1055:788:22;2866:15:29;1055:788:22;;;-1:-1:-1;1055:788:22;;;;;;;;;-1:-1:-1;1055:788:22;;;2779:1:2;1055:788:22;;-1:-1:-1;1055:788:22;;1758:3:23;1055:788:22;2785:12:2;1055:788:22;;;2835:44:2;1055:788:22;;;;;;;;;;;;2958:79:29;1055:788:22;2882:10:29;2958:79;;2711:502::o;2793:414::-;3171:25;3090:10;;1055:788:22;3090:10:29;;-1:-1:-1;1055:788:22;3068:21:29;1055:788:22;;;-1:-1:-1;1055:788:22;;-1:-1:-1;1055:788:22;;;3073:17:35;;1055:788:22;-1:-1:-1;1055:788:22;;;;;;;3171:25:29;2711:502::o;1055:788:22:-;-1:-1:-1;;;;;1055:788:22;;;;;;-1:-1:-1;;1055:788:22;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;1055:788:22;;;;:::o;:::-;;;:::o;951:440:34:-;;;;;1055:788:22;1120:14:34;1055:788:22;;;1086:32:34;;;;;1214:22;;1180:57;1214:22;;;;:::i;1180:57::-;1255:8;;1055:788:22;;;1255:20:34;;1120:14;1251:71;;;1120:14;1132:2;1055:788:22;1069:15:34;;;1251:71;1295:12;;;;;1055:788:22;1295:12:34;:::o;1255:20::-;1274:1;1267:8;;;;1255:20;;;1086:32;;;;;;;1380:4;951:440;:::o;7435:172:23:-;-1:-1:-1;;;5525:56:23;;5524:63;7533:31;;;5525:56;7533:67;;7526:74;7435:172;:::o;7533:67::-;-1:-1:-1;;;6886:60:23;6885:67;;7435:172;-1:-1:-1;7435:172:23:o;3396:512:34:-;;1055:788:22;3396:512:34;3520:382;3396:512;3497:11;3520:382;;;;;;;;;;;;;;;;;3396:512::o;3520:382::-;1055:788:22;3520:382:34;;-1:-1:-1;3396:512:34:o;3929:262:5:-;4013:4;4022:11;-1:-1:-1;;;;;1055:788:22;4005:28:5;;:63;;3929:262;4001:184;;;4091:22;4084:29;:::o;4001:184::-;1055:788:22;;4288:80:5;;;1055:788:22;2063:95:5;1055:788:22;;4310:11:5;1055:788:22;2063:95:5;;1055:788:22;4323:14:5;2063:95;;;1055:788:22;4339:13:5;2063:95;;;1055:788:22;4013:4:5;2063:95;;;1055:788:22;2063:95:5;4288:80;;2063:95;1055:788:22;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;4278:91:5;;4144:30;:::o;4005:63::-;4054:14;;4037:13;:31;4005:63;;1789:162:30;1703:6;1055:788:22;-1:-1:-1;;;;;1055:788:22;735:10:3;1848:23:30;1844:101;;1789:162::o;1844:101::-;1055:788:22;;-1:-1:-1;;;1894:40:30;;735:10:3;1894:40:30;;;1055:788:22;;;1894:40:30;19176:907:29;;;;;-1:-1:-1;;;2337:50:44;;2336:57;1055:788:22;;19481:13:29;;;;:::i;:::-;1055:788:22;;;;19521:2:29;1055:788:22;;;19521:2:29;1055:788:22;;;;;19417:169:29;;1752:8:44;1688:3;1055:788:22;;;2747:96:44;;;19669:19:29;;;;1055:788:22;;;;;19759:22:29;19704:34;;;;;19759:22;;:::i;:::-;19752:29;;;19665:182;;1825:3:44;1055:788:22;3203:100:44;;19934:21:29;;;;1055:788:22;;;;19971:38:29;19930:147;19176:907::o;19930:147::-;20040:26;;;;-1:-1:-1;20040:26:29;-1:-1:-1;19930:147:29;19176:907::o;19665:182::-;19812:24;;;;;-1:-1:-1;19812:24:29;-1:-1:-1;19665:182:29;;;19417:169;19565:10;;;;19417:169;;1894:581:28;17373:357:4;1894:581:28;2065:339;;;1206:308;2065:339;;;1055:788:22;2065:339:28;;;;;;17373:357:4;;;;;;;;;;;;;;;;1894:581:28;:::o;20408:471:29:-;20564:37;:17;1055:788:22;20564:37:29;:::i;:::-;:17;;;1055:788:22;20641:18:29;1055:788:22;20560:246:29;;20819:26;;20815:57;;20408:471::o;20815:57::-;1055:788:22;;-1:-1:-1;;;20854:18:29;;1055:788:22;;20854:18:29;20560:246;1055:788:22;;;;;20736:11:29;1055:788:22;618:37:0;-1:-1:-1;1055:788:22;20714:21:29;20736:11;1055:788:22;;-1:-1:-1;1055:788:22;;-1:-1:-1;1055:788:22;20736:11:29;1055:788:22;20714:81:29;1055:788:22;-1:-1:-1;1055:788:22;;20776:18:29;1055:788:22;20714:81:29;;:::i;:::-;20560:246;;;1055:788:22;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;1055:788:22;;;;;;;;-1:-1:-1;;1055:788:22;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;14860:7456:38:-;;;;15362:6948;14860:7456;;;;15007:20;;:::i;:::-;15362:6948;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;15362:6948:38;;15322:30;;15362:6948;;15322:30;;15362:6948;;;;;;;;;14860:7456::o;15362:6948::-;-1:-1:-1;;;15362:6948:38;;;;-1:-1:-1;15257:24:38;;-1:-1:-1;15257:24:38;15362:6948;;;;;;;;;14860:7456::o;15362:6948::-;15257:24;;;15362:6948;15257:24;;;15362:6948;15257:24;15362:6948;15257:24;;;;;;15362:6948;;;;;;;;;;;;;;;;3073:17:35;;15362:6948:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14860:7456::o;15362:6948::-;-1:-1:-1;;;;;15362:6948:38;;-1:-1:-1;15362:6948:38;;15192:30;;-1:-1:-1;15192:30:38;15362:6948;;-1:-1:-1;15362:6948:38;;;;;;;14860:7456::o;15362:6948::-;-1:-1:-1;;;;;15362:6948:38;;-1:-1:-1;15362:6948:38;;15127:28;;-1:-1:-1;15127:28:38;15362:6948;;-1:-1:-1;15362:6948:38;;;;;;;14860:7456::o;15362:6948::-;15192:30;;;;;;15362:6948;15192:30;;;;;;;15362:6948;;;;;;;;;;;;;;;;;;;;;;;;;3073:17:35;;15362:6948:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;15362:6948:38;;;;;;;;14860:7456::o;15362:6948::-;15127:28;;;;;;15362:6948;15127:28;;;;;;;15362:6948;;;;;;;;;;;;;;;;;;;;;;;3073:17:35;;15362:6948:38;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;15362:6948:38;;;;;;;;14860:7456::o;1871:128:32:-;1055:788:22;1789:7:32;1055:788:22;;;;1932:61:32;;1871:128::o;1932:61::-;1055:788:22;;-1:-1:-1;;;1967:15:32;;;;;3368:267:40;1390:66;3491:46;;1390:66;;;2625:40;;2679:11;2688:2;2679:11;;2675:69;;1055:788:22;;;;;;:::i;:::-;2324:106:40;;2311:2;1055:788:22;;2324:106:40;3553:22;:::o;2675:69::-;1055:788:22;;-1:-1:-1;;;2713:20:40;;;;;3487:142;1055:788:22;;;;;1390:66:40;;;;;;;;;;;;;;;3487:142;1390:66;;;;;;;;;1055:788:22;;;;;;1390:66:40;;;;;;;;;;;;;;;;;;:::i;:::-;1055:788:22;1390:66:40;;;;;;-1:-1:-1;1055:788:22;1390:66:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1390:66:40;;;;;;;;;;;;;;1055:788:22;1390:66:40;;1055:788:22;;;1390:66:40;;;;;;;;;;;;;1055:788:22;;;;1390:66:40;;;;;1055:788:22;1390:66:40;;;;;;;;3368:267;1390:66;3491:46;;1390:66;;;2625:40;;2679:11;2688:2;2679:11;;2675:69;;1055:788:22;;;;;;:::i;3487:142:40:-;1055:788:22;;;-1:-1:-1;6652:16:5;;1390:66:40;;;6652:16:5;1390:66:40;6652:16:5;1390:66:40;;;;;;;3487:142;1390:66;;;;;;;;;1055:788:22;;;;;;1390:66:40;;;;;;;;;;;;;;;;;:::i;:::-;;;;;6652:16:5;-1:-1:-1;1390:66:40;;;-1:-1:-1;1390:66:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1390:66:40;;;;;;;;;;;;;1952:313:35;;2142:10;;2138:64;;2242:6;;1952:313;:::o;2138:64::-;2168:23;;;:::o;6192:671:28:-;;6328:17;1055:788:22;-1:-1:-1;;;2890:53:23;2889:60;1055:788:22;;6380:21:28;;6376:73;;1055:788:22;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;1055:788:22;;;;;;;;;;6583:20:28;;-1:-1:-1;;;;;6575:49:28;;;1055:788:22;;6628:30:28;;;6575:83;6571:134;;6324:498;1055:788:22;6831:25:28;-1:-1:-1;6192:671:28;:::o;6571:134::-;-1:-1:-1;;;;;6675:29:28;6660:45::o;6376:73::-;-1:-1:-1;;;;;;6418:30:28;-1:-1:-1;6403:46:28:o;6324:498::-;6740:20;;6736:75;6324:498;6736:75;-1:-1:-1;;;;;6777:33:28;6762:49::o;6192:671::-;1055:788:22;6328:17:28;1055:788:22;-1:-1:-1;;;2890:53:23;2889:60;1055:788:22;;6418:30:28;-1:-1:-1;;;6418:30:28;6403:46::o;6324:498::-;-1:-1:-1;1055:788:22;;;;6192:671:28:o;1055:788:22:-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;1055:788:22;;;;;;;;;;;;;;;;;;;;;;:::i;3608:772:28:-;;;;;1775:46:8;;;;:::i;:::-;3931:16:28;;;;3927:185;;4150:13;;;;:::i;:::-;1055:788:22;;;;4359:2:28;1055:788:22;;;4128:245:28;1055:788:22;4359:2:28;1055:788:22;4128:245:28;1055:788:22;;;;;;;;;;;;;4128:245:28;;1055:788:22;;;;;4260:10:28;;4128:245;1055:788:22;4128:245:28;;;:::i;:::-;;;;;;;;;;-1:-1:-1;4128:245:28;;;4121:252;3608:772;:::o;4128:245::-;;;;;;;;;;;;;;;;;:::i;:::-;;;1055:788:22;;;;;3608:772:28;:::o;4128:245::-;;;-1:-1:-1;4128:245:28;;3927:185;1055:788:22;;;;;;4003:98:28;1055:788:22;;4059:18:28;1055:788:22;4039:18:28;1055:788:22;4003:98:28;:::i;5045:772::-;;;;;2193:46:8;;;;:::i;:::-;5368:16:28;;;;5364:185;;5587:13;;;;:::i;:::-;1055:788:22;;;;5796:2:28;1055:788:22;;;5565:245:28;1055:788:22;5796:2:28;1055:788:22;5565:245:28;1055:788:22;;;;;;;;;;;;;5565:245:28;;1055:788:22;;;;;5697:10:28;;5565:245;1055:788:22;5565:245:28;;;:::i;5364:185::-;1055:788:22;;;;;;5440:98:28;1055:788:22;;5496:18:28;1055:788:22;5476:18:28;1055:788:22;5440:98:28;:::i;21484:820:29:-;;1055:788:22;21697:601:29;21484:820;21697:601;21484:820;;;21697:601;;21659:28;;;;21697:601;;;;;;;;;;;;;;;;;1055:788:22;21697:601:29;;;;;;;;;;21484:820;:::o;:::-;;;;21697:601;21484:820;;21697:601;21484:820;;;;21697:601;;21659:28;;;;21697:601;;;;;;;;;;;;;;;;21484:820;21697:601;;;;;;;;;;;;;;;;;;;21484:820;:::o;21697:601::-;;;;;;;;;6162:897:38;;;;;;-1:-1:-1;;;;;6312:26:38;;6308:69;;-1:-1:-1;6405:20:38;;;6515:483;6405:20;;;:::i;:::-;6493:12;6515:483;;6453:30;;;;6515:483;;;;;;;;;;;;;;;;;;;;;;;;;;6162:897;7011:8;;7007:45;;6162:897::o;7007:45::-;6515:483;1055:788:22;-1:-1:-1;;;7028:24:38;;6515:483;;7028:24;6515:483;;;;;;;;;6308:69;1055:788:22;;-1:-1:-1;;;6347:30:38;;;;;25771:495;25024:359;;25771:495;;;;;;;24991:23;;;25024:359;;;;;;;;;;25908:4;-1:-1:-1;;;;;1055:788:22;;25894:19:38;25890:370;;25771:495;;:::o;25890:370::-;25024:359;25929:321;;;;;;;;;;25771:495::o;2723:225:28:-;-1:-1:-1;;;;;2851:14:28;1055:788:22;618:37:0;;;2888:22:28;;1055:788:22;;2888:53:28;2723:225;:::o;2888:53::-;1055:788:22;;2924:11:28;1055:788:22;618:37:0;2723:225:28;:::o;26272:564:38:-;26351:479;;;;;;;;;;;;;;;;;26272:564::o;26351:479::-;;;26272:564::o;26351:479::-;;;;26272:564::o;4889:529:8:-;;;;5019:4;5000:23;;4996:48;;5111:248;;1449:652:26;;;;;;;;;;;1055:788:22;;;5111:248:8;1449:652:26;;;;;;5019:4:8;1449:652:26;;;;4889:529:8:o;1449:652:26:-;1413:26;;;-1:-1:-1;1449:652:26;2607:22:8;-1:-1:-1;1449:652:26;4996:48:8;-1:-1:-1;5032:8:8;;-1:-1:-1;5032:8:8;;5025:19::o;4889:529::-;;;;5019:4;5000:23;;4996:48;;5111:248;;1449:652:26;;;;;;;;;;;1055:788:22;;;5111:248:8;1449:652:26;;;;;;5019:4:8;1449:652:26;;;;4889:529:8:o;:::-;;;;5019:4;5000:23;;4996:48;;5111:248;;1449:652:26;;;;5019:4:8;1449:652:26;;;;;1055:788:22;;;5111:248:8;1449:652:26;;;;;;5019:4:8;1449:652:26;;;;4889:529:8:o;:::-;;;;5019:4;5000:23;;4996:48;;5111:248;;1449:652:26;;;;;;5019:4:8;1449:652:26;;1055:788:22;;;5111:248:8;1449:652:26;;;;;;5019:4:8;1449:652:26;;;;4889:529:8:o;:::-;;;;5019:4;5000:23;;4996:48;;5111:248;;1449:652:26;;;;;;;;;1055:788:22;;;5111:248:8;1449:652:26;;;;;;5019:4:8;1449:652:26;;;;4889:529:8:o;:::-;;;;5019:4;5000:23;;4996:48;;5111:248;;1449:652:26;;;;;;;;;;;1055:788:22;;;5111:248:8;1449:652:26;;;;;;5019:4:8;1449:652:26;;;;4889:529:8:o;:::-;;;;5019:4;5000:23;;4996:48;;5111:248;;1449:652:26;;;;5019:4:8;1449:652:26;;;;;;1055:788:22;;;5111:248:8;1449:652:26;;;;;;5019:4:8;1449:652:26;;;;4889:529:8:o;:::-;;;;5019:4;5000:23;;4996:48;;5111:248;;1449:652:26;;;;;;;;;;;1055:788:22;;;5111:248:8;1449:652:26;;;;;;5019:4:8;1449:652:26;;;;4889:529:8:o;1055:788:22:-;;;;;;;:::o;:::-;;;;;;;;;;;;275:402:1;423:34;;;462:3;1055:788:22;422:48:1;418:183;;617:34;;:53;:34;;:::i;:::-;:53;:::i;418:183::-;521:55;1055:788:22;;521:55:1;:::i;766:450::-;;914:34;;;953:3;1055:788:22;913:48:1;909:206;;1132:34;;;;:::i;:::-;1055:788:22;;;;;;;;;-1:-1:-1;;1055:788:22;;;;;;;1131:78:1;;;:::i;909:206::-;1012:78;;3073:17:35;1055:788:22;;;-1:-1:-1;;1055:788:22;1012:78:1;:::i"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdvanceEpochFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArbitraryStaticCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BitInvalidatedOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochManagerAndBitInvalidatorsAreIncompatible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthDepositRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPermit2Transfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidatedOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MakingAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchArraysLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderIsNotSuitableForMassInvalidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PartialFillNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Permit2TransferAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PredicateIsNotTrue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrivateOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyDetected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemainingInvalidatedOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"name\":\"SimulationResults\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapWithZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakingAmountExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakingAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromMakerToTakerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromTakerToMakerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongSeriesNonce\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotValue\",\"type\":\"uint256\"}],\"name\":\"BitInvalidatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpoch\",\"type\":\"uint256\"}],\"name\":\"EpochIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"series\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"advanceEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"and\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"arbitraryStaticCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"bitInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalMask\",\"type\":\"uint256\"}],\"name\":\"bitsInvalidateForOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits[]\",\"name\":\"makerTraits\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"orderHashes\",\"type\":\"bytes32[]\"}],\"name\":\"cancelOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"}],\"name\":\"checkPredicate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"series\",\"type\":\"uint96\"}],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerEpoch\",\"type\":\"uint256\"}],\"name\":\"epochEquals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"eq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"}],\"name\":\"fillContractOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"fillContractOrderArgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"fillOrderArgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"gt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"series\",\"type\":\"uint96\"}],\"name\":\"increaseEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"not\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"or\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"action\",\"type\":\"bytes\"}],\"name\":\"permitAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"rawRemainingInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"remainingInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"simulate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"BitInvalidatedOrder()\":[{\"details\":\"The error is thrown when an attempt is made to invalidate an already invalidated entity.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"EthDepositRejected()\":[{\"details\":\"Error thrown when an ETH deposit from an EOA is attempted.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"RemainingInvalidatedOrder()\":[{\"details\":\"The error is thrown when an attempt is made to invalidate an already invalidated entity.\"}]},\"events\":{\"BitInvalidatorUpdated(address,uint256,uint256)\":{\"params\":{\"maker\":\"Maker address\",\"slotIndex\":\"Slot index that was updated\",\"slotValue\":\"New slot value\"}},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"OrderCancelled(bytes32)\":{\"params\":{\"orderHash\":\"Hash of the order\"}},\"OrderFilled(bytes32,uint256)\":{\"params\":{\"orderHash\":\"Hash of the order\",\"remainingAmount\":\"Amount of the maker asset that remains to be filled\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator for the current chain (EIP-712)\"},\"and(uint256,bytes)\":{\"returns\":{\"_0\":\"Result True if calls to all targets returned True. Otherwise, false\"}},\"arbitraryStaticCall(address,bytes)\":{\"returns\":{\"_0\":\"Result Bytes transmuted to uint256\"}},\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"},\"epochEquals(address,uint256,uint256)\":{\"returns\":{\"_0\":\"Result True if `maker` has specified epoch. Otherwise, false\"}},\"eq(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns the same value as `value`. Otherwise, false\"}},\"gt(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is bigger than `value`. Otherwise, false\"}},\"lt(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is lower than `value`. Otherwise, false\"}},\"not(bytes)\":{\"returns\":{\"_0\":\"Result True if call to target returns 0. Otherwise, false\"}},\"or(uint256,bytes)\":{\"returns\":{\"_0\":\"Result True if call to any target returned True. Otherwise, false\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permitAndCall(bytes,bytes)\":{\"params\":{\"action\":\"The data representing the action to be executed after the permit.\",\"permit\":\"ERC20 token address (20 bytes) concatenated with the permit data, allowing this contract to spend the token. Format: [token address (20 bytes)][permit data]\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"##1inch Limit Order Protocol v4\",\"version\":1},\"userdoc\":{\"events\":{\"BitInvalidatorUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when order with `useBitInvalidator` gets cancelled\"},\"OrderCancelled(bytes32)\":{\"notice\":\"Emitted when order without `useBitInvalidator` gets cancelled\"},\"OrderFilled(bytes32,uint256)\":{\"notice\":\"Emitted when order gets filled\"}},\"kind\":\"user\",\"methods\":{\"advanceEpoch(uint96,uint256)\":{\"notice\":\"Advances nonce by specified amount\"},\"and(uint256,bytes)\":{\"notice\":\"Calls every target with corresponding data\"},\"arbitraryStaticCall(address,bytes)\":{\"notice\":\"Performs an arbitrary call to target with data\"},\"bitInvalidatorForOrder(address,uint256)\":{\"notice\":\"See {IOrderMixin-bitInvalidatorForOrder}.\"},\"bitsInvalidateForOrder(uint256,uint256)\":{\"notice\":\"See {IOrderMixin-bitsInvalidateForOrder}.\"},\"cancelOrder(uint256,bytes32)\":{\"notice\":\"See {IOrderMixin-cancelOrder}.\"},\"cancelOrders(uint256[],bytes32[])\":{\"notice\":\"See {IOrderMixin-cancelOrders}.\"},\"checkPredicate(bytes)\":{\"notice\":\"See {IOrderMixin-checkPredicate}.\"},\"epoch(address,uint96)\":{\"notice\":\"Returns nonce for `maker` and `series`\"},\"epochEquals(address,uint256,uint256)\":{\"notice\":\"Checks if `maker` has specified `makerEpoch` for `series`\"},\"eq(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to the value\"},\"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)\":{\"notice\":\"See {IOrderMixin-fillContractOrder}.\"},\"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)\":{\"notice\":\"See {IOrderMixin-fillContractOrderArgs}.\"},\"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)\":{\"notice\":\"See {IOrderMixin-fillOrder}.\"},\"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)\":{\"notice\":\"See {IOrderMixin-fillOrderArgs}.\"},\"gt(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's bigger than value\"},\"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"See {IOrderMixin-hashOrder}.\"},\"increaseEpoch(uint96)\":{\"notice\":\"Advances nonce by one\"},\"lt(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's lower than value\"},\"not(bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to 0\"},\"or(uint256,bytes)\":{\"notice\":\"Calls every target with corresponding data\"},\"pause()\":{\"notice\":\"Pauses all the trading functionality in the contract.\"},\"permitAndCall(bytes,bytes)\":{\"notice\":\"Executes a permit for an ERC20 token and then a specified action in a single transaction.\"},\"rawRemainingInvalidatorForOrder(address,bytes32)\":{\"notice\":\"See {IOrderMixin-rawRemainingInvalidatorForOrder}.\"},\"remainingInvalidatorForOrder(address,bytes32)\":{\"notice\":\"See {IOrderMixin-remainingInvalidatorForOrder}.\"},\"simulate(address,bytes)\":{\"notice\":\"See {IOrderMixin-simulate}.\"},\"unpause()\":{\"notice\":\"Unpauses all the trading functionality in the contract.\"}},\"notice\":\"Limit order protocol provides two different order types - Regular Limit Order - RFQ Order Both types provide similar order-fulfilling functionality. The difference is that regular order offers more customization options and features, while RFQ order is extremely gas efficient but without ability to customize. Regular limit order additionally supports - Execution predicates. Conditions for order execution are set with predicates. For example, expiration timestamp or block number, price for stop loss or take profit strategies. - Callbacks to notify maker on order execution See [OrderMixin](OrderMixin.md) for more details. RFQ orders supports - Expiration time - Cancelation by order id - Partial Fill (only once) See [OrderMixin](OrderMixin.md) for more details.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LimitOrderProtocol.sol\":\"LimitOrderProtocol\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/AddressLib.sol\":{\"keccak256\":\"0x5dbbd2513216eca9660b83e356b1b50d6dd5f854c0106be6bc7df3fff01821d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71c5a3b82d7cb1c060885ed6a11710fe216af832d30b6dd30d051635e6c4e586\",\"dweb:/ipfs/QmWYnTddAxLhKQq58wwya9NUkhudFoYamGZpcuHc6XdAMR\"]},\"contracts/AmountCalculatorLib.sol\":{\"keccak256\":\"0xb1fbc0d0951abce2e6d07b021ab03af781de5fa6b5002422d183ce81d9f2ef32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc4475dfc44f050aa4ee8b7335aa512a02669055639a0dbf267f81376a54cd89\",\"dweb:/ipfs/QmSVm5eyL8sPJGxc3oZmmZCeK5aonjr1M7qHUdtpAGHX4G\"]},\"contracts/BitInvalidatorLib.sol\":{\"keccak256\":\"0xd82e4b69af3f9883f6ac9560965a763a04f79e583b31b2f37982e24f44e25bcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ccf59b63d1721e65dcd41283a634874824689b2f7a02fd3f98d2fde03f07c2e4\",\"dweb:/ipfs/QmfA5ZSffvaaYCw5T8G11Bj3tGWcupx2ZBSJNZD6cDKrCq\"]},\"contracts/Context.sol\":{\"keccak256\":\"0x28ad9de5e26095f685a085591178af7aeac1427af1bf442986b5aee0a5b2a14a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad3864801aabbcc6f52361a1b86a3d4d342e283cc2036c47a3ef2df7e4a3c51\",\"dweb:/ipfs/QmezNWJGoPBwtHjsQae7dbqjeZgpbB2cHFE5nFBBzGvJFR\"]},\"contracts/ECDSA.sol\":{\"keccak256\":\"0xa6e29ba3b3f26b1d82b2f76c349038e314c4bcd7930ec8b2255022d8b684bd78\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f07a89f3ab957b78bab77074d61d0149d3b49ae1f9fa3b9b704cfdda974897ec\",\"dweb:/ipfs/QmbS9FUMWM1sDVin9R4A8ZG4Z4EukgNmUM59PnvzQ1Bhd3\"]},\"contracts/EIP712.sol\":{\"keccak256\":\"0xb4c232fe0a8def0f88b00e6ebce12ab4813f0d642c328132b7c836c1922ce2b1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ae9d0cf798117e2bd4da0ddccf456866d3fc5ffa147cd4172f15af965aa561a7\",\"dweb:/ipfs/QmWmgX4Ug6XbaPTMV6U921Za9QvzYtoWa3kCTo1eX47moq\"]},\"contracts/Errors.sol\":{\"keccak256\":\"0x9809fef666ce40e434d4019d25e06c69e7ad2aad7de59966a426cdee8b5a467e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://160977820c842b4d417f26f113a42027001ed3d23e398560f3f41316f31a4705\",\"dweb:/ipfs/QmPdqyve3ryoj3Hw52SG59LBpLhw8jNff6otau6iUKyQJh\"]},\"contracts/EthReceiver.sol\":{\"keccak256\":\"0x7fbf52c64fd6e03b2f5d977aac7d2b377fc240495d09e47642dc4ef301d173c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8dfcabf097c3a4e0819d387acc40b135aa9d59320971c2d648e399f77fedd7fc\",\"dweb:/ipfs/QmQreuBPfDUkauL9FTFY9dLe7vGyLsQoDA5DHZrA1u9SZS\"]},\"contracts/ExtensionLib.sol\":{\"keccak256\":\"0x054ca2ebc73bc4dd62816bd9a3d384b89454e5e65d9d83c66637c578789d96ca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9dc6a0163be726abd9732ac63c31f2b99a8f9505ae6280e9d2fa13150990d113\",\"dweb:/ipfs/Qmd6CCRPTWE13WPEMTZZqisDkMQXdWm99P5N66CcT4uGaj\"]},\"contracts/IAmountGetter.sol\":{\"keccak256\":\"0x877aa31c7903e60289a1ba750e583113b1f317a9dfaeefcbf7fd19b4c62dbd98\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7bbeceff66893fba29928459f2afa4546d19aaacdc3e6450ca51fb216874a86\",\"dweb:/ipfs/QmYny4mRyuGRoRGNmoqYnpU6um3KhoTmfWs1xvLnLLEs3f\"]},\"contracts/IDaiLikePermit.sol\":{\"keccak256\":\"0x0bcc9c886acb32f5664e3bfd0640e6fc1de6525b8f6103f25906d040d054ce07\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://551e3b7d18d5e83727491f6749643a9a1e9a2e253a1a9be56eeb44e4c1b13876\",\"dweb:/ipfs/QmSpGRSD3DDP1EbBbXDPqAbSP58roEvCsosMQCDtSDnEBa\"]},\"contracts/IERC1271.sol\":{\"keccak256\":\"0xa46ecff1d8a61c56161d3c1ec3cf10b62595bb8dc6bc2bd7ebb2eab2fda06c9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://443beef6470857f7c919bc98c6dc21bd2031742398e156cf29e8e873099d4f4f\",\"dweb:/ipfs/QmZfdVdBmJJi1z7mtjHTiaChPxxNHTjJrTwU3c9Br4GM4m\"]},\"contracts/IERC20.sol\":{\"keccak256\":\"0x91104f4bcc877f2506e4485b871efe0a6beb5c1ef7de9c374d99d75289905905\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57a7ecbec5ff542c117d36c7487386b5653ad21d0a83414e859d4202e069b36f\",\"dweb:/ipfs/QmaPocSUaysdjd1Ksa5kttxRHxhA7XWd6HrQ9teLFRyR6W\"]},\"contracts/IERC20Permit.sol\":{\"keccak256\":\"0x08d82b52e80c1a83f792c519388ca1ae86ae441bdfbd7d84addc82ef9c499a9e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a5449dde3b5541f3f653b352bfa0aa4f3e91ab24a110106319baa83940f540a5\",\"dweb:/ipfs/QmUuadcLdSPtqMuuhBgkdAZHrE3tx5rdQ7HCXCsa8RDaTU\"]},\"contracts/IERC5267.sol\":{\"keccak256\":\"0xeb1cfabddcb4460c6145294ffebe6e15277f53923f488905ef0b18f8e4b7f1d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8419131499a0f3018b6596362238b47abe33e842798cc313494c6fd3081c1a63\",\"dweb:/ipfs/QmPRvMVqAteuCA1jzTUUz5AZLGuCTdVLF2x9Nw4nE1KiVS\"]},\"contracts/IERC7597Permit.sol\":{\"keccak256\":\"0x550ff037524afe9ef46d2c54ed59f4048c4216122e80da3b17872e05c163a74e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40df00df81d4a4d2a78105bf5b86694037d885abf30e1e47e286b6e3310bdf48\",\"dweb:/ipfs/QmVqmS8BpSMV8PeiUme1tNDq48zfn71XYxWhb6fLtxCT6f\"]},\"contracts/IOrderMixin.sol\":{\"keccak256\":\"0x34ead0b58bd2640652ad6366b4c4ea1370b66d2dd21ffb5d5b831ed54fc9cc71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65b82f8298ed8d9cb9eb3604af3c15129cffa009c5b0150f7f42154093d9ce96\",\"dweb:/ipfs/QmaQoQNVTiJPKB6MVwtemAWrwyKEKR5fLqy7vyfm8oqBEx\"]},\"contracts/IPermit2.sol\":{\"keccak256\":\"0x79e985eddaf616078cde10431fb615b577ba83b96ca5f4161cb82939a787a195\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a1d3243656736b7e4422a6eb7bbac982760f99674b9d80286e5bf45f1fe04376\",\"dweb:/ipfs/QmacX52RVqLnUgWxji9FkfFSZeGnV6qdxkkX5kMxakYRyW\"]},\"contracts/IPostInteraction.sol\":{\"keccak256\":\"0x34e475bf78d8978a6a6ac660f4c4357808bff2b27613dab281b562dc9fda907e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3c35113e8dcba3fc49650e2b48cd1a14e23050b66c748d2323898a0117a01b58\",\"dweb:/ipfs/QmYuhGpycuzAcVvcHt8Z4M7GPYt1XSwd1VvKtyKyeb1e8V\"]},\"contracts/IPreInteraction.sol\":{\"keccak256\":\"0xb2deb1dafa99ec8259fe651e8b39f5cfff725143c0394e4eb359729a399a2a55\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d07a0f88bad2704d4a1d15a8ee50cc997b830eef82153483d13c624101da8fdb\",\"dweb:/ipfs/QmSv8ZY7zmMJ5pAWaWVzDDN4kn5cPeBvVM61o4nja17u75\"]},\"contracts/ITakerInteraction.sol\":{\"keccak256\":\"0xc6c79fdf0d75b02c9ebc50a12c274c2fe8418fcbcdd49359ae58b6115859c5fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c73fc4a6102e51ced68750cf515daff7d7a4b9f4b380c92c66fc4a086dd4bb07\",\"dweb:/ipfs/QmbNmr96WaNzrvbiz6YZwQGLiCck5u4ujWx8LfRfK9wCY1\"]},\"contracts/IWETH.sol\":{\"keccak256\":\"0x2dc6d61d66f1881a6c273b5f30f9a82e6eda4988c7aeaf0b26549a5e10c9fcb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1695d9fd49960e732d2228a304fe9bc221439293e940fdcb9c17419ccafdcfc1\",\"dweb:/ipfs/QmPZrdz4icyWQeR5Yf1zDQnpH8MmYiHyKofVcwvwNADjRh\"]},\"contracts/LimitOrderProtocol.sol\":{\"keccak256\":\"0x2e1b811ca97f70403298afdd130d4a48a4aa065b3c4f241f84a733b59813b558\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e171ce574a021d01960baf9dc1df86310b0b7a499411e1c32a867b07b77b68cb\",\"dweb:/ipfs/QmRkFyUiWvkxYuUAGzSmjCE7geUNkBhaJsJ6FTawHK5reJ\"]},\"contracts/MakerTraitsLib.sol\":{\"keccak256\":\"0x2077d7a827c3ba2fa53c92b87bc586385c1310c3fe67edffe09c31a22900cbf9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49f7294dcb82d3acd8b7e2f95546cc85e24ceb7e3564a21ebf852544887cda3b\",\"dweb:/ipfs/QmPgzEiFpUHmGYfXF4EEdpCnb9TPnCpoF48bNMGw74vk1b\"]},\"contracts/Math.sol\":{\"keccak256\":\"0x38c3845ac06436b72e265731c3546e21b2e792a800af0c355f2039ceb85cdbfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c63508dd9c15bf8155a8c248518310ad06b1d3f8d42082866fc8ecaa37f8dfda\",\"dweb:/ipfs/QmXiJyT5zGCgPWeLrF1g3fpvbjMkVQBt9MSq3fiA97VsTj\"]},\"contracts/MessageHashUtils.sol\":{\"keccak256\":\"0x8f285fdf7d54a65521a41ce2301f9be9727a5fe12e92e6c531255fb552f49450\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3ba231f35f2eff8d87c6a2a30a085844f9b94a4b568ad74777dc2a33d2849ba\",\"dweb:/ipfs/QmPs1ur6k3pkcHpbwh3aTR4tJsHctcY2Goze5VspFuRZfv\"]},\"contracts/OffsetsLib.sol\":{\"keccak256\":\"0xd8218c3b9241501b41fc0f0b579dce00a0b81603582e11f3da28881ed00801a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://039b36fea4d1d12fe0d02ac26bdefd959c6fe447bd73ea0599a49e08f1712999\",\"dweb:/ipfs/QmcyPNSDc2RjksmwYPY3jGAjD9bEhBAWi3qKYWNvtHHZT6\"]},\"contracts/OnlyWethReceiver.sol\":{\"keccak256\":\"0x253e18562bbac1277e92aff67a7c8911067b88b38c4f6edeec2e2f4c5cdb29dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cfe07e3be8b962f8b07211e23c2bfeb50a3d46cc0b6e4067f5841ef434f9601f\",\"dweb:/ipfs/Qmed6EpjdafZ1rWYiEXXTRbySBu1GC8oCr6CShadpWYHnL\"]},\"contracts/OrderLib.sol\":{\"keccak256\":\"0x237317b4a2bec36853fabe0dc2647d211730ea0548c28cf166fec824bb5dc24d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b4906e36c77ba5c37d0d47afd3fa55b511f6a52afbab6470c435d44f872f22d\",\"dweb:/ipfs/QmTAAEzZjuAqo5PNNpM64acaN8yTzv8jzxaUZNXtP2yS8f\"]},\"contracts/OrderMixin.sol\":{\"keccak256\":\"0x1e322ee0cc0a5c3fce1e75892344d1f3413bc3a072f8bb5472becd62bdf1a7f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://50c0efaac0fccc64f7a7cc5a8f47bf722c17638d81c23c5a30c6bde1386a88cd\",\"dweb:/ipfs/QmdhrbPgcpQJyUk5PDudf28MRaticBoHG6rkuAJTfXqmDo\"]},\"contracts/Ownable.sol\":{\"keccak256\":\"0xa6428484d54bc2cd4eb2a5632305a4b7783365f8c5fa173ad62c4795bf2839f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a7d9efbfeef2f5c28979e8a93eeab25f6c2e85e69fe6261c4c17d15c5c3aadf\",\"dweb:/ipfs/QmQieD54hKvNVXV3RuknW9BnSurgGrEyTnmcKHXg9YHC7E\"]},\"contracts/Panic.sol\":{\"keccak256\":\"0xec0c46048fd01751aa22ecddb66df20b702374fd68f3f4b3ae363782f6b31f9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d32d9af31bc44235f769cf820ec96fd3f0aea9e16a169b244a62e34e482d7d55\",\"dweb:/ipfs/Qmd4Lw5sSLQtfE2vEy29RHzffinDsHgN1pGaS8Eex1F8ks\"]},\"contracts/Pausable.sol\":{\"keccak256\":\"0xb716012bd6d1308f1e3117f10754f8bd3cafbfd21c1e2f4a36eb371cde8f269c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://434ee6c6171c52a5d6018e1e2cbb05c6ddc45f4e4a72aa5f5fad344fe27146fd\",\"dweb:/ipfs/QmceTTn3vqoFYeV3zPHwt5GZHJgSjpjJ9YWic2p4hpeVpH\"]},\"contracts/PermitAndCall.sol\":{\"keccak256\":\"0x702acc765e2b776e474c01903fe534919d562c23d397361540f1c24dcb978009\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6e19ecfe7df5064f93afa80c2f0a52c7cf840cebd1a1adca3b4a68f49bafc1e\",\"dweb:/ipfs/QmbVe5YgchvdAoUHrzdNXARkBGP9WvZeJo8xri5fwdFFAf\"]},\"contracts/PredicateHelper.sol\":{\"keccak256\":\"0x2eabeb6ee0a445ec34dea12a88de427dbdaa69331ef5d7e11fee697c9eb9abdf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://421ce9422fe2c69966d7991a444017932aee070e933fc0d16b22bc9df01fe15c\",\"dweb:/ipfs/Qmcpv6v97Mty5rWGK6nUDVH1YF72gUQKkqzNdC62u378Fu\"]},\"contracts/RemainingInvalidatorLib.sol\":{\"keccak256\":\"0x192440c67bd53e14ab492c5bf4d65ce44055272cf4e80950d601a5af0db567fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8389ea1731fbb20c5b5f19da828c1e4f4146b8a94d033df70bc34f2674b484ea\",\"dweb:/ipfs/QmXacGH2xWNnN3SrS27QKykd7rUKpmMCrffNwQtq6L8ZG5\"]},\"contracts/RevertReasonForwarder.sol\":{\"keccak256\":\"0x00dbd12fec0c2696dd0862143457d8a23c998dcabd5d038fc85512ba93467417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2fa738dc80ff7027762294869f2b181177a5c122fe04ceea08c619c544c820aa\",\"dweb:/ipfs/QmUzrDWe6k6Hhfdd5MxUhnW34B8mGJ5pwx65NM9EBLkLCU\"]},\"contracts/SafeCast.sol\":{\"keccak256\":\"0x16949b29739a3a20cf5ffe9ca22830a9f9b6deff16ee925827b19ddb5fbc127a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://768190c98439f96d5cad1900cc96e24f0749172192be8b5de885c426750c6ecd\",\"dweb:/ipfs/QmWPmxri7eCbAXC7p3qJ14ckPTUDkdE3wuyiMoc1pat5ft\"]},\"contracts/SafeERC20.sol\":{\"keccak256\":\"0x2cdc46994aa3302bf2026f5a2ba0650398aaf41278354075544bf42350ee947e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a65e24d410030f7b192d59a0096213bee88b963822052502572cdb9ee55e9d9\",\"dweb:/ipfs/QmcQH7uVFhTLGxTuqUsiEsc7qH9HE7xGgSQTXijoVUcKUn\"]},\"contracts/SeriesEpochManager.sol\":{\"keccak256\":\"0x9d03f20594ca58ba892ad2e015f3fdade1ed8634073cd2dcc6498a98acc79541\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1eb4af3779131b166d4529c2123b9cb00f9f59e1dbff3814948d37cf193c8184\",\"dweb:/ipfs/Qme1qvRRPcac4qYQu1nUFyd4Gu4iP6nqvSEr28F8VbJqQ1\"]},\"contracts/ShortStrings.sol\":{\"keccak256\":\"0xbfad9b3a40cba77c2f86c308175ac65e06b10e76159d635b018171c67846da69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3b4406389834f36341fc1c87d4e8ab26d902a40b887a17689a238e5a97ef0b2\",\"dweb:/ipfs/QmQtUoQLw3NjKrAutrXqepURfrb4pvoZ6mXp4AcUuosH4D\"]},\"contracts/SignedMath.sol\":{\"keccak256\":\"0xc07e2a3d5f315dafaec45606b60414be49cc913bd11ea1b1d8ee460e72f37445\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d5f6ea2b532028ac1b221ce2e33bfbf71d2ef43b318db47c029ea7b1760d4df\",\"dweb:/ipfs/QmdxY44UJdhcgVZ7YCm6um4FKBU1PvL925KgefxD7onTRw\"]},\"contracts/StorageSlot.sol\":{\"keccak256\":\"0x2373cbbdccacc6777b2a7b459aa35b7629b0f7aa63566cd9afe45be9f256645c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4d674a1520bc8b6888ff3c5e663a45b5da00bc20ddc82e8351f6bc28d6f23db\",\"dweb:/ipfs/QmWG1RkHw5AtGdQZQpk4CZZc4HXp9bJVSf1xiR2yF9yAtP\"]},\"contracts/Strings.sol\":{\"keccak256\":\"0x250d60b0677654f4955e3cd43a8d9b41a8d7f2e6a8c222c28629c7c4abafa4f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8af0ca2b41a72909427f62226a438fc38e5c7b94057744d3a079da0a6973ff0d\",\"dweb:/ipfs/QmWUydSxPhJbJFqi8q6YvyxpUiMhGDSDDYxvubcSVjeuXG\"]},\"contracts/TakerTraitsLib.sol\":{\"keccak256\":\"0x25d36a3b3645561fc5b3f35c1e93fe60220bd15f9af896b0c6263a3269710fcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45597b42af6b436271ac8e6577255137557ff72d45883ef4bce01198016d4bb5\",\"dweb:/ipfs/QmamEQ6c5ffZqanpuX52PUf88wPu6Gp4T8LCVVzonAo1uS\"]}},\"version\":1}",
					"userdoc": {
						"events": {
							"BitInvalidatorUpdated(address,uint256,uint256)": {
								"notice": "Emitted when order with `useBitInvalidator` gets cancelled"
							},
							"OrderCancelled(bytes32)": {
								"notice": "Emitted when order without `useBitInvalidator` gets cancelled"
							},
							"OrderFilled(bytes32,uint256)": {
								"notice": "Emitted when order gets filled"
							}
						},
						"kind": "user",
						"methods": {
							"advanceEpoch(uint96,uint256)": {
								"notice": "Advances nonce by specified amount"
							},
							"and(uint256,bytes)": {
								"notice": "Calls every target with corresponding data"
							},
							"arbitraryStaticCall(address,bytes)": {
								"notice": "Performs an arbitrary call to target with data"
							},
							"bitInvalidatorForOrder(address,uint256)": {
								"notice": "See {IOrderMixin-bitInvalidatorForOrder}."
							},
							"bitsInvalidateForOrder(uint256,uint256)": {
								"notice": "See {IOrderMixin-bitsInvalidateForOrder}."
							},
							"cancelOrder(uint256,bytes32)": {
								"notice": "See {IOrderMixin-cancelOrder}."
							},
							"cancelOrders(uint256[],bytes32[])": {
								"notice": "See {IOrderMixin-cancelOrders}."
							},
							"checkPredicate(bytes)": {
								"notice": "See {IOrderMixin-checkPredicate}."
							},
							"epoch(address,uint96)": {
								"notice": "Returns nonce for `maker` and `series`"
							},
							"epochEquals(address,uint256,uint256)": {
								"notice": "Checks if `maker` has specified `makerEpoch` for `series`"
							},
							"eq(uint256,bytes)": {
								"notice": "Calls target with specified data and tests if it's equal to the value"
							},
							"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)": {
								"notice": "See {IOrderMixin-fillContractOrder}."
							},
							"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)": {
								"notice": "See {IOrderMixin-fillContractOrderArgs}."
							},
							"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)": {
								"notice": "See {IOrderMixin-fillOrder}."
							},
							"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)": {
								"notice": "See {IOrderMixin-fillOrderArgs}."
							},
							"gt(uint256,bytes)": {
								"notice": "Calls target with specified data and tests if it's bigger than value"
							},
							"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "See {IOrderMixin-hashOrder}."
							},
							"increaseEpoch(uint96)": {
								"notice": "Advances nonce by one"
							},
							"lt(uint256,bytes)": {
								"notice": "Calls target with specified data and tests if it's lower than value"
							},
							"not(bytes)": {
								"notice": "Calls target with specified data and tests if it's equal to 0"
							},
							"or(uint256,bytes)": {
								"notice": "Calls every target with corresponding data"
							},
							"pause()": {
								"notice": "Pauses all the trading functionality in the contract."
							},
							"permitAndCall(bytes,bytes)": {
								"notice": "Executes a permit for an ERC20 token and then a specified action in a single transaction."
							},
							"rawRemainingInvalidatorForOrder(address,bytes32)": {
								"notice": "See {IOrderMixin-rawRemainingInvalidatorForOrder}."
							},
							"remainingInvalidatorForOrder(address,bytes32)": {
								"notice": "See {IOrderMixin-remainingInvalidatorForOrder}."
							},
							"simulate(address,bytes)": {
								"notice": "See {IOrderMixin-simulate}."
							},
							"unpause()": {
								"notice": "Unpauses all the trading functionality in the contract."
							}
						},
						"notice": "Limit order protocol provides two different order types - Regular Limit Order - RFQ Order Both types provide similar order-fulfilling functionality. The difference is that regular order offers more customization options and features, while RFQ order is extremely gas efficient but without ability to customize. Regular limit order additionally supports - Execution predicates. Conditions for order execution are set with predicates. For example, expiration timestamp or block number, price for stop loss or take profit strategies. - Callbacks to notify maker on order execution See [OrderMixin](OrderMixin.md) for more details. RFQ orders supports - Expiration time - Cancelation by order id - Partial Fill (only once) See [OrderMixin](OrderMixin.md) for more details.",
						"version": 1
					}
				}
			},
			"contracts/MakerTraitsLib.sol": {
				"MakerTraitsLib": {
					"abi": [],
					"devdoc": {
						"details": "The MakerTraits type is a uint256 and different parts of the number are used to encode different traits. High bits are used for flags 255 bit `NO_PARTIAL_FILLS_FLAG`          - if set, the order does not allow partial fills 254 bit `ALLOW_MULTIPLE_FILLS_FLAG`      - if set, the order permits multiple fills 253 bit                                  - unused 252 bit `PRE_INTERACTION_CALL_FLAG`      - if set, the order requires pre-interaction call 251 bit `POST_INTERACTION_CALL_FLAG`     - if set, the order requires post-interaction call 250 bit `NEED_CHECK_EPOCH_MANAGER_FLAG`  - if set, the order requires to check the epoch manager 249 bit `HAS_EXTENSION_FLAG`             - if set, the order has extension(s) 248 bit `USE_PERMIT2_FLAG`               - if set, the order uses permit2 247 bit `UNWRAP_WETH_FLAG`               - if set, the order requires to unwrap WETH Low 200 bits are used for allowed sender, expiration, nonceOrEpoch, and series uint80 last 10 bytes of allowed sender address (0 if any) uint40 expiration timestamp (0 if none) uint40 nonce or epoch uint40 series",
						"kind": "dev",
						"methods": {},
						"title": "MakerTraitsLib",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220df039d439fa51d7fb3cbf231eea12e0c9166e9563171631375156b69b4b2a12064736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF SUB SWAP14 NUMBER SWAP16 0xA5 SAR PUSH32 0xB3CBF231EEA12E0C9166E9563171631375156B69B4B2A12064736F6C63430008 OR STOP CALLER ",
							"sourceMap": "1403:7334:23:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220df039d439fa51d7fb3cbf231eea12e0c9166e9563171631375156b69b4b2a12064736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF SUB SWAP14 NUMBER SWAP16 0xA5 SAR PUSH32 0xB3CBF231EEA12E0C9166E9563171631375156B69B4B2A12064736F6C63430008 OR STOP CALLER ",
							"sourceMap": "1403:7334:23:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"The MakerTraits type is a uint256 and different parts of the number are used to encode different traits. High bits are used for flags 255 bit `NO_PARTIAL_FILLS_FLAG`          - if set, the order does not allow partial fills 254 bit `ALLOW_MULTIPLE_FILLS_FLAG`      - if set, the order permits multiple fills 253 bit                                  - unused 252 bit `PRE_INTERACTION_CALL_FLAG`      - if set, the order requires pre-interaction call 251 bit `POST_INTERACTION_CALL_FLAG`     - if set, the order requires post-interaction call 250 bit `NEED_CHECK_EPOCH_MANAGER_FLAG`  - if set, the order requires to check the epoch manager 249 bit `HAS_EXTENSION_FLAG`             - if set, the order has extension(s) 248 bit `USE_PERMIT2_FLAG`               - if set, the order uses permit2 247 bit `UNWRAP_WETH_FLAG`               - if set, the order requires to unwrap WETH Low 200 bits are used for allowed sender, expiration, nonceOrEpoch, and series uint80 last 10 bytes of allowed sender address (0 if any) uint40 expiration timestamp (0 if none) uint40 nonce or epoch uint40 series\",\"kind\":\"dev\",\"methods\":{},\"title\":\"MakerTraitsLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library to manage and check MakerTraits, which are used to encode the maker's preferences for an order in a single uint256.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MakerTraitsLib.sol\":\"MakerTraitsLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/MakerTraitsLib.sol\":{\"keccak256\":\"0x2077d7a827c3ba2fa53c92b87bc586385c1310c3fe67edffe09c31a22900cbf9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49f7294dcb82d3acd8b7e2f95546cc85e24ceb7e3564a21ebf852544887cda3b\",\"dweb:/ipfs/QmPgzEiFpUHmGYfXF4EEdpCnb9TPnCpoF48bNMGw74vk1b\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "A library to manage and check MakerTraits, which are used to encode the maker's preferences for an order in a single uint256.",
						"version": 1
					}
				}
			},
			"contracts/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220647091a14c7997bca0259bed847d471430038578e063be00c7095ce3e850563a64736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x7091A14C79 SWAP8 0xBC LOG0 0x25 SWAP12 0xED DUP5 PUSH30 0x471430038578E063BE00C7095CE3E850563A64736F6C6343000817003300 ",
							"sourceMap": "280:28026:24:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220647091a14c7997bca0259bed847d471430038578e063be00c7095ce3e850563a64736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x7091A14C79 SWAP8 0xBC LOG0 0x25 SWAP12 0xED DUP5 PUSH30 0x471430038578E063BE00C7095CE3E850563A64736F6C6343000817003300 ",
							"sourceMap": "280:28026:24:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Math.sol\":\"Math\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Math.sol\":{\"keccak256\":\"0x38c3845ac06436b72e265731c3546e21b2e792a800af0c355f2039ceb85cdbfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c63508dd9c15bf8155a8c248518310ad06b1d3f8d42082866fc8ecaa37f8dfda\",\"dweb:/ipfs/QmXiJyT5zGCgPWeLrF1g3fpvbjMkVQBt9MSq3fiA97VsTj\"]},\"contracts/Panic.sol\":{\"keccak256\":\"0xec0c46048fd01751aa22ecddb66df20b702374fd68f3f4b3ae363782f6b31f9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d32d9af31bc44235f769cf820ec96fd3f0aea9e16a169b244a62e34e482d7d55\",\"dweb:/ipfs/Qmd4Lw5sSLQtfE2vEy29RHzffinDsHgN1pGaS8Eex1F8ks\"]},\"contracts/SafeCast.sol\":{\"keccak256\":\"0x16949b29739a3a20cf5ffe9ca22830a9f9b6deff16ee925827b19ddb5fbc127a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://768190c98439f96d5cad1900cc96e24f0749172192be8b5de885c426750c6ecd\",\"dweb:/ipfs/QmWPmxri7eCbAXC7p3qJ14ckPTUDkdE3wuyiMoc1pat5ft\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/MessageHashUtils.sol": {
				"MessageHashUtils": {
					"abi": [],
					"devdoc": {
						"details": "Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122065c9aef8effd6d1b4e0fa40cbb07f9995f4002c901e761b77727c2f52b59524964736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0xC9AEF8EFFD6D SHL 0x4E 0xF LOG4 0xC 0xBB SMOD 0xF9 SWAP10 PUSH0 BLOCKHASH MUL 0xC9 ADD 0xE7 PUSH2 0xB777 0x27 0xC2 CREATE2 0x2B MSIZE MSTORE 0x49 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "520:3729:25:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea264697066735822122065c9aef8effd6d1b4e0fa40cbb07f9995f4002c901e761b77727c2f52b59524964736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0xC9AEF8EFFD6D SHL 0x4E 0xF LOG4 0xC 0xBB SMOD 0xF9 SWAP10 PUSH0 BLOCKHASH MUL 0xC9 ADD 0xE7 PUSH2 0xB777 0x27 0xC2 CREATE2 0x2B MSIZE MSTORE 0x49 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "520:3729:25:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Math.sol\":{\"keccak256\":\"0x38c3845ac06436b72e265731c3546e21b2e792a800af0c355f2039ceb85cdbfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c63508dd9c15bf8155a8c248518310ad06b1d3f8d42082866fc8ecaa37f8dfda\",\"dweb:/ipfs/QmXiJyT5zGCgPWeLrF1g3fpvbjMkVQBt9MSq3fiA97VsTj\"]},\"contracts/MessageHashUtils.sol\":{\"keccak256\":\"0x8f285fdf7d54a65521a41ce2301f9be9727a5fe12e92e6c531255fb552f49450\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3ba231f35f2eff8d87c6a2a30a085844f9b94a4b568ad74777dc2a33d2849ba\",\"dweb:/ipfs/QmPs1ur6k3pkcHpbwh3aTR4tJsHctcY2Goze5VspFuRZfv\"]},\"contracts/Panic.sol\":{\"keccak256\":\"0xec0c46048fd01751aa22ecddb66df20b702374fd68f3f4b3ae363782f6b31f9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d32d9af31bc44235f769cf820ec96fd3f0aea9e16a169b244a62e34e482d7d55\",\"dweb:/ipfs/Qmd4Lw5sSLQtfE2vEy29RHzffinDsHgN1pGaS8Eex1F8ks\"]},\"contracts/SafeCast.sol\":{\"keccak256\":\"0x16949b29739a3a20cf5ffe9ca22830a9f9b6deff16ee925827b19ddb5fbc127a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://768190c98439f96d5cad1900cc96e24f0749172192be8b5de885c426750c6ecd\",\"dweb:/ipfs/QmWPmxri7eCbAXC7p3qJ14ckPTUDkdE3wuyiMoc1pat5ft\"]},\"contracts/SignedMath.sol\":{\"keccak256\":\"0xc07e2a3d5f315dafaec45606b60414be49cc913bd11ea1b1d8ee460e72f37445\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d5f6ea2b532028ac1b221ce2e33bfbf71d2ef43b318db47c029ea7b1760d4df\",\"dweb:/ipfs/QmdxY44UJdhcgVZ7YCm6um4FKBU1PvL925KgefxD7onTRw\"]},\"contracts/Strings.sol\":{\"keccak256\":\"0x250d60b0677654f4955e3cd43a8d9b41a8d7f2e6a8c222c28629c7c4abafa4f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8af0ca2b41a72909427f62226a438fc38e5c7b94057744d3a079da0a6973ff0d\",\"dweb:/ipfs/QmWUydSxPhJbJFqi8q6YvyxpUiMhGDSDDYxvubcSVjeuXG\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/OffsetsLib.sol": {
				"OffsetsLib": {
					"abi": [
						{
							"inputs": [],
							"name": "OffsetOutOfBounds",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "A library for retrieving values by offsets from a concatenated calldata.",
						"errors": {
							"OffsetOutOfBounds()": [
								{
									"details": "Error to be thrown when the offset is out of bounds."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "OffsetsLib",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220de7a77d4718579f9687fbded0d5176e452c769ae0505574dac93a96b8f60f22364736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE PUSH27 0x77D4718579F9687FBDED0D5176E452C769AE0505574DAC93A96B8F PUSH1 0xF2 0x23 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "188:1921:26:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220de7a77d4718579f9687fbded0d5176e452c769ae0505574dac93a96b8f60f22364736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE PUSH27 0x77D4718579F9687FBDED0D5176E452C769AE0505574DAC93A96B8F PUSH1 0xF2 0x23 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "188:1921:26:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OffsetOutOfBounds\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"A library for retrieving values by offsets from a concatenated calldata.\",\"errors\":{\"OffsetOutOfBounds()\":[{\"details\":\"Error to be thrown when the offset is out of bounds.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"OffsetsLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OffsetsLib.sol\":\"OffsetsLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/OffsetsLib.sol\":{\"keccak256\":\"0xd8218c3b9241501b41fc0f0b579dce00a0b81603582e11f3da28881ed00801a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://039b36fea4d1d12fe0d02ac26bdefd959c6fe447bd73ea0599a49e08f1712999\",\"dweb:/ipfs/QmcyPNSDc2RjksmwYPY3jGAjD9bEhBAWi3qKYWNvtHHZT6\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/OnlyWethReceiver.sol": {
				"OnlyWethReceiver": {
					"abi": [
						{
							"inputs": [],
							"name": "EthDepositRejected",
							"type": "error"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"details": "Abstract contract extending EthReceiver to accept only ETH deposits from a specified WETH contract. This contract ensures that only wrapped ETH (WETH) can be deposited, rejecting all other direct ETH transfers.",
						"errors": {
							"EthDepositRejected()": [
								{
									"details": "Error thrown when an ETH deposit from an EOA is attempted."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Sets the WETH contract address during construction.",
								"params": {
									"weth": "Address of the WETH contract."
								}
							}
						},
						"title": "OnlyWethReceiver",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EthDepositRejected\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Abstract contract extending EthReceiver to accept only ETH deposits from a specified WETH contract. This contract ensures that only wrapped ETH (WETH) can be deposited, rejecting all other direct ETH transfers.\",\"errors\":{\"EthDepositRejected()\":[{\"details\":\"Error thrown when an ETH deposit from an EOA is attempted.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets the WETH contract address during construction.\",\"params\":{\"weth\":\"Address of the WETH contract.\"}}},\"title\":\"OnlyWethReceiver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OnlyWethReceiver.sol\":\"OnlyWethReceiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/EthReceiver.sol\":{\"keccak256\":\"0x7fbf52c64fd6e03b2f5d977aac7d2b377fc240495d09e47642dc4ef301d173c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8dfcabf097c3a4e0819d387acc40b135aa9d59320971c2d648e399f77fedd7fc\",\"dweb:/ipfs/QmQreuBPfDUkauL9FTFY9dLe7vGyLsQoDA5DHZrA1u9SZS\"]},\"contracts/OnlyWethReceiver.sol\":{\"keccak256\":\"0x253e18562bbac1277e92aff67a7c8911067b88b38c4f6edeec2e2f4c5cdb29dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cfe07e3be8b962f8b07211e23c2bfeb50a3d46cc0b6e4067f5841ef434f9601f\",\"dweb:/ipfs/Qmed6EpjdafZ1rWYiEXXTRbySBu1GC8oCr6CShadpWYHnL\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/OrderLib.sol": {
				"OrderLib": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidExtensionHash",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MissingOrderExtension",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "UnexpectedOrderExtension",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "The library provides common functionality for processing and manipulating limit orders. It provides functionality to calculate and verify order hashes, calculate trade amounts, and validate extension data associated with orders. The library also contains helper methods to get the receiver of an order and call getter functions.",
						"errors": {
							"InvalidExtensionHash()": [
								{
									"details": "Error to be thrown when the order extension hash is invalid."
								}
							],
							"MissingOrderExtension()": [
								{
									"details": "Error to be thrown when the extension data of an order is missing."
								}
							],
							"UnexpectedOrderExtension()": [
								{
									"details": "Error to be thrown when the order has an unexpected extension."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_LIMIT_ORDER_TYPEHASH": {
								"details": "The typehash of the order struct."
							}
						},
						"title": "OrderLib",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220b39cb2088bbefc1581df5d730592c8e1c14c4c6dd7e74ec10caff23b582f465064736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 SWAP13 0xB2 ADDMOD DUP12 0xBE 0xFC ISZERO DUP2 0xDF 0x5D PUSH20 0x592C8E1C14C4C6DD7E74EC10CAFF23B582F4650 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "637:6228:28:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220b39cb2088bbefc1581df5d730592c8e1c14c4c6dd7e74ec10caff23b582f465064736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 SWAP13 0xB2 ADDMOD DUP12 0xBE 0xFC ISZERO DUP2 0xDF 0x5D PUSH20 0x592C8E1C14C4C6DD7E74EC10CAFF23B582F4650 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "637:6228:28:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidExtensionHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingOrderExtension\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedOrderExtension\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"The library provides common functionality for processing and manipulating limit orders. It provides functionality to calculate and verify order hashes, calculate trade amounts, and validate extension data associated with orders. The library also contains helper methods to get the receiver of an order and call getter functions.\",\"errors\":{\"InvalidExtensionHash()\":[{\"details\":\"Error to be thrown when the order extension hash is invalid.\"}],\"MissingOrderExtension()\":[{\"details\":\"Error to be thrown when the extension data of an order is missing.\"}],\"UnexpectedOrderExtension()\":[{\"details\":\"Error to be thrown when the order has an unexpected extension.\"}]},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_LIMIT_ORDER_TYPEHASH\":{\"details\":\"The typehash of the order struct.\"}},\"title\":\"OrderLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OrderLib.sol\":\"OrderLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/AddressLib.sol\":{\"keccak256\":\"0x5dbbd2513216eca9660b83e356b1b50d6dd5f854c0106be6bc7df3fff01821d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71c5a3b82d7cb1c060885ed6a11710fe216af832d30b6dd30d051635e6c4e586\",\"dweb:/ipfs/QmWYnTddAxLhKQq58wwya9NUkhudFoYamGZpcuHc6XdAMR\"]},\"contracts/AmountCalculatorLib.sol\":{\"keccak256\":\"0xb1fbc0d0951abce2e6d07b021ab03af781de5fa6b5002422d183ce81d9f2ef32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc4475dfc44f050aa4ee8b7335aa512a02669055639a0dbf267f81376a54cd89\",\"dweb:/ipfs/QmSVm5eyL8sPJGxc3oZmmZCeK5aonjr1M7qHUdtpAGHX4G\"]},\"contracts/ECDSA.sol\":{\"keccak256\":\"0xa6e29ba3b3f26b1d82b2f76c349038e314c4bcd7930ec8b2255022d8b684bd78\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f07a89f3ab957b78bab77074d61d0149d3b49ae1f9fa3b9b704cfdda974897ec\",\"dweb:/ipfs/QmbS9FUMWM1sDVin9R4A8ZG4Z4EukgNmUM59PnvzQ1Bhd3\"]},\"contracts/ExtensionLib.sol\":{\"keccak256\":\"0x054ca2ebc73bc4dd62816bd9a3d384b89454e5e65d9d83c66637c578789d96ca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9dc6a0163be726abd9732ac63c31f2b99a8f9505ae6280e9d2fa13150990d113\",\"dweb:/ipfs/Qmd6CCRPTWE13WPEMTZZqisDkMQXdWm99P5N66CcT4uGaj\"]},\"contracts/IAmountGetter.sol\":{\"keccak256\":\"0x877aa31c7903e60289a1ba750e583113b1f317a9dfaeefcbf7fd19b4c62dbd98\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7bbeceff66893fba29928459f2afa4546d19aaacdc3e6450ca51fb216874a86\",\"dweb:/ipfs/QmYny4mRyuGRoRGNmoqYnpU6um3KhoTmfWs1xvLnLLEs3f\"]},\"contracts/IERC1271.sol\":{\"keccak256\":\"0xa46ecff1d8a61c56161d3c1ec3cf10b62595bb8dc6bc2bd7ebb2eab2fda06c9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://443beef6470857f7c919bc98c6dc21bd2031742398e156cf29e8e873099d4f4f\",\"dweb:/ipfs/QmZfdVdBmJJi1z7mtjHTiaChPxxNHTjJrTwU3c9Br4GM4m\"]},\"contracts/IOrderMixin.sol\":{\"keccak256\":\"0x34ead0b58bd2640652ad6366b4c4ea1370b66d2dd21ffb5d5b831ed54fc9cc71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65b82f8298ed8d9cb9eb3604af3c15129cffa009c5b0150f7f42154093d9ce96\",\"dweb:/ipfs/QmaQoQNVTiJPKB6MVwtemAWrwyKEKR5fLqy7vyfm8oqBEx\"]},\"contracts/MakerTraitsLib.sol\":{\"keccak256\":\"0x2077d7a827c3ba2fa53c92b87bc586385c1310c3fe67edffe09c31a22900cbf9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49f7294dcb82d3acd8b7e2f95546cc85e24ceb7e3564a21ebf852544887cda3b\",\"dweb:/ipfs/QmPgzEiFpUHmGYfXF4EEdpCnb9TPnCpoF48bNMGw74vk1b\"]},\"contracts/OffsetsLib.sol\":{\"keccak256\":\"0xd8218c3b9241501b41fc0f0b579dce00a0b81603582e11f3da28881ed00801a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://039b36fea4d1d12fe0d02ac26bdefd959c6fe447bd73ea0599a49e08f1712999\",\"dweb:/ipfs/QmcyPNSDc2RjksmwYPY3jGAjD9bEhBAWi3qKYWNvtHHZT6\"]},\"contracts/OrderLib.sol\":{\"keccak256\":\"0x237317b4a2bec36853fabe0dc2647d211730ea0548c28cf166fec824bb5dc24d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b4906e36c77ba5c37d0d47afd3fa55b511f6a52afbab6470c435d44f872f22d\",\"dweb:/ipfs/QmTAAEzZjuAqo5PNNpM64acaN8yTzv8jzxaUZNXtP2yS8f\"]},\"contracts/TakerTraitsLib.sol\":{\"keccak256\":\"0x25d36a3b3645561fc5b3f35c1e93fe60220bd15f9af896b0c6263a3269710fcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45597b42af6b436271ac8e6577255137557ff72d45883ef4bce01198016d4bb5\",\"dweb:/ipfs/QmamEQ6c5ffZqanpuX52PUf88wPu6Gp4T8LCVVzonAo1uS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/OrderMixin.sol": {
				"OrderMixin": {
					"abi": [
						{
							"inputs": [],
							"name": "AdvanceEpochFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ArbitraryStaticCallFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BadSignature",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BitInvalidatedOrder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ETHTransferFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EpochManagerAndBitInvalidatorsAreIncompatible",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EthDepositRejected",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMsgValue",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidPermit2Transfer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidatedOrder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MakingAmountTooLow",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MismatchArraysLengths",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OrderExpired",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OrderIsNotSuitableForMassInvalidation",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "PartialFillNotAllowed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Permit2TransferAmountTooHigh",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "PredicateIsNotTrue",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "PrivateOrder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ReentrancyDetected",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RemainingInvalidatedOrder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SafeTransferFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SafeTransferFromFailed",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "res",
									"type": "bytes"
								}
							],
							"name": "SimulationResults",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SwapWithZeroAmount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TakingAmountExceeded",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TakingAmountTooHigh",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromMakerToTakerFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromTakerToMakerFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "WrongSeriesNonce",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotIndex",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotValue",
									"type": "uint256"
								}
							],
							"name": "BitInvalidatorUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "series",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "newEpoch",
									"type": "uint256"
								}
							],
							"name": "EpochIncreased",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"name": "OrderCancelled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "remainingAmount",
									"type": "uint256"
								}
							],
							"name": "OrderFilled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint96",
									"name": "series",
									"type": "uint96"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "advanceEpoch",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "offsets",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "and",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "arbitraryStaticCall",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slot",
									"type": "uint256"
								}
							],
							"name": "bitInvalidatorForOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "MakerTraits",
									"name": "makerTraits",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "additionalMask",
									"type": "uint256"
								}
							],
							"name": "bitsInvalidateForOrder",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "MakerTraits",
									"name": "makerTraits",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"name": "cancelOrder",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "MakerTraits[]",
									"name": "makerTraits",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes32[]",
									"name": "orderHashes",
									"type": "bytes32[]"
								}
							],
							"name": "cancelOrders",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "predicate",
									"type": "bytes"
								}
							],
							"name": "checkPredicate",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "uint96",
									"name": "series",
									"type": "uint96"
								}
							],
							"name": "epoch",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "series",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "makerEpoch",
									"type": "uint256"
								}
							],
							"name": "epochEquals",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "eq",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "TakerTraits",
									"name": "takerTraits",
									"type": "uint256"
								}
							],
							"name": "fillContractOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "TakerTraits",
									"name": "takerTraits",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "args",
									"type": "bytes"
								}
							],
							"name": "fillContractOrderArgs",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "vs",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "TakerTraits",
									"name": "takerTraits",
									"type": "uint256"
								}
							],
							"name": "fillOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "vs",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "TakerTraits",
									"name": "takerTraits",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "args",
									"type": "bytes"
								}
							],
							"name": "fillOrderArgs",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "gt",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "salt",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "maker",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "receiver",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "makerAsset",
											"type": "uint256"
										},
										{
											"internalType": "Address",
											"name": "takerAsset",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "makingAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "takingAmount",
											"type": "uint256"
										},
										{
											"internalType": "MakerTraits",
											"name": "makerTraits",
											"type": "uint256"
										}
									],
									"internalType": "struct IOrderMixin.Order",
									"name": "order",
									"type": "tuple"
								}
							],
							"name": "hashOrder",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint96",
									"name": "series",
									"type": "uint96"
								}
							],
							"name": "increaseEpoch",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "lt",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "not",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "offsets",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "or",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "permit",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "action",
									"type": "bytes"
								}
							],
							"name": "permitAndCall",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"name": "rawRemainingInvalidatorForOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "orderHash",
									"type": "bytes32"
								}
							],
							"name": "remainingInvalidatorForOrder",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "simulate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"errors": {
							"BitInvalidatedOrder()": [
								{
									"details": "The error is thrown when an attempt is made to invalidate an already invalidated entity."
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"EthDepositRejected()": [
								{
									"details": "Error thrown when an ETH deposit from an EOA is attempted."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"RemainingInvalidatedOrder()": [
								{
									"details": "The error is thrown when an attempt is made to invalidate an already invalidated entity."
								}
							]
						},
						"events": {
							"BitInvalidatorUpdated(address,uint256,uint256)": {
								"params": {
									"maker": "Maker address",
									"slotIndex": "Slot index that was updated",
									"slotValue": "New slot value"
								}
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"OrderCancelled(bytes32)": {
								"params": {
									"orderHash": "Hash of the order"
								}
							},
							"OrderFilled(bytes32,uint256)": {
								"params": {
									"orderHash": "Hash of the order",
									"remainingAmount": "Amount of the maker asset that remains to be filled"
								}
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"and(uint256,bytes)": {
								"returns": {
									"_0": "Result True if calls to all targets returned True. Otherwise, false"
								}
							},
							"arbitraryStaticCall(address,bytes)": {
								"returns": {
									"_0": "Result Bytes transmuted to uint256"
								}
							},
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							},
							"epochEquals(address,uint256,uint256)": {
								"returns": {
									"_0": "Result True if `maker` has specified epoch. Otherwise, false"
								}
							},
							"eq(uint256,bytes)": {
								"params": {
									"value": "Value to test"
								},
								"returns": {
									"_0": "Result True if call to target returns the same value as `value`. Otherwise, false"
								}
							},
							"gt(uint256,bytes)": {
								"params": {
									"value": "Value to test"
								},
								"returns": {
									"_0": "Result True if call to target returns value which is bigger than `value`. Otherwise, false"
								}
							},
							"lt(uint256,bytes)": {
								"params": {
									"value": "Value to test"
								},
								"returns": {
									"_0": "Result True if call to target returns value which is lower than `value`. Otherwise, false"
								}
							},
							"not(bytes)": {
								"returns": {
									"_0": "Result True if call to target returns 0. Otherwise, false"
								}
							},
							"or(uint256,bytes)": {
								"returns": {
									"_0": "Result True if call to any target returned True. Otherwise, false"
								}
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"permitAndCall(bytes,bytes)": {
								"params": {
									"action": "The data representing the action to be executed after the permit.",
									"permit": "ERC20 token address (20 bytes) concatenated with the permit data, allowing this contract to spend the token. Format: [token address (20 bytes)][permit data]"
								}
							}
						},
						"title": "Limit Order mixin",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AdvanceEpochFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArbitraryStaticCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BitInvalidatedOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochManagerAndBitInvalidatorsAreIncompatible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthDepositRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPermit2Transfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidatedOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MakingAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchArraysLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderIsNotSuitableForMassInvalidation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PartialFillNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Permit2TransferAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PredicateIsNotTrue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrivateOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyDetected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemainingInvalidatedOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"name\":\"SimulationResults\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapWithZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakingAmountExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakingAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromMakerToTakerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromTakerToMakerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongSeriesNonce\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotValue\",\"type\":\"uint256\"}],\"name\":\"BitInvalidatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpoch\",\"type\":\"uint256\"}],\"name\":\"EpochIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"series\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"advanceEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"and\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"arbitraryStaticCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"bitInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalMask\",\"type\":\"uint256\"}],\"name\":\"bitsInvalidateForOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits[]\",\"name\":\"makerTraits\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"orderHashes\",\"type\":\"bytes32[]\"}],\"name\":\"cancelOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"}],\"name\":\"checkPredicate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"series\",\"type\":\"uint96\"}],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerEpoch\",\"type\":\"uint256\"}],\"name\":\"epochEquals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"eq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"}],\"name\":\"fillContractOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"fillContractOrderArgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"fillOrderArgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"gt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"series\",\"type\":\"uint96\"}],\"name\":\"increaseEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"not\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"or\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"action\",\"type\":\"bytes\"}],\"name\":\"permitAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"rawRemainingInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"remainingInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"simulate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"BitInvalidatedOrder()\":[{\"details\":\"The error is thrown when an attempt is made to invalidate an already invalidated entity.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"EthDepositRejected()\":[{\"details\":\"Error thrown when an ETH deposit from an EOA is attempted.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"RemainingInvalidatedOrder()\":[{\"details\":\"The error is thrown when an attempt is made to invalidate an already invalidated entity.\"}]},\"events\":{\"BitInvalidatorUpdated(address,uint256,uint256)\":{\"params\":{\"maker\":\"Maker address\",\"slotIndex\":\"Slot index that was updated\",\"slotValue\":\"New slot value\"}},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"OrderCancelled(bytes32)\":{\"params\":{\"orderHash\":\"Hash of the order\"}},\"OrderFilled(bytes32,uint256)\":{\"params\":{\"orderHash\":\"Hash of the order\",\"remainingAmount\":\"Amount of the maker asset that remains to be filled\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"and(uint256,bytes)\":{\"returns\":{\"_0\":\"Result True if calls to all targets returned True. Otherwise, false\"}},\"arbitraryStaticCall(address,bytes)\":{\"returns\":{\"_0\":\"Result Bytes transmuted to uint256\"}},\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"},\"epochEquals(address,uint256,uint256)\":{\"returns\":{\"_0\":\"Result True if `maker` has specified epoch. Otherwise, false\"}},\"eq(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns the same value as `value`. Otherwise, false\"}},\"gt(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is bigger than `value`. Otherwise, false\"}},\"lt(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is lower than `value`. Otherwise, false\"}},\"not(bytes)\":{\"returns\":{\"_0\":\"Result True if call to target returns 0. Otherwise, false\"}},\"or(uint256,bytes)\":{\"returns\":{\"_0\":\"Result True if call to any target returned True. Otherwise, false\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permitAndCall(bytes,bytes)\":{\"params\":{\"action\":\"The data representing the action to be executed after the permit.\",\"permit\":\"ERC20 token address (20 bytes) concatenated with the permit data, allowing this contract to spend the token. Format: [token address (20 bytes)][permit data]\"}}},\"title\":\"Limit Order mixin\",\"version\":1},\"userdoc\":{\"events\":{\"BitInvalidatorUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when order with `useBitInvalidator` gets cancelled\"},\"OrderCancelled(bytes32)\":{\"notice\":\"Emitted when order without `useBitInvalidator` gets cancelled\"},\"OrderFilled(bytes32,uint256)\":{\"notice\":\"Emitted when order gets filled\"}},\"kind\":\"user\",\"methods\":{\"advanceEpoch(uint96,uint256)\":{\"notice\":\"Advances nonce by specified amount\"},\"and(uint256,bytes)\":{\"notice\":\"Calls every target with corresponding data\"},\"arbitraryStaticCall(address,bytes)\":{\"notice\":\"Performs an arbitrary call to target with data\"},\"bitInvalidatorForOrder(address,uint256)\":{\"notice\":\"See {IOrderMixin-bitInvalidatorForOrder}.\"},\"bitsInvalidateForOrder(uint256,uint256)\":{\"notice\":\"See {IOrderMixin-bitsInvalidateForOrder}.\"},\"cancelOrder(uint256,bytes32)\":{\"notice\":\"See {IOrderMixin-cancelOrder}.\"},\"cancelOrders(uint256[],bytes32[])\":{\"notice\":\"See {IOrderMixin-cancelOrders}.\"},\"checkPredicate(bytes)\":{\"notice\":\"See {IOrderMixin-checkPredicate}.\"},\"epoch(address,uint96)\":{\"notice\":\"Returns nonce for `maker` and `series`\"},\"epochEquals(address,uint256,uint256)\":{\"notice\":\"Checks if `maker` has specified `makerEpoch` for `series`\"},\"eq(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to the value\"},\"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)\":{\"notice\":\"See {IOrderMixin-fillContractOrder}.\"},\"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)\":{\"notice\":\"See {IOrderMixin-fillContractOrderArgs}.\"},\"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)\":{\"notice\":\"See {IOrderMixin-fillOrder}.\"},\"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)\":{\"notice\":\"See {IOrderMixin-fillOrderArgs}.\"},\"gt(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's bigger than value\"},\"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"See {IOrderMixin-hashOrder}.\"},\"increaseEpoch(uint96)\":{\"notice\":\"Advances nonce by one\"},\"lt(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's lower than value\"},\"not(bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to 0\"},\"or(uint256,bytes)\":{\"notice\":\"Calls every target with corresponding data\"},\"permitAndCall(bytes,bytes)\":{\"notice\":\"Executes a permit for an ERC20 token and then a specified action in a single transaction.\"},\"rawRemainingInvalidatorForOrder(address,bytes32)\":{\"notice\":\"See {IOrderMixin-rawRemainingInvalidatorForOrder}.\"},\"remainingInvalidatorForOrder(address,bytes32)\":{\"notice\":\"See {IOrderMixin-remainingInvalidatorForOrder}.\"},\"simulate(address,bytes)\":{\"notice\":\"See {IOrderMixin-simulate}.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OrderMixin.sol\":\"OrderMixin\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/AddressLib.sol\":{\"keccak256\":\"0x5dbbd2513216eca9660b83e356b1b50d6dd5f854c0106be6bc7df3fff01821d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71c5a3b82d7cb1c060885ed6a11710fe216af832d30b6dd30d051635e6c4e586\",\"dweb:/ipfs/QmWYnTddAxLhKQq58wwya9NUkhudFoYamGZpcuHc6XdAMR\"]},\"contracts/AmountCalculatorLib.sol\":{\"keccak256\":\"0xb1fbc0d0951abce2e6d07b021ab03af781de5fa6b5002422d183ce81d9f2ef32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc4475dfc44f050aa4ee8b7335aa512a02669055639a0dbf267f81376a54cd89\",\"dweb:/ipfs/QmSVm5eyL8sPJGxc3oZmmZCeK5aonjr1M7qHUdtpAGHX4G\"]},\"contracts/BitInvalidatorLib.sol\":{\"keccak256\":\"0xd82e4b69af3f9883f6ac9560965a763a04f79e583b31b2f37982e24f44e25bcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ccf59b63d1721e65dcd41283a634874824689b2f7a02fd3f98d2fde03f07c2e4\",\"dweb:/ipfs/QmfA5ZSffvaaYCw5T8G11Bj3tGWcupx2ZBSJNZD6cDKrCq\"]},\"contracts/Context.sol\":{\"keccak256\":\"0x28ad9de5e26095f685a085591178af7aeac1427af1bf442986b5aee0a5b2a14a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad3864801aabbcc6f52361a1b86a3d4d342e283cc2036c47a3ef2df7e4a3c51\",\"dweb:/ipfs/QmezNWJGoPBwtHjsQae7dbqjeZgpbB2cHFE5nFBBzGvJFR\"]},\"contracts/ECDSA.sol\":{\"keccak256\":\"0xa6e29ba3b3f26b1d82b2f76c349038e314c4bcd7930ec8b2255022d8b684bd78\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f07a89f3ab957b78bab77074d61d0149d3b49ae1f9fa3b9b704cfdda974897ec\",\"dweb:/ipfs/QmbS9FUMWM1sDVin9R4A8ZG4Z4EukgNmUM59PnvzQ1Bhd3\"]},\"contracts/EIP712.sol\":{\"keccak256\":\"0xb4c232fe0a8def0f88b00e6ebce12ab4813f0d642c328132b7c836c1922ce2b1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ae9d0cf798117e2bd4da0ddccf456866d3fc5ffa147cd4172f15af965aa561a7\",\"dweb:/ipfs/QmWmgX4Ug6XbaPTMV6U921Za9QvzYtoWa3kCTo1eX47moq\"]},\"contracts/Errors.sol\":{\"keccak256\":\"0x9809fef666ce40e434d4019d25e06c69e7ad2aad7de59966a426cdee8b5a467e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://160977820c842b4d417f26f113a42027001ed3d23e398560f3f41316f31a4705\",\"dweb:/ipfs/QmPdqyve3ryoj3Hw52SG59LBpLhw8jNff6otau6iUKyQJh\"]},\"contracts/EthReceiver.sol\":{\"keccak256\":\"0x7fbf52c64fd6e03b2f5d977aac7d2b377fc240495d09e47642dc4ef301d173c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8dfcabf097c3a4e0819d387acc40b135aa9d59320971c2d648e399f77fedd7fc\",\"dweb:/ipfs/QmQreuBPfDUkauL9FTFY9dLe7vGyLsQoDA5DHZrA1u9SZS\"]},\"contracts/ExtensionLib.sol\":{\"keccak256\":\"0x054ca2ebc73bc4dd62816bd9a3d384b89454e5e65d9d83c66637c578789d96ca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9dc6a0163be726abd9732ac63c31f2b99a8f9505ae6280e9d2fa13150990d113\",\"dweb:/ipfs/Qmd6CCRPTWE13WPEMTZZqisDkMQXdWm99P5N66CcT4uGaj\"]},\"contracts/IAmountGetter.sol\":{\"keccak256\":\"0x877aa31c7903e60289a1ba750e583113b1f317a9dfaeefcbf7fd19b4c62dbd98\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7bbeceff66893fba29928459f2afa4546d19aaacdc3e6450ca51fb216874a86\",\"dweb:/ipfs/QmYny4mRyuGRoRGNmoqYnpU6um3KhoTmfWs1xvLnLLEs3f\"]},\"contracts/IDaiLikePermit.sol\":{\"keccak256\":\"0x0bcc9c886acb32f5664e3bfd0640e6fc1de6525b8f6103f25906d040d054ce07\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://551e3b7d18d5e83727491f6749643a9a1e9a2e253a1a9be56eeb44e4c1b13876\",\"dweb:/ipfs/QmSpGRSD3DDP1EbBbXDPqAbSP58roEvCsosMQCDtSDnEBa\"]},\"contracts/IERC1271.sol\":{\"keccak256\":\"0xa46ecff1d8a61c56161d3c1ec3cf10b62595bb8dc6bc2bd7ebb2eab2fda06c9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://443beef6470857f7c919bc98c6dc21bd2031742398e156cf29e8e873099d4f4f\",\"dweb:/ipfs/QmZfdVdBmJJi1z7mtjHTiaChPxxNHTjJrTwU3c9Br4GM4m\"]},\"contracts/IERC20.sol\":{\"keccak256\":\"0x91104f4bcc877f2506e4485b871efe0a6beb5c1ef7de9c374d99d75289905905\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57a7ecbec5ff542c117d36c7487386b5653ad21d0a83414e859d4202e069b36f\",\"dweb:/ipfs/QmaPocSUaysdjd1Ksa5kttxRHxhA7XWd6HrQ9teLFRyR6W\"]},\"contracts/IERC20Permit.sol\":{\"keccak256\":\"0x08d82b52e80c1a83f792c519388ca1ae86ae441bdfbd7d84addc82ef9c499a9e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a5449dde3b5541f3f653b352bfa0aa4f3e91ab24a110106319baa83940f540a5\",\"dweb:/ipfs/QmUuadcLdSPtqMuuhBgkdAZHrE3tx5rdQ7HCXCsa8RDaTU\"]},\"contracts/IERC5267.sol\":{\"keccak256\":\"0xeb1cfabddcb4460c6145294ffebe6e15277f53923f488905ef0b18f8e4b7f1d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8419131499a0f3018b6596362238b47abe33e842798cc313494c6fd3081c1a63\",\"dweb:/ipfs/QmPRvMVqAteuCA1jzTUUz5AZLGuCTdVLF2x9Nw4nE1KiVS\"]},\"contracts/IERC7597Permit.sol\":{\"keccak256\":\"0x550ff037524afe9ef46d2c54ed59f4048c4216122e80da3b17872e05c163a74e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40df00df81d4a4d2a78105bf5b86694037d885abf30e1e47e286b6e3310bdf48\",\"dweb:/ipfs/QmVqmS8BpSMV8PeiUme1tNDq48zfn71XYxWhb6fLtxCT6f\"]},\"contracts/IOrderMixin.sol\":{\"keccak256\":\"0x34ead0b58bd2640652ad6366b4c4ea1370b66d2dd21ffb5d5b831ed54fc9cc71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65b82f8298ed8d9cb9eb3604af3c15129cffa009c5b0150f7f42154093d9ce96\",\"dweb:/ipfs/QmaQoQNVTiJPKB6MVwtemAWrwyKEKR5fLqy7vyfm8oqBEx\"]},\"contracts/IPermit2.sol\":{\"keccak256\":\"0x79e985eddaf616078cde10431fb615b577ba83b96ca5f4161cb82939a787a195\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a1d3243656736b7e4422a6eb7bbac982760f99674b9d80286e5bf45f1fe04376\",\"dweb:/ipfs/QmacX52RVqLnUgWxji9FkfFSZeGnV6qdxkkX5kMxakYRyW\"]},\"contracts/IPostInteraction.sol\":{\"keccak256\":\"0x34e475bf78d8978a6a6ac660f4c4357808bff2b27613dab281b562dc9fda907e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3c35113e8dcba3fc49650e2b48cd1a14e23050b66c748d2323898a0117a01b58\",\"dweb:/ipfs/QmYuhGpycuzAcVvcHt8Z4M7GPYt1XSwd1VvKtyKyeb1e8V\"]},\"contracts/IPreInteraction.sol\":{\"keccak256\":\"0xb2deb1dafa99ec8259fe651e8b39f5cfff725143c0394e4eb359729a399a2a55\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d07a0f88bad2704d4a1d15a8ee50cc997b830eef82153483d13c624101da8fdb\",\"dweb:/ipfs/QmSv8ZY7zmMJ5pAWaWVzDDN4kn5cPeBvVM61o4nja17u75\"]},\"contracts/ITakerInteraction.sol\":{\"keccak256\":\"0xc6c79fdf0d75b02c9ebc50a12c274c2fe8418fcbcdd49359ae58b6115859c5fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c73fc4a6102e51ced68750cf515daff7d7a4b9f4b380c92c66fc4a086dd4bb07\",\"dweb:/ipfs/QmbNmr96WaNzrvbiz6YZwQGLiCck5u4ujWx8LfRfK9wCY1\"]},\"contracts/IWETH.sol\":{\"keccak256\":\"0x2dc6d61d66f1881a6c273b5f30f9a82e6eda4988c7aeaf0b26549a5e10c9fcb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1695d9fd49960e732d2228a304fe9bc221439293e940fdcb9c17419ccafdcfc1\",\"dweb:/ipfs/QmPZrdz4icyWQeR5Yf1zDQnpH8MmYiHyKofVcwvwNADjRh\"]},\"contracts/MakerTraitsLib.sol\":{\"keccak256\":\"0x2077d7a827c3ba2fa53c92b87bc586385c1310c3fe67edffe09c31a22900cbf9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49f7294dcb82d3acd8b7e2f95546cc85e24ceb7e3564a21ebf852544887cda3b\",\"dweb:/ipfs/QmPgzEiFpUHmGYfXF4EEdpCnb9TPnCpoF48bNMGw74vk1b\"]},\"contracts/Math.sol\":{\"keccak256\":\"0x38c3845ac06436b72e265731c3546e21b2e792a800af0c355f2039ceb85cdbfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c63508dd9c15bf8155a8c248518310ad06b1d3f8d42082866fc8ecaa37f8dfda\",\"dweb:/ipfs/QmXiJyT5zGCgPWeLrF1g3fpvbjMkVQBt9MSq3fiA97VsTj\"]},\"contracts/MessageHashUtils.sol\":{\"keccak256\":\"0x8f285fdf7d54a65521a41ce2301f9be9727a5fe12e92e6c531255fb552f49450\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3ba231f35f2eff8d87c6a2a30a085844f9b94a4b568ad74777dc2a33d2849ba\",\"dweb:/ipfs/QmPs1ur6k3pkcHpbwh3aTR4tJsHctcY2Goze5VspFuRZfv\"]},\"contracts/OffsetsLib.sol\":{\"keccak256\":\"0xd8218c3b9241501b41fc0f0b579dce00a0b81603582e11f3da28881ed00801a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://039b36fea4d1d12fe0d02ac26bdefd959c6fe447bd73ea0599a49e08f1712999\",\"dweb:/ipfs/QmcyPNSDc2RjksmwYPY3jGAjD9bEhBAWi3qKYWNvtHHZT6\"]},\"contracts/OnlyWethReceiver.sol\":{\"keccak256\":\"0x253e18562bbac1277e92aff67a7c8911067b88b38c4f6edeec2e2f4c5cdb29dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cfe07e3be8b962f8b07211e23c2bfeb50a3d46cc0b6e4067f5841ef434f9601f\",\"dweb:/ipfs/Qmed6EpjdafZ1rWYiEXXTRbySBu1GC8oCr6CShadpWYHnL\"]},\"contracts/OrderLib.sol\":{\"keccak256\":\"0x237317b4a2bec36853fabe0dc2647d211730ea0548c28cf166fec824bb5dc24d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b4906e36c77ba5c37d0d47afd3fa55b511f6a52afbab6470c435d44f872f22d\",\"dweb:/ipfs/QmTAAEzZjuAqo5PNNpM64acaN8yTzv8jzxaUZNXtP2yS8f\"]},\"contracts/OrderMixin.sol\":{\"keccak256\":\"0x1e322ee0cc0a5c3fce1e75892344d1f3413bc3a072f8bb5472becd62bdf1a7f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://50c0efaac0fccc64f7a7cc5a8f47bf722c17638d81c23c5a30c6bde1386a88cd\",\"dweb:/ipfs/QmdhrbPgcpQJyUk5PDudf28MRaticBoHG6rkuAJTfXqmDo\"]},\"contracts/Panic.sol\":{\"keccak256\":\"0xec0c46048fd01751aa22ecddb66df20b702374fd68f3f4b3ae363782f6b31f9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d32d9af31bc44235f769cf820ec96fd3f0aea9e16a169b244a62e34e482d7d55\",\"dweb:/ipfs/Qmd4Lw5sSLQtfE2vEy29RHzffinDsHgN1pGaS8Eex1F8ks\"]},\"contracts/Pausable.sol\":{\"keccak256\":\"0xb716012bd6d1308f1e3117f10754f8bd3cafbfd21c1e2f4a36eb371cde8f269c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://434ee6c6171c52a5d6018e1e2cbb05c6ddc45f4e4a72aa5f5fad344fe27146fd\",\"dweb:/ipfs/QmceTTn3vqoFYeV3zPHwt5GZHJgSjpjJ9YWic2p4hpeVpH\"]},\"contracts/PermitAndCall.sol\":{\"keccak256\":\"0x702acc765e2b776e474c01903fe534919d562c23d397361540f1c24dcb978009\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6e19ecfe7df5064f93afa80c2f0a52c7cf840cebd1a1adca3b4a68f49bafc1e\",\"dweb:/ipfs/QmbVe5YgchvdAoUHrzdNXARkBGP9WvZeJo8xri5fwdFFAf\"]},\"contracts/PredicateHelper.sol\":{\"keccak256\":\"0x2eabeb6ee0a445ec34dea12a88de427dbdaa69331ef5d7e11fee697c9eb9abdf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://421ce9422fe2c69966d7991a444017932aee070e933fc0d16b22bc9df01fe15c\",\"dweb:/ipfs/Qmcpv6v97Mty5rWGK6nUDVH1YF72gUQKkqzNdC62u378Fu\"]},\"contracts/RemainingInvalidatorLib.sol\":{\"keccak256\":\"0x192440c67bd53e14ab492c5bf4d65ce44055272cf4e80950d601a5af0db567fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8389ea1731fbb20c5b5f19da828c1e4f4146b8a94d033df70bc34f2674b484ea\",\"dweb:/ipfs/QmXacGH2xWNnN3SrS27QKykd7rUKpmMCrffNwQtq6L8ZG5\"]},\"contracts/RevertReasonForwarder.sol\":{\"keccak256\":\"0x00dbd12fec0c2696dd0862143457d8a23c998dcabd5d038fc85512ba93467417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2fa738dc80ff7027762294869f2b181177a5c122fe04ceea08c619c544c820aa\",\"dweb:/ipfs/QmUzrDWe6k6Hhfdd5MxUhnW34B8mGJ5pwx65NM9EBLkLCU\"]},\"contracts/SafeCast.sol\":{\"keccak256\":\"0x16949b29739a3a20cf5ffe9ca22830a9f9b6deff16ee925827b19ddb5fbc127a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://768190c98439f96d5cad1900cc96e24f0749172192be8b5de885c426750c6ecd\",\"dweb:/ipfs/QmWPmxri7eCbAXC7p3qJ14ckPTUDkdE3wuyiMoc1pat5ft\"]},\"contracts/SafeERC20.sol\":{\"keccak256\":\"0x2cdc46994aa3302bf2026f5a2ba0650398aaf41278354075544bf42350ee947e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a65e24d410030f7b192d59a0096213bee88b963822052502572cdb9ee55e9d9\",\"dweb:/ipfs/QmcQH7uVFhTLGxTuqUsiEsc7qH9HE7xGgSQTXijoVUcKUn\"]},\"contracts/SeriesEpochManager.sol\":{\"keccak256\":\"0x9d03f20594ca58ba892ad2e015f3fdade1ed8634073cd2dcc6498a98acc79541\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1eb4af3779131b166d4529c2123b9cb00f9f59e1dbff3814948d37cf193c8184\",\"dweb:/ipfs/Qme1qvRRPcac4qYQu1nUFyd4Gu4iP6nqvSEr28F8VbJqQ1\"]},\"contracts/ShortStrings.sol\":{\"keccak256\":\"0xbfad9b3a40cba77c2f86c308175ac65e06b10e76159d635b018171c67846da69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3b4406389834f36341fc1c87d4e8ab26d902a40b887a17689a238e5a97ef0b2\",\"dweb:/ipfs/QmQtUoQLw3NjKrAutrXqepURfrb4pvoZ6mXp4AcUuosH4D\"]},\"contracts/SignedMath.sol\":{\"keccak256\":\"0xc07e2a3d5f315dafaec45606b60414be49cc913bd11ea1b1d8ee460e72f37445\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d5f6ea2b532028ac1b221ce2e33bfbf71d2ef43b318db47c029ea7b1760d4df\",\"dweb:/ipfs/QmdxY44UJdhcgVZ7YCm6um4FKBU1PvL925KgefxD7onTRw\"]},\"contracts/StorageSlot.sol\":{\"keccak256\":\"0x2373cbbdccacc6777b2a7b459aa35b7629b0f7aa63566cd9afe45be9f256645c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4d674a1520bc8b6888ff3c5e663a45b5da00bc20ddc82e8351f6bc28d6f23db\",\"dweb:/ipfs/QmWG1RkHw5AtGdQZQpk4CZZc4HXp9bJVSf1xiR2yF9yAtP\"]},\"contracts/Strings.sol\":{\"keccak256\":\"0x250d60b0677654f4955e3cd43a8d9b41a8d7f2e6a8c222c28629c7c4abafa4f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8af0ca2b41a72909427f62226a438fc38e5c7b94057744d3a079da0a6973ff0d\",\"dweb:/ipfs/QmWUydSxPhJbJFqi8q6YvyxpUiMhGDSDDYxvubcSVjeuXG\"]},\"contracts/TakerTraitsLib.sol\":{\"keccak256\":\"0x25d36a3b3645561fc5b3f35c1e93fe60220bd15f9af896b0c6263a3269710fcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45597b42af6b436271ac8e6577255137557ff72d45883ef4bce01198016d4bb5\",\"dweb:/ipfs/QmamEQ6c5ffZqanpuX52PUf88wPu6Gp4T8LCVVzonAo1uS\"]}},\"version\":1}",
					"userdoc": {
						"events": {
							"BitInvalidatorUpdated(address,uint256,uint256)": {
								"notice": "Emitted when order with `useBitInvalidator` gets cancelled"
							},
							"OrderCancelled(bytes32)": {
								"notice": "Emitted when order without `useBitInvalidator` gets cancelled"
							},
							"OrderFilled(bytes32,uint256)": {
								"notice": "Emitted when order gets filled"
							}
						},
						"kind": "user",
						"methods": {
							"advanceEpoch(uint96,uint256)": {
								"notice": "Advances nonce by specified amount"
							},
							"and(uint256,bytes)": {
								"notice": "Calls every target with corresponding data"
							},
							"arbitraryStaticCall(address,bytes)": {
								"notice": "Performs an arbitrary call to target with data"
							},
							"bitInvalidatorForOrder(address,uint256)": {
								"notice": "See {IOrderMixin-bitInvalidatorForOrder}."
							},
							"bitsInvalidateForOrder(uint256,uint256)": {
								"notice": "See {IOrderMixin-bitsInvalidateForOrder}."
							},
							"cancelOrder(uint256,bytes32)": {
								"notice": "See {IOrderMixin-cancelOrder}."
							},
							"cancelOrders(uint256[],bytes32[])": {
								"notice": "See {IOrderMixin-cancelOrders}."
							},
							"checkPredicate(bytes)": {
								"notice": "See {IOrderMixin-checkPredicate}."
							},
							"epoch(address,uint96)": {
								"notice": "Returns nonce for `maker` and `series`"
							},
							"epochEquals(address,uint256,uint256)": {
								"notice": "Checks if `maker` has specified `makerEpoch` for `series`"
							},
							"eq(uint256,bytes)": {
								"notice": "Calls target with specified data and tests if it's equal to the value"
							},
							"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)": {
								"notice": "See {IOrderMixin-fillContractOrder}."
							},
							"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)": {
								"notice": "See {IOrderMixin-fillContractOrderArgs}."
							},
							"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)": {
								"notice": "See {IOrderMixin-fillOrder}."
							},
							"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)": {
								"notice": "See {IOrderMixin-fillOrderArgs}."
							},
							"gt(uint256,bytes)": {
								"notice": "Calls target with specified data and tests if it's bigger than value"
							},
							"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "See {IOrderMixin-hashOrder}."
							},
							"increaseEpoch(uint96)": {
								"notice": "Advances nonce by one"
							},
							"lt(uint256,bytes)": {
								"notice": "Calls target with specified data and tests if it's lower than value"
							},
							"not(bytes)": {
								"notice": "Calls target with specified data and tests if it's equal to 0"
							},
							"or(uint256,bytes)": {
								"notice": "Calls every target with corresponding data"
							},
							"permitAndCall(bytes,bytes)": {
								"notice": "Executes a permit for an ERC20 token and then a specified action in a single transaction."
							},
							"rawRemainingInvalidatorForOrder(address,bytes32)": {
								"notice": "See {IOrderMixin-rawRemainingInvalidatorForOrder}."
							},
							"remainingInvalidatorForOrder(address,bytes32)": {
								"notice": "See {IOrderMixin-remainingInvalidatorForOrder}."
							},
							"simulate(address,bytes)": {
								"notice": "See {IOrderMixin-simulate}."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Context.sol\":{\"keccak256\":\"0x28ad9de5e26095f685a085591178af7aeac1427af1bf442986b5aee0a5b2a14a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad3864801aabbcc6f52361a1b86a3d4d342e283cc2036c47a3ef2df7e4a3c51\",\"dweb:/ipfs/QmezNWJGoPBwtHjsQae7dbqjeZgpbB2cHFE5nFBBzGvJFR\"]},\"contracts/Ownable.sol\":{\"keccak256\":\"0xa6428484d54bc2cd4eb2a5632305a4b7783365f8c5fa173ad62c4795bf2839f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a7d9efbfeef2f5c28979e8a93eeab25f6c2e85e69fe6261c4c17d15c5c3aadf\",\"dweb:/ipfs/QmQieD54hKvNVXV3RuknW9BnSurgGrEyTnmcKHXg9YHC7E\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Panic.sol": {
				"Panic": {
					"abi": [],
					"devdoc": {
						"details": "Helper library for emitting standardized panic codes. ```solidity contract Example {      using Panic for uint256;      // Use any of the declared internal constants      function foo() { Panic.GENERIC.panic(); }      // Alternatively      function foo() { Panic.panic(Panic.GENERIC); } } ``` Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil]. _Available since v5.1._",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"ARRAY_OUT_OF_BOUNDS": {
								"details": "array out of bounds access"
							},
							"ASSERT": {
								"details": "used by the assert() builtin"
							},
							"DIVISION_BY_ZERO": {
								"details": "division or modulo by zero"
							},
							"EMPTY_ARRAY_POP": {
								"details": "empty array pop"
							},
							"ENUM_CONVERSION_ERROR": {
								"details": "enum conversion error"
							},
							"GENERIC": {
								"details": "generic / unspecified error"
							},
							"INVALID_INTERNAL_FUNCTION": {
								"details": "calling invalid internal function"
							},
							"RESOURCE_ERROR": {
								"details": "resource error (too large allocation or too large array)"
							},
							"STORAGE_ENCODING_ERROR": {
								"details": "invalid encoding in storage"
							},
							"UNDER_OVERFLOW": {
								"details": "arithmetic underflow or overflow"
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220faee89a64def114174fe6d62059d5ea538816b31f487a4cc82e67fb81e3d876364736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL 0xEE DUP10 0xA6 0x4D 0xEF GT COINBASE PUSH21 0xFE6D62059D5EA538816B31F487A4CC82E67FB81E3D DUP8 PUSH4 0x64736F6C PUSH4 0x43000817 STOP CALLER ",
							"sourceMap": "657:1315:31:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220faee89a64def114174fe6d62059d5ea538816b31f487a4cc82e67fb81e3d876364736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL 0xEE DUP10 0xA6 0x4D 0xEF GT COINBASE PUSH21 0xFE6D62059D5EA538816B31F487A4CC82E67FB81E3D DUP8 PUSH4 0x64736F6C PUSH4 0x43000817 STOP CALLER ",
							"sourceMap": "657:1315:31:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper library for emitting standardized panic codes. ```solidity contract Example {      using Panic for uint256;      // Use any of the declared internal constants      function foo() { Panic.GENERIC.panic(); }      // Alternatively      function foo() { Panic.panic(Panic.GENERIC); } } ``` Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil]. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ARRAY_OUT_OF_BOUNDS\":{\"details\":\"array out of bounds access\"},\"ASSERT\":{\"details\":\"used by the assert() builtin\"},\"DIVISION_BY_ZERO\":{\"details\":\"division or modulo by zero\"},\"EMPTY_ARRAY_POP\":{\"details\":\"empty array pop\"},\"ENUM_CONVERSION_ERROR\":{\"details\":\"enum conversion error\"},\"GENERIC\":{\"details\":\"generic / unspecified error\"},\"INVALID_INTERNAL_FUNCTION\":{\"details\":\"calling invalid internal function\"},\"RESOURCE_ERROR\":{\"details\":\"resource error (too large allocation or too large array)\"},\"STORAGE_ENCODING_ERROR\":{\"details\":\"invalid encoding in storage\"},\"UNDER_OVERFLOW\":{\"details\":\"arithmetic underflow or overflow\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Panic.sol\":\"Panic\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Panic.sol\":{\"keccak256\":\"0xec0c46048fd01751aa22ecddb66df20b702374fd68f3f4b3ae363782f6b31f9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d32d9af31bc44235f769cf820ec96fd3f0aea9e16a169b244a62e34e482d7d55\",\"dweb:/ipfs/Qmd4Lw5sSLQtfE2vEy29RHzffinDsHgN1pGaS8Eex1F8ks\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Pausable.sol": {
				"Pausable": {
					"abi": [
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"errors": {
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							]
						},
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Context.sol\":{\"keccak256\":\"0x28ad9de5e26095f685a085591178af7aeac1427af1bf442986b5aee0a5b2a14a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad3864801aabbcc6f52361a1b86a3d4d342e283cc2036c47a3ef2df7e4a3c51\",\"dweb:/ipfs/QmezNWJGoPBwtHjsQae7dbqjeZgpbB2cHFE5nFBBzGvJFR\"]},\"contracts/Pausable.sol\":{\"keccak256\":\"0xb716012bd6d1308f1e3117f10754f8bd3cafbfd21c1e2f4a36eb371cde8f269c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://434ee6c6171c52a5d6018e1e2cbb05c6ddc45f4e4a72aa5f5fad344fe27146fd\",\"dweb:/ipfs/QmceTTn3vqoFYeV3zPHwt5GZHJgSjpjJ9YWic2p4hpeVpH\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/PermitAndCall.sol": {
				"PermitAndCall": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "permit",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "action",
									"type": "bytes"
								}
							],
							"name": "permitAndCall",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Abstract contract to support permit and action execution in a single transaction. Allows tokens that implement EIP-2612 permits, DAI-like permits, USDC-like permits and Permit2 to be approved and spent in a single transaction.",
						"kind": "dev",
						"methods": {
							"permitAndCall(bytes,bytes)": {
								"params": {
									"action": "The data representing the action to be executed after the permit.",
									"permit": "ERC20 token address (20 bytes) concatenated with the permit data, allowing this contract to spend the token. Format: [token address (20 bytes)][permit data]"
								}
							}
						},
						"title": "PermitAndCall",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"action\",\"type\":\"bytes\"}],\"name\":\"permitAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Abstract contract to support permit and action execution in a single transaction. Allows tokens that implement EIP-2612 permits, DAI-like permits, USDC-like permits and Permit2 to be approved and spent in a single transaction.\",\"kind\":\"dev\",\"methods\":{\"permitAndCall(bytes,bytes)\":{\"params\":{\"action\":\"The data representing the action to be executed after the permit.\",\"permit\":\"ERC20 token address (20 bytes) concatenated with the permit data, allowing this contract to spend the token. Format: [token address (20 bytes)][permit data]\"}}},\"title\":\"PermitAndCall\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permitAndCall(bytes,bytes)\":{\"notice\":\"Executes a permit for an ERC20 token and then a specified action in a single transaction.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PermitAndCall.sol\":\"PermitAndCall\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/IDaiLikePermit.sol\":{\"keccak256\":\"0x0bcc9c886acb32f5664e3bfd0640e6fc1de6525b8f6103f25906d040d054ce07\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://551e3b7d18d5e83727491f6749643a9a1e9a2e253a1a9be56eeb44e4c1b13876\",\"dweb:/ipfs/QmSpGRSD3DDP1EbBbXDPqAbSP58roEvCsosMQCDtSDnEBa\"]},\"contracts/IERC20.sol\":{\"keccak256\":\"0x91104f4bcc877f2506e4485b871efe0a6beb5c1ef7de9c374d99d75289905905\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57a7ecbec5ff542c117d36c7487386b5653ad21d0a83414e859d4202e069b36f\",\"dweb:/ipfs/QmaPocSUaysdjd1Ksa5kttxRHxhA7XWd6HrQ9teLFRyR6W\"]},\"contracts/IERC20Permit.sol\":{\"keccak256\":\"0x08d82b52e80c1a83f792c519388ca1ae86ae441bdfbd7d84addc82ef9c499a9e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a5449dde3b5541f3f653b352bfa0aa4f3e91ab24a110106319baa83940f540a5\",\"dweb:/ipfs/QmUuadcLdSPtqMuuhBgkdAZHrE3tx5rdQ7HCXCsa8RDaTU\"]},\"contracts/IERC7597Permit.sol\":{\"keccak256\":\"0x550ff037524afe9ef46d2c54ed59f4048c4216122e80da3b17872e05c163a74e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40df00df81d4a4d2a78105bf5b86694037d885abf30e1e47e286b6e3310bdf48\",\"dweb:/ipfs/QmVqmS8BpSMV8PeiUme1tNDq48zfn71XYxWhb6fLtxCT6f\"]},\"contracts/IPermit2.sol\":{\"keccak256\":\"0x79e985eddaf616078cde10431fb615b577ba83b96ca5f4161cb82939a787a195\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a1d3243656736b7e4422a6eb7bbac982760f99674b9d80286e5bf45f1fe04376\",\"dweb:/ipfs/QmacX52RVqLnUgWxji9FkfFSZeGnV6qdxkkX5kMxakYRyW\"]},\"contracts/IWETH.sol\":{\"keccak256\":\"0x2dc6d61d66f1881a6c273b5f30f9a82e6eda4988c7aeaf0b26549a5e10c9fcb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1695d9fd49960e732d2228a304fe9bc221439293e940fdcb9c17419ccafdcfc1\",\"dweb:/ipfs/QmPZrdz4icyWQeR5Yf1zDQnpH8MmYiHyKofVcwvwNADjRh\"]},\"contracts/PermitAndCall.sol\":{\"keccak256\":\"0x702acc765e2b776e474c01903fe534919d562c23d397361540f1c24dcb978009\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6e19ecfe7df5064f93afa80c2f0a52c7cf840cebd1a1adca3b4a68f49bafc1e\",\"dweb:/ipfs/QmbVe5YgchvdAoUHrzdNXARkBGP9WvZeJo8xri5fwdFFAf\"]},\"contracts/RevertReasonForwarder.sol\":{\"keccak256\":\"0x00dbd12fec0c2696dd0862143457d8a23c998dcabd5d038fc85512ba93467417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2fa738dc80ff7027762294869f2b181177a5c122fe04ceea08c619c544c820aa\",\"dweb:/ipfs/QmUzrDWe6k6Hhfdd5MxUhnW34B8mGJ5pwx65NM9EBLkLCU\"]},\"contracts/SafeERC20.sol\":{\"keccak256\":\"0x2cdc46994aa3302bf2026f5a2ba0650398aaf41278354075544bf42350ee947e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a65e24d410030f7b192d59a0096213bee88b963822052502572cdb9ee55e9d9\",\"dweb:/ipfs/QmcQH7uVFhTLGxTuqUsiEsc7qH9HE7xGgSQTXijoVUcKUn\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"permitAndCall(bytes,bytes)": {
								"notice": "Executes a permit for an ERC20 token and then a specified action in a single transaction."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/PredicateHelper.sol": {
				"PredicateHelper": {
					"abi": [
						{
							"inputs": [],
							"name": "ArbitraryStaticCallFailed",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "offsets",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "and",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "arbitraryStaticCall",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "eq",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "gt",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "lt",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "not",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "offsets",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "or",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"and(uint256,bytes)": {
								"returns": {
									"_0": "Result True if calls to all targets returned True. Otherwise, false"
								}
							},
							"arbitraryStaticCall(address,bytes)": {
								"returns": {
									"_0": "Result Bytes transmuted to uint256"
								}
							},
							"eq(uint256,bytes)": {
								"params": {
									"value": "Value to test"
								},
								"returns": {
									"_0": "Result True if call to target returns the same value as `value`. Otherwise, false"
								}
							},
							"gt(uint256,bytes)": {
								"params": {
									"value": "Value to test"
								},
								"returns": {
									"_0": "Result True if call to target returns value which is bigger than `value`. Otherwise, false"
								}
							},
							"lt(uint256,bytes)": {
								"params": {
									"value": "Value to test"
								},
								"returns": {
									"_0": "Result True if call to target returns value which is lower than `value`. Otherwise, false"
								}
							},
							"not(bytes)": {
								"returns": {
									"_0": "Result True if call to target returns 0. Otherwise, false"
								}
							},
							"or(uint256,bytes)": {
								"returns": {
									"_0": "Result True if call to any target returned True. Otherwise, false"
								}
							}
						},
						"title": "A helper contract for executing boolean functions on arbitrary target call results",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523461001657610395908161001b8239f35b5f80fdfe604060808152600480361015610013575f80fd5b5f3560e01c9081634f38e2b8146101dd5781636fe7b0ba146101ac5781637426114514610191578163bf15fcd814610125578163bf797959146100cd57508063bfa75143146100a95763ca4ece221461006a575f80fd5b346100a55761008860209161007e3661023c565b909391933061033b565b8193919361009b575b5050519015158152f35b1091505f80610091565b5f80fd5b50346100a5576020906100c46100be3661023c565b916102df565b90519015158152f35b82346100a55760203660031901126100a55781359167ffffffffffffffff83116100a55761010361010a9160209436910161020e565b903061033b565b8192919261011c575b50519015158152f35b15915083610113565b82346100a557806003193601126100a55781356001600160a01b03811681036100a5576024359067ffffffffffffffff82116100a55761016b610171923690860161020e565b9161033b565b919015610182576020925051908152f35b51631f1b8f6160e01b81529050fd5b82346100a5576020906100c46101a63661023c565b91610288565b82346100a5576101c160209161007e3661023c565b819391936101d3575050519015158152f35b1491508380610091565b82346100a5576101f260209161007e3661023c565b81939193610204575050519015158152f35b1191508380610091565b9181601f840112156100a55782359167ffffffffffffffff83116100a557602083818601950101116100a557565b9060406003198301126100a557600435916024359067ffffffffffffffff82116100a55761026c9160040161020e565b9091565b909392938483116100a55784116100a5578101920390565b929091925f5b63ffffffff82169081156102d557610103826102ab928888610270565b816102ca575b506102c0579060201c9061028e565b5050915050600190565b60019150145f6102b1565b5050509150505f90565b929091925f5b63ffffffff82169081156103305761010382610302928888610270565b9015908115610324575b5061031b579060201c906102e5565b50509150505f90565b6001915014155f61030c565b505050915050600190565b915f906020928294826040519283375afa60203d1416918261035957565b5f51915056fea2646970667358221220c8f3dbb4fd98bcf13642c83fa0d516d3b89171558d6d824f217e2250ea3df65364736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x395 SWAP1 DUP2 PUSH2 0x1B DUP3 CODECOPY RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x4F38E2B8 EQ PUSH2 0x1DD JUMPI DUP2 PUSH4 0x6FE7B0BA EQ PUSH2 0x1AC JUMPI DUP2 PUSH4 0x74261145 EQ PUSH2 0x191 JUMPI DUP2 PUSH4 0xBF15FCD8 EQ PUSH2 0x125 JUMPI DUP2 PUSH4 0xBF797959 EQ PUSH2 0xCD JUMPI POP DUP1 PUSH4 0xBFA75143 EQ PUSH2 0xA9 JUMPI PUSH4 0xCA4ECE22 EQ PUSH2 0x6A JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xA5 JUMPI PUSH2 0x88 PUSH1 0x20 SWAP2 PUSH2 0x7E CALLDATASIZE PUSH2 0x23C JUMP JUMPDEST SWAP1 SWAP4 SWAP2 SWAP4 ADDRESS PUSH2 0x33B JUMP JUMPDEST DUP2 SWAP4 SWAP2 SWAP4 PUSH2 0x9B JUMPI JUMPDEST POP POP MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST LT SWAP2 POP PUSH0 DUP1 PUSH2 0x91 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xA5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0xC4 PUSH2 0xBE CALLDATASIZE PUSH2 0x23C JUMP JUMPDEST SWAP2 PUSH2 0x2DF JUMP JUMPDEST SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0xA5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA5 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xA5 JUMPI PUSH2 0x103 PUSH2 0x10A SWAP2 PUSH1 0x20 SWAP5 CALLDATASIZE SWAP2 ADD PUSH2 0x20E JUMP JUMPDEST SWAP1 ADDRESS PUSH2 0x33B JUMP JUMPDEST DUP2 SWAP3 SWAP2 SWAP3 PUSH2 0x11C JUMPI JUMPDEST POP MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST ISZERO SWAP2 POP DUP4 PUSH2 0x113 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0xA5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xA5 JUMPI DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xA5 JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xA5 JUMPI PUSH2 0x16B PUSH2 0x171 SWAP3 CALLDATASIZE SWAP1 DUP7 ADD PUSH2 0x20E JUMP JUMPDEST SWAP2 PUSH2 0x33B JUMP JUMPDEST SWAP2 SWAP1 ISZERO PUSH2 0x182 JUMPI PUSH1 0x20 SWAP3 POP MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST MLOAD PUSH4 0x1F1B8F61 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 POP REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0xA5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0xC4 PUSH2 0x1A6 CALLDATASIZE PUSH2 0x23C JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0xA5 JUMPI PUSH2 0x1C1 PUSH1 0x20 SWAP2 PUSH2 0x7E CALLDATASIZE PUSH2 0x23C JUMP JUMPDEST DUP2 SWAP4 SWAP2 SWAP4 PUSH2 0x1D3 JUMPI POP POP MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST EQ SWAP2 POP DUP4 DUP1 PUSH2 0x91 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0xA5 JUMPI PUSH2 0x1F2 PUSH1 0x20 SWAP2 PUSH2 0x7E CALLDATASIZE PUSH2 0x23C JUMP JUMPDEST DUP2 SWAP4 SWAP2 SWAP4 PUSH2 0x204 JUMPI POP POP MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST GT SWAP2 POP DUP4 DUP1 PUSH2 0x91 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xA5 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xA5 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0xA5 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0xA5 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xA5 JUMPI PUSH2 0x26C SWAP2 PUSH1 0x4 ADD PUSH2 0x20E JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0xA5 JUMPI DUP5 GT PUSH2 0xA5 JUMPI DUP2 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH0 JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x2D5 JUMPI PUSH2 0x103 DUP3 PUSH2 0x2AB SWAP3 DUP9 DUP9 PUSH2 0x270 JUMP JUMPDEST DUP2 PUSH2 0x2CA JUMPI JUMPDEST POP PUSH2 0x2C0 JUMPI SWAP1 PUSH1 0x20 SHR SWAP1 PUSH2 0x28E JUMP JUMPDEST POP POP SWAP2 POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP EQ PUSH0 PUSH2 0x2B1 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH0 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH0 JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x330 JUMPI PUSH2 0x103 DUP3 PUSH2 0x302 SWAP3 DUP9 DUP9 PUSH2 0x270 JUMP JUMPDEST SWAP1 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x324 JUMPI JUMPDEST POP PUSH2 0x31B JUMPI SWAP1 PUSH1 0x20 SHR SWAP1 PUSH2 0x2E5 JUMP JUMPDEST POP POP SWAP2 POP POP PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP EQ ISZERO PUSH0 PUSH2 0x30C JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 PUSH0 SWAP1 PUSH1 0x20 SWAP3 DUP3 SWAP5 DUP3 PUSH1 0x40 MLOAD SWAP3 DUP4 CALLDATACOPY GAS STATICCALL PUSH1 0x20 RETURNDATASIZE EQ AND SWAP2 DUP3 PUSH2 0x359 JUMPI JUMP JUMPDEST PUSH0 MLOAD SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 RETURN 0xDB 0xB4 REVERT SWAP9 0xBC CALL CALLDATASIZE TIMESTAMP 0xC8 EXTCODEHASH LOG0 0xD5 AND 0xD3 0xB8 SWAP2 PUSH18 0x558D6D824F217E2250EA3DF65364736F6C63 NUMBER STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "152:3758:34:-:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_bytes_calldata": {
									"entryPoint": 526,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_uint256t_bytes_calldata": {
									"entryPoint": 572,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 3
								},
								"calldata_array_index_range_access_bytes_calldata": {
									"entryPoint": 624,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 2
								},
								"fun_and": {
									"entryPoint": 735,
									"id": 6522,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_or": {
									"entryPoint": 648,
									"id": 6459,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_staticcallForUint": {
									"entryPoint": 827,
									"id": 6677,
									"parameterSlots": 3,
									"returnSlots": 2
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "604060808152600480361015610013575f80fd5b5f3560e01c9081634f38e2b8146101dd5781636fe7b0ba146101ac5781637426114514610191578163bf15fcd814610125578163bf797959146100cd57508063bfa75143146100a95763ca4ece221461006a575f80fd5b346100a55761008860209161007e3661023c565b909391933061033b565b8193919361009b575b5050519015158152f35b1091505f80610091565b5f80fd5b50346100a5576020906100c46100be3661023c565b916102df565b90519015158152f35b82346100a55760203660031901126100a55781359167ffffffffffffffff83116100a55761010361010a9160209436910161020e565b903061033b565b8192919261011c575b50519015158152f35b15915083610113565b82346100a557806003193601126100a55781356001600160a01b03811681036100a5576024359067ffffffffffffffff82116100a55761016b610171923690860161020e565b9161033b565b919015610182576020925051908152f35b51631f1b8f6160e01b81529050fd5b82346100a5576020906100c46101a63661023c565b91610288565b82346100a5576101c160209161007e3661023c565b819391936101d3575050519015158152f35b1491508380610091565b82346100a5576101f260209161007e3661023c565b81939193610204575050519015158152f35b1191508380610091565b9181601f840112156100a55782359167ffffffffffffffff83116100a557602083818601950101116100a557565b9060406003198301126100a557600435916024359067ffffffffffffffff82116100a55761026c9160040161020e565b9091565b909392938483116100a55784116100a5578101920390565b929091925f5b63ffffffff82169081156102d557610103826102ab928888610270565b816102ca575b506102c0579060201c9061028e565b5050915050600190565b60019150145f6102b1565b5050509150505f90565b929091925f5b63ffffffff82169081156103305761010382610302928888610270565b9015908115610324575b5061031b579060201c906102e5565b50509150505f90565b6001915014155f61030c565b505050915050600190565b915f906020928294826040519283375afa60203d1416918261035957565b5f51915056fea2646970667358221220c8f3dbb4fd98bcf13642c83fa0d516d3b89171558d6d824f217e2250ea3df65364736f6c63430008170033",
							"opcodes": "PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x4F38E2B8 EQ PUSH2 0x1DD JUMPI DUP2 PUSH4 0x6FE7B0BA EQ PUSH2 0x1AC JUMPI DUP2 PUSH4 0x74261145 EQ PUSH2 0x191 JUMPI DUP2 PUSH4 0xBF15FCD8 EQ PUSH2 0x125 JUMPI DUP2 PUSH4 0xBF797959 EQ PUSH2 0xCD JUMPI POP DUP1 PUSH4 0xBFA75143 EQ PUSH2 0xA9 JUMPI PUSH4 0xCA4ECE22 EQ PUSH2 0x6A JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xA5 JUMPI PUSH2 0x88 PUSH1 0x20 SWAP2 PUSH2 0x7E CALLDATASIZE PUSH2 0x23C JUMP JUMPDEST SWAP1 SWAP4 SWAP2 SWAP4 ADDRESS PUSH2 0x33B JUMP JUMPDEST DUP2 SWAP4 SWAP2 SWAP4 PUSH2 0x9B JUMPI JUMPDEST POP POP MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST LT SWAP2 POP PUSH0 DUP1 PUSH2 0x91 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xA5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0xC4 PUSH2 0xBE CALLDATASIZE PUSH2 0x23C JUMP JUMPDEST SWAP2 PUSH2 0x2DF JUMP JUMPDEST SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0xA5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA5 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xA5 JUMPI PUSH2 0x103 PUSH2 0x10A SWAP2 PUSH1 0x20 SWAP5 CALLDATASIZE SWAP2 ADD PUSH2 0x20E JUMP JUMPDEST SWAP1 ADDRESS PUSH2 0x33B JUMP JUMPDEST DUP2 SWAP3 SWAP2 SWAP3 PUSH2 0x11C JUMPI JUMPDEST POP MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST ISZERO SWAP2 POP DUP4 PUSH2 0x113 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0xA5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xA5 JUMPI DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xA5 JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xA5 JUMPI PUSH2 0x16B PUSH2 0x171 SWAP3 CALLDATASIZE SWAP1 DUP7 ADD PUSH2 0x20E JUMP JUMPDEST SWAP2 PUSH2 0x33B JUMP JUMPDEST SWAP2 SWAP1 ISZERO PUSH2 0x182 JUMPI PUSH1 0x20 SWAP3 POP MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST MLOAD PUSH4 0x1F1B8F61 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 POP REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0xA5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0xC4 PUSH2 0x1A6 CALLDATASIZE PUSH2 0x23C JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0xA5 JUMPI PUSH2 0x1C1 PUSH1 0x20 SWAP2 PUSH2 0x7E CALLDATASIZE PUSH2 0x23C JUMP JUMPDEST DUP2 SWAP4 SWAP2 SWAP4 PUSH2 0x1D3 JUMPI POP POP MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST EQ SWAP2 POP DUP4 DUP1 PUSH2 0x91 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0xA5 JUMPI PUSH2 0x1F2 PUSH1 0x20 SWAP2 PUSH2 0x7E CALLDATASIZE PUSH2 0x23C JUMP JUMPDEST DUP2 SWAP4 SWAP2 SWAP4 PUSH2 0x204 JUMPI POP POP MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST GT SWAP2 POP DUP4 DUP1 PUSH2 0x91 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xA5 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xA5 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0xA5 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0xA5 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xA5 JUMPI PUSH2 0x26C SWAP2 PUSH1 0x4 ADD PUSH2 0x20E JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0xA5 JUMPI DUP5 GT PUSH2 0xA5 JUMPI DUP2 ADD SWAP3 SUB SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH0 JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x2D5 JUMPI PUSH2 0x103 DUP3 PUSH2 0x2AB SWAP3 DUP9 DUP9 PUSH2 0x270 JUMP JUMPDEST DUP2 PUSH2 0x2CA JUMPI JUMPDEST POP PUSH2 0x2C0 JUMPI SWAP1 PUSH1 0x20 SHR SWAP1 PUSH2 0x28E JUMP JUMPDEST POP POP SWAP2 POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP EQ PUSH0 PUSH2 0x2B1 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH0 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH0 JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x330 JUMPI PUSH2 0x103 DUP3 PUSH2 0x302 SWAP3 DUP9 DUP9 PUSH2 0x270 JUMP JUMPDEST SWAP1 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x324 JUMPI JUMPDEST POP PUSH2 0x31B JUMPI SWAP1 PUSH1 0x20 SHR SWAP1 PUSH2 0x2E5 JUMP JUMPDEST POP POP SWAP2 POP POP PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP EQ ISZERO PUSH0 PUSH2 0x30C JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 PUSH0 SWAP1 PUSH1 0x20 SWAP3 DUP3 SWAP5 DUP3 PUSH1 0x40 MLOAD SWAP3 DUP4 CALLDATACOPY GAS STATICCALL PUSH1 0x20 RETURNDATASIZE EQ AND SWAP2 DUP3 PUSH2 0x359 JUMPI JUMP JUMPDEST PUSH0 MLOAD SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 RETURN 0xDB 0xB4 REVERT SWAP9 0xBC CALL CALLDATASIZE TIMESTAMP 0xC8 EXTCODEHASH LOG0 0xD5 AND 0xD3 0xB8 SWAP2 PUSH18 0x558D6D824F217E2250EA3DF65364736F6C63 NUMBER STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "152:3758:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2501:39;152:3758;;;;;:::i;:::-;2528:4;;;;;2501:39;:::i;:::-;2557:22;;;;;;152:3758;;;;;;;;;;2557:22;2568:11;;-1:-1:-1;2557:22:34;;;;152:3758;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;152:3758:34;;;;;;;;;;;;;1649:39;152:3758;;;;;;;:::i;:::-;1676:4;;1649:39;:::i;:::-;1705:19;;;;;;152:3758;;;;;;;;;1705:19;1716:8;;-1:-1:-1;1705:19:34;;;152:3758;;;;;;;;;;;;;;;-1:-1:-1;;;;;152:3758:34;;;;;;;;;;;;;;;3273:32;152:3758;;;;;;:::i;:::-;3273:32;;:::i;:::-;3319:8;;;3315:48;;152:3758;;;;;;;;3315:48;152:3758;-1:-1:-1;;;3336:27:34;;152:3758;-1:-1:-1;3336:27:34;152:3758;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;2070:39;152:3758;;;;;:::i;2070:39::-;2126:23;;;;;;152:3758;;;;;;;;;2126:23;2137:12;;-1:-1:-1;2126:23:34;;;;152:3758;;;;;2933:39;152:3758;;;;;:::i;2933:39::-;2989:22;;;;;;152:3758;;;;;;;;;2989:22;3000:11;;-1:-1:-1;2989:22:34;;;;152:3758;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;152:3758:34;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;364:438::-;;;;;152:3758;532:14;152:3758;;;498:32;;;;;626:22;;592:57;626:22;;;;:::i;592:57::-;667:19;;;532:14;663:69;;;532:14;544:2;152:3758;481:15;;;663:69;706:11;;;;;713:4;706:11;:::o;667:19::-;685:1;678:8;;;667:19;;;498:32;;;;;;;152:3758;364:438;:::o;951:440::-;;;;;152:3758;1120:14;152:3758;;;1086:32;;;;;1214:22;;1180:57;1214:22;;;;:::i;1180:57::-;1255:8;;152:3758;;;1255:20;;1120:14;1251:71;;;1120:14;1132:2;152:3758;1069:15;;;1251:71;1295:12;;;;;152:3758;1295:12;:::o;1255:20::-;1274:1;1267:8;;;;1255:20;;;1086:32;;;;;;;1380:4;951:440;:::o;3396:512::-;;152:3758;3396:512;3520:382;3396:512;3497:11;3520:382;;;;;;;;;;;;;;;;;3396:512::o;3520:382::-;152:3758;3520:382;;-1:-1:-1;3396:512:34:o"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ArbitraryStaticCallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"and\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"arbitraryStaticCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"eq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"gt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"not\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"or\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"and(uint256,bytes)\":{\"returns\":{\"_0\":\"Result True if calls to all targets returned True. Otherwise, false\"}},\"arbitraryStaticCall(address,bytes)\":{\"returns\":{\"_0\":\"Result Bytes transmuted to uint256\"}},\"eq(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns the same value as `value`. Otherwise, false\"}},\"gt(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is bigger than `value`. Otherwise, false\"}},\"lt(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is lower than `value`. Otherwise, false\"}},\"not(bytes)\":{\"returns\":{\"_0\":\"Result True if call to target returns 0. Otherwise, false\"}},\"or(uint256,bytes)\":{\"returns\":{\"_0\":\"Result True if call to any target returned True. Otherwise, false\"}}},\"title\":\"A helper contract for executing boolean functions on arbitrary target call results\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"and(uint256,bytes)\":{\"notice\":\"Calls every target with corresponding data\"},\"arbitraryStaticCall(address,bytes)\":{\"notice\":\"Performs an arbitrary call to target with data\"},\"eq(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to the value\"},\"gt(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's bigger than value\"},\"lt(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's lower than value\"},\"not(bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to 0\"},\"or(uint256,bytes)\":{\"notice\":\"Calls every target with corresponding data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PredicateHelper.sol\":\"PredicateHelper\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/PredicateHelper.sol\":{\"keccak256\":\"0x2eabeb6ee0a445ec34dea12a88de427dbdaa69331ef5d7e11fee697c9eb9abdf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://421ce9422fe2c69966d7991a444017932aee070e933fc0d16b22bc9df01fe15c\",\"dweb:/ipfs/Qmcpv6v97Mty5rWGK6nUDVH1YF72gUQKkqzNdC62u378Fu\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"and(uint256,bytes)": {
								"notice": "Calls every target with corresponding data"
							},
							"arbitraryStaticCall(address,bytes)": {
								"notice": "Performs an arbitrary call to target with data"
							},
							"eq(uint256,bytes)": {
								"notice": "Calls target with specified data and tests if it's equal to the value"
							},
							"gt(uint256,bytes)": {
								"notice": "Calls target with specified data and tests if it's bigger than value"
							},
							"lt(uint256,bytes)": {
								"notice": "Calls target with specified data and tests if it's lower than value"
							},
							"not(bytes)": {
								"notice": "Calls target with specified data and tests if it's equal to 0"
							},
							"or(uint256,bytes)": {
								"notice": "Calls every target with corresponding data"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/RemainingInvalidatorLib.sol": {
				"RemainingInvalidatorLib": {
					"abi": [
						{
							"inputs": [],
							"name": "RemainingInvalidatedOrder",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "The remaining amount is used as a nonce to invalidate the order. When order is created, the remaining invalidator is 0. When order is filled, the remaining invalidator is the inverse of the remaining amount.",
						"errors": {
							"RemainingInvalidatedOrder()": [
								{
									"details": "The error is thrown when an attempt is made to invalidate an already invalidated entity."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "RemainingInvalidatorLib",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212207584519439c37a49c55b067896be0cd7cfe0d07b652bfa9b32e70022e0e8985f64736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0x84519439C37A49C55B067896BE0CD7CFE0D07B652BFA SWAP12 ORIGIN 0xE7 STOP 0x22 0xE0 0xE8 SWAP9 PUSH0 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "469:2631:35:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212207584519439c37a49c55b067896be0cd7cfe0d07b652bfa9b32e70022e0e8985f64736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0x84519439C37A49C55B067896BE0CD7CFE0D07B652BFA SWAP12 ORIGIN 0xE7 STOP 0x22 0xE0 0xE8 SWAP9 PUSH0 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "469:2631:35:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"RemainingInvalidatedOrder\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"The remaining amount is used as a nonce to invalidate the order. When order is created, the remaining invalidator is 0. When order is filled, the remaining invalidator is the inverse of the remaining amount.\",\"errors\":{\"RemainingInvalidatedOrder()\":[{\"details\":\"The error is thrown when an attempt is made to invalidate an already invalidated entity.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"RemainingInvalidatorLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The library provides a mechanism to invalidate order based on the remaining amount of the order.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RemainingInvalidatorLib.sol\":\"RemainingInvalidatorLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/RemainingInvalidatorLib.sol\":{\"keccak256\":\"0x192440c67bd53e14ab492c5bf4d65ce44055272cf4e80950d601a5af0db567fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8389ea1731fbb20c5b5f19da828c1e4f4146b8a94d033df70bc34f2674b484ea\",\"dweb:/ipfs/QmXacGH2xWNnN3SrS27QKykd7rUKpmMCrffNwQtq6L8ZG5\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "The library provides a mechanism to invalidate order based on the remaining amount of the order.",
						"version": 1
					}
				}
			},
			"contracts/RevertReasonForwarder.sol": {
				"RevertReasonForwarder": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "RevertReasonForwarder",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220f231314aa3aea6a5b7c0be07924e2127d4641a8c1c5f097d10db6fadc6c288e064736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE BALANCE BALANCE 0x4A LOG3 0xAE 0xA6 0xA5 0xB7 0xC0 0xBE SMOD SWAP3 0x4E 0x21 0x27 0xD4 PUSH5 0x1A8C1C5F09 PUSH30 0x10DB6FADC6C288E064736F6C634300081700330000000000000000000000 ",
							"sourceMap": "201:1192:36:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220f231314aa3aea6a5b7c0be07924e2127d4641a8c1c5f097d10db6fadc6c288e064736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE BALANCE BALANCE 0x4A LOG3 0xAE 0xA6 0xA5 0xB7 0xC0 0xBE SMOD SWAP3 0x4E 0x21 0x27 0xD4 PUSH5 0x1A8C1C5F09 PUSH30 0x10DB6FADC6C288E064736F6C634300081700330000000000000000000000 ",
							"sourceMap": "201:1192:36:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"RevertReasonForwarder\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides utilities for forwarding and retrieving revert reasons from failed external calls.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RevertReasonForwarder.sol\":\"RevertReasonForwarder\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/RevertReasonForwarder.sol\":{\"keccak256\":\"0x00dbd12fec0c2696dd0862143457d8a23c998dcabd5d038fc85512ba93467417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2fa738dc80ff7027762294869f2b181177a5c122fe04ceea08c619c544c820aa\",\"dweb:/ipfs/QmUzrDWe6k6Hhfdd5MxUhnW34B8mGJ5pwx65NM9EBLkLCU\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Provides utilities for forwarding and retrieving revert reasons from failed external calls.",
						"version": 1
					}
				}
			},
			"contracts/SafeCast.sol": {
				"SafeCast": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "bits",
									"type": "uint8"
								},
								{
									"internalType": "int256",
									"name": "value",
									"type": "int256"
								}
							],
							"name": "SafeCastOverflowedIntDowncast",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "value",
									"type": "int256"
								}
							],
							"name": "SafeCastOverflowedIntToUint",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "bits",
									"type": "uint8"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "SafeCastOverflowedUintDowncast",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "SafeCastOverflowedUintToInt",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"errors": {
							"SafeCastOverflowedIntDowncast(uint8,int256)": [
								{
									"details": "Value doesn't fit in an int of `bits` size."
								}
							],
							"SafeCastOverflowedIntToUint(int256)": [
								{
									"details": "An int value doesn't fit in an uint of `bits` size."
								}
							],
							"SafeCastOverflowedUintDowncast(uint8,uint256)": [
								{
									"details": "Value doesn't fit in an uint of `bits` size."
								}
							],
							"SafeCastOverflowedUintToInt(uint256)": [
								{
									"details": "An uint value doesn't fit in an int of `bits` size."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220ff196f4dee5bc8cd54c7860f3f20713cf1b0f86af8ea75eb723878159922063d64736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT NOT PUSH16 0x4DEE5BC8CD54C7860F3F20713CF1B0F8 PUSH11 0xF8EA75EB72387815992206 RETURNDATASIZE PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "769:34173:37:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220ff196f4dee5bc8cd54c7860f3f20713cf1b0f86af8ea75eb723878159922063d64736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT NOT PUSH16 0x4DEE5BC8CD54C7860F3F20713CF1B0F8 PUSH11 0xF8EA75EB72387815992206 RETURNDATASIZE PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "769:34173:37:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"errors\":{\"SafeCastOverflowedIntDowncast(uint8,int256)\":[{\"details\":\"Value doesn't fit in an int of `bits` size.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/SafeCast.sol\":{\"keccak256\":\"0x16949b29739a3a20cf5ffe9ca22830a9f9b6deff16ee925827b19ddb5fbc127a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://768190c98439f96d5cad1900cc96e24f0749172192be8b5de885c426750c6ecd\",\"dweb:/ipfs/QmWPmxri7eCbAXC7p3qJ14ckPTUDkdE3wuyiMoc1pat5ft\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [],
							"name": "ForceApproveFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Permit2TransferAmountTooHigh",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SafeDecreaseAllowanceFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SafeIncreaseAllowanceFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SafePermitBadLength",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SafeTransferFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SafeTransferFromFailed",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Implements efficient safe methods for ERC20 interface.",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212203eb2c095b16948e2d5b1f29424dfe257bf5a994bcfa0663a349159d8b1cf12cd64736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATACOPY 0xB2 0xC0 SWAP6 0xB1 PUSH10 0x48E2D5B1F29424DFE257 0xBF GAS SWAP10 0x4B 0xCF LOG0 PUSH7 0x3A349159D8B1CF SLT 0xCD PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "629:26209:38:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212203eb2c095b16948e2d5b1f29424dfe257bf5a994bcfa0663a349159d8b1cf12cd64736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATACOPY 0xB2 0xC0 SWAP6 0xB1 PUSH10 0x48E2D5B1F29424DFE257 0xBF GAS SWAP10 0x4B 0xCF LOG0 PUSH7 0x3A349159D8B1CF SLT 0xCD PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "629:26209:38:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ForceApproveFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Permit2TransferAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeDecreaseAllowanceFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeIncreaseAllowanceFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafePermitBadLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromFailed\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Implements efficient safe methods for ERC20 interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Compared to the standard ERC20, this implementation offers several enhancements: 1. more gas-efficient, providing significant savings in transaction costs. 2. support for different permit implementations 3. forceApprove functionality 4. support for WETH deposit and withdraw\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/IDaiLikePermit.sol\":{\"keccak256\":\"0x0bcc9c886acb32f5664e3bfd0640e6fc1de6525b8f6103f25906d040d054ce07\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://551e3b7d18d5e83727491f6749643a9a1e9a2e253a1a9be56eeb44e4c1b13876\",\"dweb:/ipfs/QmSpGRSD3DDP1EbBbXDPqAbSP58roEvCsosMQCDtSDnEBa\"]},\"contracts/IERC20.sol\":{\"keccak256\":\"0x91104f4bcc877f2506e4485b871efe0a6beb5c1ef7de9c374d99d75289905905\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57a7ecbec5ff542c117d36c7487386b5653ad21d0a83414e859d4202e069b36f\",\"dweb:/ipfs/QmaPocSUaysdjd1Ksa5kttxRHxhA7XWd6HrQ9teLFRyR6W\"]},\"contracts/IERC20Permit.sol\":{\"keccak256\":\"0x08d82b52e80c1a83f792c519388ca1ae86ae441bdfbd7d84addc82ef9c499a9e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a5449dde3b5541f3f653b352bfa0aa4f3e91ab24a110106319baa83940f540a5\",\"dweb:/ipfs/QmUuadcLdSPtqMuuhBgkdAZHrE3tx5rdQ7HCXCsa8RDaTU\"]},\"contracts/IERC7597Permit.sol\":{\"keccak256\":\"0x550ff037524afe9ef46d2c54ed59f4048c4216122e80da3b17872e05c163a74e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40df00df81d4a4d2a78105bf5b86694037d885abf30e1e47e286b6e3310bdf48\",\"dweb:/ipfs/QmVqmS8BpSMV8PeiUme1tNDq48zfn71XYxWhb6fLtxCT6f\"]},\"contracts/IPermit2.sol\":{\"keccak256\":\"0x79e985eddaf616078cde10431fb615b577ba83b96ca5f4161cb82939a787a195\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a1d3243656736b7e4422a6eb7bbac982760f99674b9d80286e5bf45f1fe04376\",\"dweb:/ipfs/QmacX52RVqLnUgWxji9FkfFSZeGnV6qdxkkX5kMxakYRyW\"]},\"contracts/IWETH.sol\":{\"keccak256\":\"0x2dc6d61d66f1881a6c273b5f30f9a82e6eda4988c7aeaf0b26549a5e10c9fcb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1695d9fd49960e732d2228a304fe9bc221439293e940fdcb9c17419ccafdcfc1\",\"dweb:/ipfs/QmPZrdz4icyWQeR5Yf1zDQnpH8MmYiHyKofVcwvwNADjRh\"]},\"contracts/RevertReasonForwarder.sol\":{\"keccak256\":\"0x00dbd12fec0c2696dd0862143457d8a23c998dcabd5d038fc85512ba93467417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2fa738dc80ff7027762294869f2b181177a5c122fe04ceea08c619c544c820aa\",\"dweb:/ipfs/QmUzrDWe6k6Hhfdd5MxUhnW34B8mGJ5pwx65NM9EBLkLCU\"]},\"contracts/SafeERC20.sol\":{\"keccak256\":\"0x2cdc46994aa3302bf2026f5a2ba0650398aaf41278354075544bf42350ee947e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a65e24d410030f7b192d59a0096213bee88b963822052502572cdb9ee55e9d9\",\"dweb:/ipfs/QmcQH7uVFhTLGxTuqUsiEsc7qH9HE7xGgSQTXijoVUcKUn\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Compared to the standard ERC20, this implementation offers several enhancements: 1. more gas-efficient, providing significant savings in transaction costs. 2. support for different permit implementations 3. forceApprove functionality 4. support for WETH deposit and withdraw",
						"version": 1
					}
				}
			},
			"contracts/SeriesEpochManager.sol": {
				"SeriesEpochManager": {
					"abi": [
						{
							"inputs": [],
							"name": "AdvanceEpochFailed",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "series",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "newEpoch",
									"type": "uint256"
								}
							],
							"name": "EpochIncreased",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint96",
									"name": "series",
									"type": "uint96"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "advanceEpoch",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "uint96",
									"name": "series",
									"type": "uint96"
								}
							],
							"name": "epoch",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "maker",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "series",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "makerEpoch",
									"type": "uint256"
								}
							],
							"name": "epochEquals",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint96",
									"name": "series",
									"type": "uint96"
								}
							],
							"name": "increaseEpoch",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"epochEquals(address,uint256,uint256)": {
								"returns": {
									"_0": "Result True if `maker` has specified epoch. Otherwise, false"
								}
							}
						},
						"title": "A helper contract to manage nonce with the series",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523461001657610266908161001b8239f35b5f80fdfe60806040908082526004361015610014575f80fd5b5f3560e01c9081630d2c7c161461016457508063c3cf8043146100ed578063ce3d710a146100a85763fcea9e4e1461004a575f80fd5b346100a457806003193601126100a45761006261021a565b90602435916001600160601b03831683036100a4576020926001600160601b0360a01b9060a01b169060018060a01b0316175f525f8252805f20549051908152f35b5f80fd5b50346100a45760603660031901126100a4576020906100c561021a565b6001600160a01b031660243560a01b175f908152808352819020549051604435919091148152f35b50346100a45760203660031901126100a4577f099133aefc2c2d1e56f8ef3622ec8e80979a0713fc9c4e1497740efcf8099396610128610204565b916001600160601b0360a01b8360a01b1633175f525f602052805f2060018154018091556001600160601b0382519416845260208401523392a2005b82346100a457806003193601126100a45761017d610204565b90602435801580156101fa575b6101eb57907f099133aefc2c2d1e56f8ef3622ec8e80979a0713fc9c4e1497740efcf8099396916001600160601b0360a01b8460a01b1633175f525f602052815f20908154018091556001600160601b0382519416845260208401523392a2005b63555fbbbf60e01b8452600484fd5b5060ff811161018a565b600435906001600160601b03821682036100a457565b600435906001600160a01b03821682036100a45756fea264697066735822122052ae64097272d50eea648b9982f8c12e47b410a0404d59c10cda1b030743cde264736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x266 SWAP1 DUP2 PUSH2 0x1B DUP3 CODECOPY RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x14 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0xD2C7C16 EQ PUSH2 0x164 JUMPI POP DUP1 PUSH4 0xC3CF8043 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0xCE3D710A EQ PUSH2 0xA8 JUMPI PUSH4 0xFCEA9E4E EQ PUSH2 0x4A JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xA4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xA4 JUMPI PUSH2 0x62 PUSH2 0x21A JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND DUP4 SUB PUSH2 0xA4 JUMPI PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP1 PUSH1 0xA0 SHL AND SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND OR PUSH0 MSTORE PUSH0 DUP3 MSTORE DUP1 PUSH0 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA4 JUMPI PUSH1 0x20 SWAP1 PUSH2 0xC5 PUSH2 0x21A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 CALLDATALOAD PUSH1 0xA0 SHL OR PUSH0 SWAP1 DUP2 MSTORE DUP1 DUP4 MSTORE DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH1 0x44 CALLDATALOAD SWAP2 SWAP1 SWAP2 EQ DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA4 JUMPI PUSH32 0x99133AEFC2C2D1E56F8EF3622EC8E80979A0713FC9C4E1497740EFCF8099396 PUSH2 0x128 PUSH2 0x204 JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP4 PUSH1 0xA0 SHL AND CALLER OR PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE DUP1 PUSH0 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD DUP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 MLOAD SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG2 STOP JUMPDEST DUP3 CALLVALUE PUSH2 0xA4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xA4 JUMPI PUSH2 0x17D PUSH2 0x204 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD DUP1 ISZERO DUP1 ISZERO PUSH2 0x1FA JUMPI JUMPDEST PUSH2 0x1EB JUMPI SWAP1 PUSH32 0x99133AEFC2C2D1E56F8EF3622EC8E80979A0713FC9C4E1497740EFCF8099396 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP5 PUSH1 0xA0 SHL AND CALLER OR PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE DUP2 PUSH0 KECCAK256 SWAP1 DUP2 SLOAD ADD DUP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 MLOAD SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG2 STOP JUMPDEST PUSH4 0x555FBBBF PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 REVERT JUMPDEST POP PUSH1 0xFF DUP2 GT PUSH2 0x18A JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xA4 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xA4 JUMPI JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE 0xAE PUSH5 0x97272D50E 0xEA PUSH5 0x8B9982F8C1 0x2E SELFBALANCE 0xB4 LT LOG0 BLOCKHASH 0x4D MSIZE 0xC1 0xC 0xDA SHL SUB SMOD NUMBER 0xCD 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "119:1597:39:-:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 538,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_uint96": {
									"entryPoint": 516,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040908082526004361015610014575f80fd5b5f3560e01c9081630d2c7c161461016457508063c3cf8043146100ed578063ce3d710a146100a85763fcea9e4e1461004a575f80fd5b346100a457806003193601126100a45761006261021a565b90602435916001600160601b03831683036100a4576020926001600160601b0360a01b9060a01b169060018060a01b0316175f525f8252805f20549051908152f35b5f80fd5b50346100a45760603660031901126100a4576020906100c561021a565b6001600160a01b031660243560a01b175f908152808352819020549051604435919091148152f35b50346100a45760203660031901126100a4577f099133aefc2c2d1e56f8ef3622ec8e80979a0713fc9c4e1497740efcf8099396610128610204565b916001600160601b0360a01b8360a01b1633175f525f602052805f2060018154018091556001600160601b0382519416845260208401523392a2005b82346100a457806003193601126100a45761017d610204565b90602435801580156101fa575b6101eb57907f099133aefc2c2d1e56f8ef3622ec8e80979a0713fc9c4e1497740efcf8099396916001600160601b0360a01b8460a01b1633175f525f602052815f20908154018091556001600160601b0382519416845260208401523392a2005b63555fbbbf60e01b8452600484fd5b5060ff811161018a565b600435906001600160601b03821682036100a457565b600435906001600160a01b03821682036100a45756fea264697066735822122052ae64097272d50eea648b9982f8c12e47b410a0404d59c10cda1b030743cde264736f6c63430008170033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x14 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0xD2C7C16 EQ PUSH2 0x164 JUMPI POP DUP1 PUSH4 0xC3CF8043 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0xCE3D710A EQ PUSH2 0xA8 JUMPI PUSH4 0xFCEA9E4E EQ PUSH2 0x4A JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xA4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xA4 JUMPI PUSH2 0x62 PUSH2 0x21A JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND DUP4 SUB PUSH2 0xA4 JUMPI PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP1 PUSH1 0xA0 SHL AND SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND OR PUSH0 MSTORE PUSH0 DUP3 MSTORE DUP1 PUSH0 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA4 JUMPI PUSH1 0x20 SWAP1 PUSH2 0xC5 PUSH2 0x21A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 CALLDATALOAD PUSH1 0xA0 SHL OR PUSH0 SWAP1 DUP2 MSTORE DUP1 DUP4 MSTORE DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH1 0x44 CALLDATALOAD SWAP2 SWAP1 SWAP2 EQ DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA4 JUMPI PUSH32 0x99133AEFC2C2D1E56F8EF3622EC8E80979A0713FC9C4E1497740EFCF8099396 PUSH2 0x128 PUSH2 0x204 JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP4 PUSH1 0xA0 SHL AND CALLER OR PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE DUP1 PUSH0 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD DUP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 MLOAD SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG2 STOP JUMPDEST DUP3 CALLVALUE PUSH2 0xA4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xA4 JUMPI PUSH2 0x17D PUSH2 0x204 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD DUP1 ISZERO DUP1 ISZERO PUSH2 0x1FA JUMPI JUMPDEST PUSH2 0x1EB JUMPI SWAP1 PUSH32 0x99133AEFC2C2D1E56F8EF3622EC8E80979A0713FC9C4E1497740EFCF8099396 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP5 PUSH1 0xA0 SHL AND CALLER OR PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE DUP2 PUSH0 KECCAK256 SWAP1 DUP2 SLOAD ADD DUP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 MLOAD SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG2 STOP JUMPDEST PUSH4 0x555FBBBF PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 REVERT JUMPDEST POP PUSH1 0xFF DUP2 GT PUSH2 0x18A JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xA4 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xA4 JUMPI JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE 0xAE PUSH5 0x97272D50E 0xEA PUSH5 0x8B9982F8C1 0x2E SELFBALANCE 0xB4 LT LOG0 BLOCKHASH 0x4D MSIZE 0xC1 0xC 0xDA SHL SUB SMOD NUMBER 0xCD 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "119:1597:39:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;119:1597:39;;;;;;;;-1:-1:-1;;;;;119:1597:39;;;776:3;119:1597;;;;;;;;;739:41;119:1597;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;119:1597:39;;;;;;;;:::i;:::-;-1:-1:-1;;;;;119:1597:39;;;1688:3;119:1597;1651:41;119:1597;;;;;;;;;;;;;;;1643:64;;;;119:1597;;;;;;;;;;-1:-1:-1;;119:1597:39;;;;1310:44;119:1597;;:::i;:::-;;-1:-1:-1;;;;;119:1597:39;;;1196:3;119:1597;;1162:10;1154:46;119:1597;;;;;;;;910:1;119:1597;;;;;;-1:-1:-1;;;;;119:1597:39;;;;;;;;;;1162:10;1310:44;;119:1597;;;;;;;;;;;;;;;;:::i;:::-;;;;1050:11;;:27;;;;119:1597;1046:60;;119:1597;1310:44;119:1597;-1:-1:-1;;;;;119:1597:39;;;1196:3;119:1597;;1162:10;1154:46;119:1597;;;;;;;;;;;;;;;-1:-1:-1;;;;;119:1597:39;;;;;;;;;;1162:10;1310:44;;119:1597;1046:60;-1:-1:-1;;;1086:20:39;;119:1597;1086:20;;1050:27;1065:12;1074:3;1065:12;;1050:27;;119:1597;;;;-1:-1:-1;;;;;119:1597:39;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;119:1597:39;;;;;;:::o"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AdvanceEpochFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpoch\",\"type\":\"uint256\"}],\"name\":\"EpochIncreased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"series\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"advanceEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"series\",\"type\":\"uint96\"}],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerEpoch\",\"type\":\"uint256\"}],\"name\":\"epochEquals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"series\",\"type\":\"uint96\"}],\"name\":\"increaseEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"epochEquals(address,uint256,uint256)\":{\"returns\":{\"_0\":\"Result True if `maker` has specified epoch. Otherwise, false\"}}},\"title\":\"A helper contract to manage nonce with the series\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"advanceEpoch(uint96,uint256)\":{\"notice\":\"Advances nonce by specified amount\"},\"epoch(address,uint96)\":{\"notice\":\"Returns nonce for `maker` and `series`\"},\"epochEquals(address,uint256,uint256)\":{\"notice\":\"Checks if `maker` has specified `makerEpoch` for `series`\"},\"increaseEpoch(uint96)\":{\"notice\":\"Advances nonce by one\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SeriesEpochManager.sol\":\"SeriesEpochManager\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/SeriesEpochManager.sol\":{\"keccak256\":\"0x9d03f20594ca58ba892ad2e015f3fdade1ed8634073cd2dcc6498a98acc79541\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1eb4af3779131b166d4529c2123b9cb00f9f59e1dbff3814948d37cf193c8184\",\"dweb:/ipfs/Qme1qvRRPcac4qYQu1nUFyd4Gu4iP6nqvSEr28F8VbJqQ1\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"advanceEpoch(uint96,uint256)": {
								"notice": "Advances nonce by specified amount"
							},
							"epoch(address,uint96)": {
								"notice": "Returns nonce for `maker` and `series`"
							},
							"epochEquals(address,uint256,uint256)": {
								"notice": "Checks if `maker` has specified `makerEpoch` for `series`"
							},
							"increaseEpoch(uint96)": {
								"notice": "Advances nonce by one"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/ShortStrings.sol": {
				"ShortStrings": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220739fca9a4dd89b77635a06ae02ecbd10a88498be6593a223061b2562f18af1a464736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x9FCA9A4DD89B77635A06AE02ECBD10A88498BE65 SWAP4 LOG2 0x23 MOD SHL 0x25 PUSH3 0xF18AF1 LOG4 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "1255:3046:40:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220739fca9a4dd89b77635a06ae02ecbd10a88498be6593a223061b2562f18af1a464736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x9FCA9A4DD89B77635A06AE02ECBD10A88498BE65 SWAP4 LOG2 0x23 MOD SHL 0x25 PUSH3 0xF18AF1 LOG4 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "1255:3046:40:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ShortStrings.sol\":{\"keccak256\":\"0xbfad9b3a40cba77c2f86c308175ac65e06b10e76159d635b018171c67846da69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3b4406389834f36341fc1c87d4e8ab26d902a40b887a17689a238e5a97ef0b2\",\"dweb:/ipfs/QmQtUoQLw3NjKrAutrXqepURfrb4pvoZ6mXp4AcUuosH4D\"]},\"contracts/StorageSlot.sol\":{\"keccak256\":\"0x2373cbbdccacc6777b2a7b459aa35b7629b0f7aa63566cd9afe45be9f256645c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4d674a1520bc8b6888ff3c5e663a45b5da00bc20ddc82e8351f6bc28d6f23db\",\"dweb:/ipfs/QmWG1RkHw5AtGdQZQpk4CZZc4HXp9bJVSf1xiR2yF9yAtP\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212207fdf9511e1fa9e6ef746f5c07050bcc92fea4cf4729753ebba99a32e20613ef964736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0xDF9511E1FA9E6EF746F5C07050BCC92FEA4CF4729753EBBA99A32E20613EF964 PUSH20 0x6F6C634300081700330000000000000000000000 ",
							"sourceMap": "258:2354:41:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212207fdf9511e1fa9e6ef746f5c07050bcc92fea4cf4729753ebba99a32e20613ef964736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0xDF9511E1FA9E6EF746F5C07050BCC92FEA4CF4729753EBBA99A32E20613EF964 PUSH20 0x6F6C634300081700330000000000000000000000 ",
							"sourceMap": "258:2354:41:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/SafeCast.sol\":{\"keccak256\":\"0x16949b29739a3a20cf5ffe9ca22830a9f9b6deff16ee925827b19ddb5fbc127a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://768190c98439f96d5cad1900cc96e24f0749172192be8b5de885c426750c6ecd\",\"dweb:/ipfs/QmWPmxri7eCbAXC7p3qJ14ckPTUDkdE3wuyiMoc1pat5ft\"]},\"contracts/SignedMath.sol\":{\"keccak256\":\"0xc07e2a3d5f315dafaec45606b60414be49cc913bd11ea1b1d8ee460e72f37445\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d5f6ea2b532028ac1b221ce2e33bfbf71d2ef43b318db47c029ea7b1760d4df\",\"dweb:/ipfs/QmdxY44UJdhcgVZ7YCm6um4FKBU1PvL925KgefxD7onTRw\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/StorageSlot.sol": {
				"StorageSlot": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220c69bbac7247d49d54322c256c3c24632054bdfa9c62fc7948f0e4b860f90ca4e64736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 SWAP12 0xBA 0xC7 0x24 PUSH30 0x49D54322C256C3C24632054BDFA9C62FC7948F0E4B860F90CA4E64736F6C PUSH4 0x43000817 STOP CALLER ",
							"sourceMap": "1407:2774:42:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220c69bbac7247d49d54322c256c3c24632054bdfa9c62fc7948f0e4b860f90ca4e64736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 SWAP12 0xBA 0xC7 0x24 PUSH30 0x49D54322C256C3C24632054BDFA9C62FC7948F0E4B860F90CA4E64736F6C PUSH4 0x43000817 STOP CALLER ",
							"sourceMap": "1407:2774:42:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/StorageSlot.sol\":{\"keccak256\":\"0x2373cbbdccacc6777b2a7b459aa35b7629b0f7aa63566cd9afe45be9f256645c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4d674a1520bc8b6888ff3c5e663a45b5da00bc20ddc82e8351f6bc28d6f23db\",\"dweb:/ipfs/QmWG1RkHw5AtGdQZQpk4CZZc4HXp9bJVSf1xiR2yF9yAtP\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Strings.sol": {
				"Strings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "StringsInsufficientHexLength",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "StringsInvalidAddressFormat",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "StringsInvalidChar",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "String operations.",
						"errors": {
							"StringsInsufficientHexLength(uint256,uint256)": [
								{
									"details": "The `value` string doesn't fit in the specified `length`."
								}
							],
							"StringsInvalidAddressFormat()": [
								{
									"details": "The string being parsed is not a properly formatted address."
								}
							],
							"StringsInvalidChar()": [
								{
									"details": "The string being parsed contains characters that are not in scope of the given base."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122099866e885985a5135ee4d782f57846541e90bb218004e950e658f0129b062e8264736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 DUP7 PUSH15 0x885985A5135EE4D782F57846541E90 0xBB 0x21 DUP1 DIV 0xE9 POP 0xE6 PC CREATE SLT SWAP12 MOD 0x2E DUP3 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "282:16541:43:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea264697066735822122099866e885985a5135ee4d782f57846541e90bb218004e950e658f0129b062e8264736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 DUP7 PUSH15 0x885985A5135EE4D782F57846541E90 0xBB 0x21 DUP1 DIV 0xE9 POP 0xE6 PC CREATE SLT SWAP12 MOD 0x2E DUP3 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "282:16541:43:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StringsInvalidAddressFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StringsInvalidChar\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}],\"StringsInvalidAddressFormat()\":[{\"details\":\"The string being parsed is not a properly formatted address.\"}],\"StringsInvalidChar()\":[{\"details\":\"The string being parsed contains characters that are not in scope of the given base.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Strings.sol\":\"Strings\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Math.sol\":{\"keccak256\":\"0x38c3845ac06436b72e265731c3546e21b2e792a800af0c355f2039ceb85cdbfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c63508dd9c15bf8155a8c248518310ad06b1d3f8d42082866fc8ecaa37f8dfda\",\"dweb:/ipfs/QmXiJyT5zGCgPWeLrF1g3fpvbjMkVQBt9MSq3fiA97VsTj\"]},\"contracts/Panic.sol\":{\"keccak256\":\"0xec0c46048fd01751aa22ecddb66df20b702374fd68f3f4b3ae363782f6b31f9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d32d9af31bc44235f769cf820ec96fd3f0aea9e16a169b244a62e34e482d7d55\",\"dweb:/ipfs/Qmd4Lw5sSLQtfE2vEy29RHzffinDsHgN1pGaS8Eex1F8ks\"]},\"contracts/SafeCast.sol\":{\"keccak256\":\"0x16949b29739a3a20cf5ffe9ca22830a9f9b6deff16ee925827b19ddb5fbc127a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://768190c98439f96d5cad1900cc96e24f0749172192be8b5de885c426750c6ecd\",\"dweb:/ipfs/QmWPmxri7eCbAXC7p3qJ14ckPTUDkdE3wuyiMoc1pat5ft\"]},\"contracts/SignedMath.sol\":{\"keccak256\":\"0xc07e2a3d5f315dafaec45606b60414be49cc913bd11ea1b1d8ee460e72f37445\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d5f6ea2b532028ac1b221ce2e33bfbf71d2ef43b318db47c029ea7b1760d4df\",\"dweb:/ipfs/QmdxY44UJdhcgVZ7YCm6um4FKBU1PvL925KgefxD7onTRw\"]},\"contracts/Strings.sol\":{\"keccak256\":\"0x250d60b0677654f4955e3cd43a8d9b41a8d7f2e6a8c222c28629c7c4abafa4f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8af0ca2b41a72909427f62226a438fc38e5c7b94057744d3a079da0a6973ff0d\",\"dweb:/ipfs/QmWUydSxPhJbJFqi8q6YvyxpUiMhGDSDDYxvubcSVjeuXG\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/TakerTraitsLib.sol": {
				"TakerTraitsLib": {
					"abi": [],
					"devdoc": {
						"details": "The TakerTraits are structured as follows: High bits are used for flags 255 bit `_MAKER_AMOUNT_FLAG`           - If set, the taking amount is calculated based on making amount, otherwise making amount is calculated based on taking amount. 254 bit `_UNWRAP_WETH_FLAG`            - If set, the WETH will be unwrapped into ETH before sending to taker. 253 bit `_SKIP_ORDER_PERMIT_FLAG`      - If set, the order skips maker's permit execution. 252 bit `_USE_PERMIT2_FLAG`            - If set, the order uses the permit2 function for authorization. 251 bit `_ARGS_HAS_TARGET`             - If set, then first 20 bytes of args are treated as target address for maker’s funds transfer. 224-247 bits `ARGS_EXTENSION_LENGTH`   - The length of the extension calldata in the args. 200-223 bits `ARGS_INTERACTION_LENGTH` - The length of the interaction calldata in the args. 0-184 bits                             - The threshold amount (the maximum amount a taker agrees to give in exchange for a making amount).",
						"kind": "dev",
						"methods": {},
						"title": "TakerTraitsLib",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212208a5dfdad24ed8fd386d605ae3ef4dd615f54d69ab99ce2c3dedd68936bc0f70e64736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 0x5D REVERT 0xAD 0x24 0xED DUP16 0xD3 DUP7 0xD6 SDIV 0xAE RETURNDATACOPY DELEGATECALL 0xDD PUSH2 0x5F54 0xD6 SWAP11 0xB9 SWAP13 0xE2 0xC3 0xDE 0xDD PUSH9 0x936BC0F70E64736F6C PUSH4 0x43000817 STOP CALLER ",
							"sourceMap": "1300:4048:44:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212208a5dfdad24ed8fd386d605ae3ef4dd615f54d69ab99ce2c3dedd68936bc0f70e64736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 0x5D REVERT 0xAD 0x24 0xED DUP16 0xD3 DUP7 0xD6 SDIV 0xAE RETURNDATACOPY DELEGATECALL 0xDD PUSH2 0x5F54 0xD6 SWAP11 0xB9 SWAP13 0xE2 0xC3 0xDE 0xDD PUSH9 0x936BC0F70E64736F6C PUSH4 0x43000817 STOP CALLER ",
							"sourceMap": "1300:4048:44:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"The TakerTraits are structured as follows: High bits are used for flags 255 bit `_MAKER_AMOUNT_FLAG`           - If set, the taking amount is calculated based on making amount, otherwise making amount is calculated based on taking amount. 254 bit `_UNWRAP_WETH_FLAG`            - If set, the WETH will be unwrapped into ETH before sending to taker. 253 bit `_SKIP_ORDER_PERMIT_FLAG`      - If set, the order skips maker's permit execution. 252 bit `_USE_PERMIT2_FLAG`            - If set, the order uses the permit2 function for authorization. 251 bit `_ARGS_HAS_TARGET`             - If set, then first 20 bytes of args are treated as target address for maker\\u2019s funds transfer. 224-247 bits `ARGS_EXTENSION_LENGTH`   - The length of the extension calldata in the args. 200-223 bits `ARGS_INTERACTION_LENGTH` - The length of the interaction calldata in the args. 0-184 bits                             - The threshold amount (the maximum amount a taker agrees to give in exchange for a making amount).\",\"kind\":\"dev\",\"methods\":{},\"title\":\"TakerTraitsLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This library to manage and check TakerTraits, which are used to encode the taker's preferences for an order in a single uint256.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TakerTraitsLib.sol\":\"TakerTraitsLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/TakerTraitsLib.sol\":{\"keccak256\":\"0x25d36a3b3645561fc5b3f35c1e93fe60220bd15f9af896b0c6263a3269710fcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45597b42af6b436271ac8e6577255137557ff72d45883ef4bce01198016d4bb5\",\"dweb:/ipfs/QmamEQ6c5ffZqanpuX52PUf88wPu6Gp4T8LCVVzonAo1uS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "This library to manage and check TakerTraits, which are used to encode the taker's preferences for an order in a single uint256.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/AddressLib.sol": {
				"id": 0
			},
			"contracts/AmountCalculatorLib.sol": {
				"id": 1
			},
			"contracts/BitInvalidatorLib.sol": {
				"id": 2
			},
			"contracts/Context.sol": {
				"id": 3
			},
			"contracts/ECDSA.sol": {
				"id": 4
			},
			"contracts/EIP712.sol": {
				"id": 5
			},
			"contracts/Errors.sol": {
				"id": 6
			},
			"contracts/EthReceiver.sol": {
				"id": 7
			},
			"contracts/ExtensionLib.sol": {
				"id": 8
			},
			"contracts/IAmountGetter.sol": {
				"id": 9
			},
			"contracts/IDaiLikePermit.sol": {
				"id": 10
			},
			"contracts/IERC1271.sol": {
				"id": 11
			},
			"contracts/IERC20.sol": {
				"id": 12
			},
			"contracts/IERC20Permit.sol": {
				"id": 13
			},
			"contracts/IERC5267.sol": {
				"id": 14
			},
			"contracts/IERC7597Permit.sol": {
				"id": 15
			},
			"contracts/IOrderMixin.sol": {
				"id": 16
			},
			"contracts/IPermit2.sol": {
				"id": 17
			},
			"contracts/IPostInteraction.sol": {
				"id": 18
			},
			"contracts/IPreInteraction.sol": {
				"id": 19
			},
			"contracts/ITakerInteraction.sol": {
				"id": 20
			},
			"contracts/IWETH.sol": {
				"id": 21
			},
			"contracts/LimitOrderProtocol.sol": {
				"id": 22
			},
			"contracts/MakerTraitsLib.sol": {
				"id": 23
			},
			"contracts/Math.sol": {
				"id": 24
			},
			"contracts/MessageHashUtils.sol": {
				"id": 25
			},
			"contracts/OffsetsLib.sol": {
				"id": 26
			},
			"contracts/OnlyWethReceiver.sol": {
				"id": 27
			},
			"contracts/OrderLib.sol": {
				"id": 28
			},
			"contracts/OrderMixin.sol": {
				"id": 29
			},
			"contracts/Ownable.sol": {
				"id": 30
			},
			"contracts/Panic.sol": {
				"id": 31
			},
			"contracts/Pausable.sol": {
				"id": 32
			},
			"contracts/PermitAndCall.sol": {
				"id": 33
			},
			"contracts/PredicateHelper.sol": {
				"id": 34
			},
			"contracts/RemainingInvalidatorLib.sol": {
				"id": 35
			},
			"contracts/RevertReasonForwarder.sol": {
				"id": 36
			},
			"contracts/SafeCast.sol": {
				"id": 37
			},
			"contracts/SafeERC20.sol": {
				"id": 38
			},
			"contracts/SeriesEpochManager.sol": {
				"id": 39
			},
			"contracts/ShortStrings.sol": {
				"id": 40
			},
			"contracts/SignedMath.sol": {
				"id": 41
			},
			"contracts/StorageSlot.sol": {
				"id": 42
			},
			"contracts/Strings.sol": {
				"id": 43
			},
			"contracts/TakerTraitsLib.sol": {
				"id": 44
			}
		}
	}
}