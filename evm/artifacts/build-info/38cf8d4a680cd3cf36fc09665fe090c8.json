{
	"id": "38cf8d4a680cd3cf36fc09665fe090c8",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.23",
	"solcLongVersion": "0.8.23+commit.f704f362",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"*": [
						"evm.bytecode",
						"evm.deployedBytecode",
						"devdoc",
						"userdoc",
						"metadata",
						"abi"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"contracts/escrow/libraries/TimelocksLib.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Timelocks for the source and the destination chains plus the deployment timestamp.\n * Timelocks store the number of seconds from the time the contract is deployed to the start of a specific period.\n * For illustrative purposes, it is possible to describe timelocks by two structures:\n * struct SrcTimelocks {\n *     uint256 withdrawal;\n *     uint256 publicWithdrawal;\n *     uint256 cancellation;\n *     uint256 publicCancellation;\n * }\n *\n * struct DstTimelocks {\n *     uint256 withdrawal;\n *     uint256 publicWithdrawal;\n *     uint256 cancellation;\n * }\n *\n * withdrawal: Period when only the taker with a secret can withdraw tokens for taker (source chain) or maker (destination chain).\n * publicWithdrawal: Period when anyone with a secret can withdraw tokens for taker (source chain) or maker (destination chain).\n * cancellation: Period when escrow can only be cancelled by the taker.\n * publicCancellation: Period when escrow can be cancelled by anyone.\n *\n * @custom:security-contact security@1inch.io\n */\ntype Timelocks is uint256;\n\n/**\n * @title Timelocks library for compact storage of timelocks in a uint256.\n */\nlibrary TimelocksLib {\n    enum Stage {\n        SrcWithdrawal,\n        SrcPublicWithdrawal,\n        SrcCancellation,\n        SrcPublicCancellation,\n        DstWithdrawal,\n        DstPublicWithdrawal,\n        DstCancellation\n    }\n\n    uint256 private constant _DEPLOYED_AT_MASK = 0xffffffff00000000000000000000000000000000000000000000000000000000;\n    uint256 private constant _DEPLOYED_AT_OFFSET = 224;\n\n    /**\n     * @notice Sets the Escrow deployment timestamp.\n     * @param timelocks The timelocks to set the deployment timestamp to.\n     * @param value The new Escrow deployment timestamp.\n     * @return The timelocks with the deployment timestamp set.\n     */\n    function setDeployedAt(Timelocks timelocks, uint256 value) internal pure returns (Timelocks) {\n        return Timelocks.wrap((Timelocks.unwrap(timelocks) & ~uint256(_DEPLOYED_AT_MASK)) | value << _DEPLOYED_AT_OFFSET);\n    }\n\n    /**\n     * @notice Returns the start of the rescue period.\n     * @param timelocks The timelocks to get the rescue delay from.\n     * @return The start of the rescue period.\n     */\n    function rescueStart(Timelocks timelocks, uint256 rescueDelay) internal pure returns (uint256) {\n        unchecked {\n            return rescueDelay + (Timelocks.unwrap(timelocks) >> _DEPLOYED_AT_OFFSET);\n        }\n    }\n\n    /**\n     * @notice Returns the timelock value for the given stage.\n     * @param timelocks The timelocks to get the value from.\n     * @param stage The stage to get the value for.\n     * @return The timelock value for the given stage.\n     */\n    function get(Timelocks timelocks, Stage stage) internal pure returns (uint256) {\n        uint256 data = Timelocks.unwrap(timelocks);\n        uint256 bitShift = uint256(stage) * 32;\n        // The maximum uint32 value will be reached in 2106.\n        return (data >> _DEPLOYED_AT_OFFSET) + uint32(data >> bitShift);\n    }\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/escrow/libraries/TimelocksLib.sol": {
				"TimelocksLib": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Timelocks library for compact storage of timelocks in a uint256.",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122031e550ccabc4bfc871c529f4c44156afecc37043848f0a2026f4a5abc6aadd6d64736f6c63430008170033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE 0xE5 POP 0xCC 0xAB 0xC4 0xBF 0xC8 PUSH18 0xC529F4C44156AFECC37043848F0A2026F4A5 0xAB 0xC6 0xAA 0xDD PUSH14 0x64736F6C63430008170033000000 ",
							"sourceMap": "1200:1882:0:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea264697066735822122031e550ccabc4bfc871c529f4c44156afecc37043848f0a2026f4a5abc6aadd6d64736f6c63430008170033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE 0xE5 POP 0xCC 0xAB 0xC4 0xBF 0xC8 PUSH18 0xC529F4C44156AFECC37043848F0A2026F4A5 0xAB 0xC6 0xAA 0xDD PUSH14 0x64736F6C63430008170033000000 ",
							"sourceMap": "1200:1882:0:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Timelocks library for compact storage of timelocks in a uint256.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/escrow/libraries/TimelocksLib.sol\":\"TimelocksLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/escrow/libraries/TimelocksLib.sol\":{\"keccak256\":\"0xd6ad5f65d792a1bc4c40328afed51281b7855ebf69696125cbbec42b695e9379\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db449fb7a9bd6d334ed5aeb4e14297a729e2a97fbf20b22821e18446b67bbaf2\",\"dweb:/ipfs/QmXUUBE2dyAF922kCaxhqDr1yL1s7t44di44ewWzEoKG3d\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/escrow/libraries/TimelocksLib.sol": {
				"id": 0
			}
		}
	}
}