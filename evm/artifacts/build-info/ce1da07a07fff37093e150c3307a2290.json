{
	"id": "ce1da07a07fff37093e150c3307a2290",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.23",
	"solcLongVersion": "0.8.23+commit.f704f362",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"*": [
						"evm.bytecode",
						"evm.deployedBytecode",
						"devdoc",
						"userdoc",
						"metadata",
						"abi"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"contracts/EthReceiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title EthReceiver\n * @dev Abstract contract for rejecting direct ETH transfers from EOAs.\n * Implements a custom error and logic to reject ETH deposits from non-contract addresses.\n */\nabstract contract EthReceiver {\n    /// @dev Error thrown when an ETH deposit from an EOA is attempted.\n    error EthDepositRejected();\n\n    /// @dev External payable function to receive ETH, automatically rejects deposits from EOAs.\n    receive() external payable {\n        _receive();\n    }\n\n    /**\n     * @dev Internal function containing the logic to reject ETH deposits.\n     * Can be overridden by derived contracts for specific behaviors while maintaining the base rejection mechanism.\n     */\n    function _receive() internal virtual {\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin) revert EthDepositRejected();\n    }\n}"
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/EthReceiver.sol": {
				"EthReceiver": {
					"abi": [
						{
							"inputs": [],
							"name": "EthDepositRejected",
							"type": "error"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"details": "Abstract contract for rejecting direct ETH transfers from EOAs. Implements a custom error and logic to reject ETH deposits from non-contract addresses.",
						"errors": {
							"EthDepositRejected()": [
								{
									"details": "Error thrown when an ETH deposit from an EOA is attempted."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "EthReceiver",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EthDepositRejected\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Abstract contract for rejecting direct ETH transfers from EOAs. Implements a custom error and logic to reject ETH deposits from non-contract addresses.\",\"errors\":{\"EthDepositRejected()\":[{\"details\":\"Error thrown when an ETH deposit from an EOA is attempted.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"EthReceiver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EthReceiver.sol\":\"EthReceiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/EthReceiver.sol\":{\"keccak256\":\"0x7fbf52c64fd6e03b2f5d977aac7d2b377fc240495d09e47642dc4ef301d173c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8dfcabf097c3a4e0819d387acc40b135aa9d59320971c2d648e399f77fedd7fc\",\"dweb:/ipfs/QmQreuBPfDUkauL9FTFY9dLe7vGyLsQoDA5DHZrA1u9SZS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/EthReceiver.sol": {
				"id": 0
			}
		}
	}
}